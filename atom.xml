<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>每天一探</title>
  
  <subtitle>无法停止探索的脚步</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sosout.com/"/>
  <updated>2018-09-14T13:47:47.205Z</updated>
  <id>http://sosout.com/</id>
  
  <author>
    <name>Weich</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>有史以来最小的编译器源码解析</title>
    <link href="http://sosout.com/2018/09/14/the-super-tiny-compiler.html"/>
    <id>http://sosout.com/2018/09/14/the-super-tiny-compiler.html</id>
    <published>2018-09-13T22:30:22.000Z</published>
    <updated>2018-09-14T13:47:47.205Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jamiebuilds/the-super-tiny-compiler" target="_blank" rel="noopener">the-super-tiny-compiler</a><br><a href="https://github.com/sosout/astc" target="_blank" rel="noopener">详细中文注释 the-super-tiny-compiler</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>稍微接触一点前端，我们都知道现在前端“ES6即正义”，然而浏览器的支持还处于进行阶段，所以我们常常会用一个神奇的工具将 ES6 语法转换为目前支持比较广泛的 ES5 语法，这里我们所说的神奇的工具就是编译器。编译器功能非常纯粹，将字符串形式的输入语言编译成目标语言的代码字符串（以及sourcemap），常用的编译器除了我们熟知的 Babel 之外，还有 gcc。不过我们今天的主角是号称可能是有史以来最小的编译器<a href="https://github.com/jamiebuilds/the-super-tiny-compiler" target="_blank" rel="noopener">the-super-tiny-compiler</a>，去掉注释也就200多行代码，作者 James Kyle 更是 Babel 的活跃维护者之一。这个编译器的功能很简单，主要把 Lisp 风格的函数调用转换成 C 风格的，例如：</p><table><thead><tr><th></th><th>Lisp 风格（转化前）</th><th>C 风格（转化后）</th></tr></thead><tbody><tr><td>2 + 2</td><td>(add 2 2)</td><td>add(2, 2)</td></tr><tr><td>4 - 2</td><td>(subtract 4 2)</td><td>subtract(4, 2)</td></tr><tr><td>2 + (4 - 2)</td><td>(add 2 (subtract 4 2))</td><td>add(2, subtract(4, 2))</td></tr></tbody></table><h2 id="编译器工作的三个阶段"><a href="#编译器工作的三个阶段" class="headerlink" title="编译器工作的三个阶段"></a>编译器工作的三个阶段</h2><p>绝大多数编译器的编译过程都差不多，主要分为三个阶段：<br><strong>解析：</strong>将代码字符串解析成抽象语法树。<br><strong>转换：</strong>对抽象语法树进行转换操作。<br><strong>代码生成：</strong>根据转换后的抽象语法树生成目标代码字符串。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析过程主要分为两部分：词法分析和语法分析。<br><strong>1、</strong>词法分析是由词法分析器把原始代码字符串转换成一系列词法单元（token），词法单元是一个数组，由一系列描述独立语法的对象组成，它们可以是数值、标签、标点符号、运算符、括号等。<br><strong>2、</strong>语法分析是由语法分析器将词法分析器生成的词法单元转化为能够描述语法结构（包括语法成分及其关系）的中间表示形式（Intermediate Representation）或抽象语法树（Abstract Syntax Tree），其中抽象语法树（简称AST）是个深层嵌套的对象。</p><p>我们简单看一下 the-super-tiny-compiler 的整个解析过程：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始代码字符串</span></span><br><span class="line">(add <span class="number">2</span> (subtract <span class="number">4</span> <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 词法分析转化后生成的词法单元</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'paren'</span>,  <span class="attr">value</span>: <span class="string">'('</span>        &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'name'</span>,   <span class="attr">value</span>: <span class="string">'add'</span>      &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'number'</span>, <span class="attr">value</span>: <span class="string">'2'</span>        &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'paren'</span>,  <span class="attr">value</span>: <span class="string">'('</span>        &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'name'</span>,   <span class="attr">value</span>: <span class="string">'subtract'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'number'</span>, <span class="attr">value</span>: <span class="string">'4'</span>        &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'number'</span>, <span class="attr">value</span>: <span class="string">'2'</span>        &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'paren'</span>,  <span class="attr">value</span>: <span class="string">')'</span>        &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'paren'</span>,  <span class="attr">value</span>: <span class="string">')'</span>        &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法分析转化后生成的抽象语法树（AST）</span></span><br><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'Program'</span>,</span><br><span class="line">  body: [&#123;</span><br><span class="line">    type: <span class="string">'CallExpression'</span>,</span><br><span class="line">    name: <span class="string">'add'</span>,</span><br><span class="line">    params: [&#123;</span><br><span class="line">      type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">      value: <span class="string">'2'</span>,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      type: <span class="string">'CallExpression'</span>,</span><br><span class="line">      name: <span class="string">'subtract'</span>,</span><br><span class="line">      params: [&#123;</span><br><span class="line">        type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">        value: <span class="string">'4'</span>,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">        value: <span class="string">'2'</span>,</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>转换过程主要任务是修改 AST，即遍历解析过程生成的 AST，同时进行一系列操作，比如增/删/改节点、增/删/改属性、创建新树等，我们简单看一下 the-super-tiny-compiler 的整个转换过程：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始代码字符串</span></span><br><span class="line">(add <span class="number">2</span> (subtract <span class="number">4</span> <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析过程生成的 AST</span></span><br><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'Program'</span>,</span><br><span class="line">  body: [&#123;</span><br><span class="line">    type: <span class="string">'CallExpression'</span>,</span><br><span class="line">    name: <span class="string">'add'</span>,</span><br><span class="line">    params: [&#123;</span><br><span class="line">      type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">      value: <span class="string">'2'</span>,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      type: <span class="string">'CallExpression'</span>,</span><br><span class="line">      name: <span class="string">'subtract'</span>,</span><br><span class="line">      params: [&#123;</span><br><span class="line">        type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">        value: <span class="string">'4'</span>,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">        value: <span class="string">'2'</span>,</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换过程生成的 AST</span></span><br><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'Program'</span>,</span><br><span class="line">  body: [&#123;</span><br><span class="line">    type: <span class="string">'ExpressionStatement'</span>,</span><br><span class="line">    expression: &#123;</span><br><span class="line">      type: <span class="string">'CallExpression'</span>,</span><br><span class="line">      callee: &#123;</span><br><span class="line">        type: <span class="string">'Identifier'</span>,</span><br><span class="line">        name: <span class="string">'add'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="built_in">arguments</span>: [&#123;</span><br><span class="line">        type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">        value: <span class="string">'2'</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        type: <span class="string">'CallExpression'</span>,</span><br><span class="line">        callee: &#123;</span><br><span class="line">          type: <span class="string">'Identifier'</span>,</span><br><span class="line">          name: <span class="string">'subtract'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="built_in">arguments</span>: [&#123;</span><br><span class="line">          type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">          value: <span class="string">'4'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">          value: <span class="string">'2'</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h3><p>根据转换过程生成的抽象语法树生成目标代码字符串。</p><h2 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h2><p>接下来我们根据编译器工作的三个阶段逐一分析一下 the-super-tiny-compiler 源码实现。</p><h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><p>词法分析器主要任务把原始代码字符串转换成一系列词法单元（token）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 词法分析器 参数：代码字符串input</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenizer</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前正在处理的字符索引</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 词法单元数组</span></span><br><span class="line">  <span class="keyword">let</span> tokens = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历字符串，获得词法单元数组</span></span><br><span class="line">  <span class="keyword">while</span> (current &lt; input.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> char = input[current];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匹配左括号</span></span><br><span class="line">    <span class="keyword">if</span> (char === <span class="string">'('</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// type 为 'paren'，value 为左圆括号的对象</span></span><br><span class="line">      tokens.push(&#123;</span><br><span class="line">        type: <span class="string">'paren'</span>,</span><br><span class="line">        value: <span class="string">'('</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// current 自增</span></span><br><span class="line">      current++;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 结束本次循环，进入下一次循环</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匹配右括号</span></span><br><span class="line">    <span class="keyword">if</span> (char === <span class="string">')'</span>) &#123;</span><br><span class="line">      tokens.push(&#123;</span><br><span class="line">        type: <span class="string">'paren'</span>,</span><br><span class="line">        value: <span class="string">')'</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      current++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// \s：匹配任何空白字符，包括空格、制表符、换页符、换行符、垂直制表符等</span></span><br><span class="line">    <span class="keyword">let</span> WHITESPACE = <span class="regexp">/\s/</span>;</span><br><span class="line">    <span class="comment">// 跳过空白字符</span></span><br><span class="line">    <span class="keyword">if</span> (WHITESPACE.test(char)) &#123;</span><br><span class="line">      current++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [0-9]：匹配一个数字字符</span></span><br><span class="line">    <span class="keyword">let</span> NUMBERS = <span class="regexp">/[0-9]/</span>;</span><br><span class="line">    <span class="comment">// 匹配数值</span></span><br><span class="line">    <span class="keyword">if</span> (NUMBERS.test(char)) &#123;</span><br><span class="line">      <span class="keyword">let</span> value = <span class="string">''</span>;</span><br><span class="line">      <span class="comment">// 匹配连续数字，作为数值</span></span><br><span class="line">      <span class="keyword">while</span> (NUMBERS.test(char)) &#123;</span><br><span class="line">        value += char;</span><br><span class="line">        char = input[++current];</span><br><span class="line">      &#125;</span><br><span class="line">      tokens.push(&#123;</span><br><span class="line">        type: <span class="string">'number'</span>,</span><br><span class="line">        value</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匹配形如"abc"的字符串</span></span><br><span class="line">    <span class="keyword">if</span> (char === <span class="string">'"'</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> value = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 跳跃左双引号</span></span><br><span class="line">      char = input[++current];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取两个双引号之间的所有字符</span></span><br><span class="line">      <span class="keyword">while</span> (char !== <span class="string">'"'</span>) &#123;</span><br><span class="line">        value += char;</span><br><span class="line">        char = input[++current];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 跳跃右双引号</span></span><br><span class="line">      char = input[++current];</span><br><span class="line"></span><br><span class="line">      tokens.push(&#123;</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line">        value</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [a-z]：匹配1个小写字符 i 模式中的字符将同时匹配大小写字母</span></span><br><span class="line">    <span class="keyword">let</span> LETTERS = <span class="regexp">/[a-z]/i</span>;</span><br><span class="line">    <span class="comment">// 匹配函数名，要求只含大小写字母</span></span><br><span class="line">    <span class="keyword">if</span> (LETTERS.test(char)) &#123;</span><br><span class="line">      <span class="keyword">let</span> value = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取连续字符</span></span><br><span class="line">      <span class="keyword">while</span> (LETTERS.test(char)) &#123;</span><br><span class="line">        value += char;</span><br><span class="line">        char = input[++current];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      tokens.push(&#123;</span><br><span class="line">        type: <span class="string">'name'</span>,</span><br><span class="line">        value</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无法识别的字符，抛出错误提示</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'I dont know what this character is: '</span> + char);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 词法分析器的最后返回词法单元数组</span></span><br><span class="line">  <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过遍历代码字符串，分拣出各个词素，然后构成由一系列描述独立语法的对象组成的数组的词法单元。</p><h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><p>语法分析器主要任务是将词法分析器生成的词法单元转化为能够描述语法结构（包括语法成分及其关系）的中间表示形式（Intermediate Representation）或抽象语法树（Abstract Syntax Tree）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法分析器 参数：词法单元数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parser</span>(<span class="params">tokens</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前正在处理的 token 索引</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 递归遍历（因为函数调用允许嵌套），将 token 转成 AST 节点</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前 token</span></span><br><span class="line">    <span class="keyword">let</span> token = tokens[current];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数值</span></span><br><span class="line">    <span class="keyword">if</span> (token.type === <span class="string">'number'</span>) &#123;</span><br><span class="line">      <span class="comment">// current 自增</span></span><br><span class="line">      current++;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 生成一个 AST节点 'NumberLiteral'，用来表示数值字面量</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">        value: token.value,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串</span></span><br><span class="line">    <span class="keyword">if</span> (token.type === <span class="string">'string'</span>) &#123;</span><br><span class="line">      current++;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 生成一个 AST节点 'StringLiteral'，用来表示字符串字面量</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'StringLiteral'</span>,</span><br><span class="line">        value: token.value,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数</span></span><br><span class="line">    <span class="keyword">if</span> (token.type === <span class="string">'paren'</span> &amp;&amp; token.value === <span class="string">'('</span>) &#123;</span><br><span class="line">      <span class="comment">// 跳过左括号，获取下一个 token 作为函数名</span></span><br><span class="line">      token = tokens[++current];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> node = &#123;</span><br><span class="line">        type: <span class="string">'CallExpression'</span>,</span><br><span class="line">        name: token.value,</span><br><span class="line">        params: []</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 再次自增 `current` 变量，获取参数 token</span></span><br><span class="line">      token = tokens[++current];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 右括号之前的所有token都属于参数</span></span><br><span class="line">      <span class="keyword">while</span> ((token.type !== <span class="string">'paren'</span>) || (token.type === <span class="string">'paren'</span> &amp;&amp; token.value !== <span class="string">')'</span>)) &#123;</span><br><span class="line">        node.params.push(walk());</span><br><span class="line">        token = tokens[current];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 跳过右括号</span></span><br><span class="line">      current++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 无法识别的字符，抛出错误提示</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(token.type);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// AST的根节点</span></span><br><span class="line">  <span class="keyword">let</span> ast = &#123;</span><br><span class="line">    type: <span class="string">'Program'</span>,</span><br><span class="line">    body: [],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 填充ast.body</span></span><br><span class="line">  <span class="keyword">while</span> (current &lt; tokens.length) &#123;</span><br><span class="line">    ast.body.push(walk());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后返回ast</span></span><br><span class="line">  <span class="keyword">return</span> ast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过递归来将词法分析器生成的词法单元转化为能够描述语法结构的 ast。</p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverser</span>(<span class="params">ast, visitor</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 遍历 AST节点数组 对数组中的每一个元素调用 `traverseNode` 函数。</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">traverseArray</span>(<span class="params">array, parent</span>) </span>&#123;</span><br><span class="line">    array.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">      traverseNode(child, parent);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接受一个 `node` 和它的父节点 `parent` 作为参数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">traverseNode</span>(<span class="params">node, parent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 从 visitor 获取对应方法的对象</span></span><br><span class="line">    <span class="keyword">let</span> methods = visitor[node.type];</span><br><span class="line">    <span class="comment">// 通过 visitor 对应方法操作当前 node</span></span><br><span class="line">    <span class="keyword">if</span> (methods &amp;&amp; methods.enter) &#123;</span><br><span class="line">      methods.enter(node, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (node.type) &#123;</span><br><span class="line">      <span class="comment">// 根节点</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Program'</span>:</span><br><span class="line">        traverseArray(node.body, node);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">// 函数调用</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'CallExpression'</span>:</span><br><span class="line">        traverseArray(node.params, node);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">// 数值和字符串，不用处理</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'NumberLiteral'</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'StringLiteral'</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 无法识别的字符，抛出错误提示</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(node.type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (methods &amp;&amp; methods.exit) &#123;</span><br><span class="line">      methods.exit(node, parent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 开始遍历</span></span><br><span class="line">  traverseNode(ast, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过递归遍历 AST，在遍历过程中通过 visitor 对应方法操作当前 node，这里和切面差不多。</p><h3 id="转换-1"><a href="#转换-1" class="headerlink" title="转换"></a>转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转化器，参数：AST</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformer</span>(<span class="params">ast</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建 `newAST`，它与之前的 AST 类似，Program：新AST的根节点</span></span><br><span class="line">  <span class="keyword">let</span> newAst = &#123;</span><br><span class="line">    type: <span class="string">'Program'</span>,</span><br><span class="line">    body: [],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 _context 维护新旧 AST，注意 _context 是一个引用，从旧的 AST 到新的 AST。</span></span><br><span class="line">  ast._context = newAst.body;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过遍历器遍历 参数：AST 和 visitor</span></span><br><span class="line">  traverser(ast, &#123;</span><br><span class="line">    <span class="comment">// 数值，直接原样插入新AST</span></span><br><span class="line">    NumberLiteral: &#123;</span><br><span class="line">      enter(node, parent) &#123;</span><br><span class="line">        parent._context.push(&#123;</span><br><span class="line">          type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">          value: node.value,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 字符串，直接原样插入新AST</span></span><br><span class="line">    StringLiteral: &#123;</span><br><span class="line">      enter(node, parent) &#123;</span><br><span class="line">        parent._context.push(&#123;</span><br><span class="line">          type: <span class="string">'StringLiteral'</span>,</span><br><span class="line">          value: node.value,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 函数调用</span></span><br><span class="line">    CallExpression: &#123;</span><br><span class="line">      enter(node, parent) &#123;</span><br><span class="line">        <span class="comment">// 创建不同的AST节点</span></span><br><span class="line">        <span class="keyword">let</span> expression = &#123;</span><br><span class="line">          type: <span class="string">'CallExpression'</span>,</span><br><span class="line">          callee: &#123;</span><br><span class="line">            type: <span class="string">'Identifier'</span>,</span><br><span class="line">            name: node.name,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="built_in">arguments</span>: [],</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 函数调用有子类，建立节点对应关系，供子节点使用</span></span><br><span class="line">        node._context = expression.arguments;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 顶层函数调用算是语句，包装成特殊的AST节点</span></span><br><span class="line">        <span class="keyword">if</span> (parent.type !== <span class="string">'CallExpression'</span>) &#123;</span><br><span class="line"></span><br><span class="line">          expression = &#123;</span><br><span class="line">            type: <span class="string">'ExpressionStatement'</span>,</span><br><span class="line">            expression: expression,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        parent._context.push(expression);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 最后返回新 AST</span></span><br><span class="line">  <span class="keyword">return</span> newAst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过 _context 引用维护新旧 AST，简单方便，但会污染旧AST。</p><h3 id="代码生成-1"><a href="#代码生成-1" class="headerlink" title="代码生成"></a>代码生成</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码生成器 参数：新 AST</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">codeGenerator</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (node.type) &#123;</span><br><span class="line">    <span class="comment">// 遍历 body 属性中的节点，且递归调用 codeGenerator，结果按行输出</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Program'</span>:</span><br><span class="line">      <span class="keyword">return</span> node.body.map(codeGenerator)</span><br><span class="line">        .join(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表达式，处理表达式内容，并用分号结尾</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ExpressionStatement'</span>:</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        codeGenerator(node.expression) +</span><br><span class="line">        <span class="string">';'</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数调用，添加左右括号，参数用逗号隔开</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'CallExpression'</span>:</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        codeGenerator(node.callee) +</span><br><span class="line">        <span class="string">'('</span> +</span><br><span class="line">        node.arguments.map(codeGenerator)</span><br><span class="line">          .join(<span class="string">', '</span>) +</span><br><span class="line">        <span class="string">')'</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标识符，数值，原样输出</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Identifier'</span>:</span><br><span class="line">      <span class="keyword">return</span> node.name;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'NumberLiteral'</span>:</span><br><span class="line">      <span class="keyword">return</span> node.value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串，用双引号包起来再输出</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'StringLiteral'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'"'</span> + node.value + <span class="string">'"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无法识别的字符，抛出错误提示</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(node.type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据转换后的新AST生成目标代码字符串。</p><h3 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compiler</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> tokens = tokenizer(input);</span><br><span class="line">  <span class="keyword">let</span> ast    = parser(tokens);</span><br><span class="line">  <span class="keyword">let</span> newAst = transformer(ast);</span><br><span class="line">  <span class="keyword">let</span> output = codeGenerator(newAst);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器整个工作流程：<br><strong>1、</strong>input  =&gt; tokenizer   =&gt; tokens<br><strong>2、</strong>tokens =&gt; parser      =&gt; ast<br><strong>3、</strong>ast    =&gt; transformer =&gt; newAst<br><strong>4、</strong>newAst =&gt; generator   =&gt; output<br>将上面流程串起来，就构成了简单的编译器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/jamiebuilds/the-super-tiny-compiler&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the-super-tiny-compiler&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;h
      
    
    </summary>
    
      <category term="babel" scheme="http://sosout.com/categories/babel/"/>
    
    
      <category term="compiler" scheme="http://sosout.com/tags/compiler/"/>
    
  </entry>
  
  <entry>
    <title>redux-thunk 源码全方位剖析</title>
    <link href="http://sosout.com/2018/09/09/redux-thunk-source-analysis.html"/>
    <id>http://sosout.com/2018/09/09/redux-thunk-source-analysis.html</id>
    <published>2018-09-09T12:59:49.000Z</published>
    <updated>2018-09-10T11:10:37.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>redux 的核心概念很简单：将需要修改的 state 都储存在 store 里，发起一个 action 用来描述发生了什么，用 reducers 描述 action 如何改变 state tree，创建 store 的时候需要传入 reducer，真正能改变 store 中数据的是 API store.dispatch。<br>纯粹使用 redux 时，我们需要 dispatch 的是一个 action 对象。当我们使用 redux-thunk 后，我们 dispatch 的是一个 function，redux-thunk 中间件会自动调用这个 function，并且传递 dispatch 方法作为其第一个参数，于是我们就能在这个 function 内根据我们的请求状态：开始，请求中，请求成功／失败，dispatch 我们期望的任何 action 了，这也是为什么它能支持异步 dispatch action，自然的请求的逻辑就需要放到这里面调用了。换言之，redux-thunk 改写了 dispatch API，使其具备接受一个函数作为参数的能力，从而达到 middleware 的效果，即在 redux 的 dispatch action =&gt; reducer =&gt; store 这个流程中，在 action 被发起之后，到达 reducer 之前的扩展点，加入相关操作，比如发生请求、log信息等。一句话：redux-thunk 就是对 store.dispatch() 的增强。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>以动态收藏功能为例:<br><strong>纯粹使用 redux：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// action.js</span></span><br><span class="line"><span class="keyword">const</span> addFavor = <span class="function">(<span class="params">id</span>) =&gt;</span> (&#123;</span><br><span class="line">  type: <span class="string">'FAVOR'</span>,</span><br><span class="line">  id:id</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// component</span></span><br><span class="line">fetchFavor(&#123;<span class="attr">id</span>: id&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; dispatch(addFavor(id)) &#125;)</span><br></pre></td></tr></table></figure></p><p>可以看到，我们在请求以后的回调函数中 dispatch action 去同步 redux store 中的状态。</p><p><strong>使用 redux-thunk：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore, combineReducers, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> reducers <span class="keyword">from</span> <span class="string">'./reducers'</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = createStore(</span><br><span class="line">combineReducers(reducers),</span><br><span class="line">applyMiddleware(thunk)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br><span class="line"><span class="comment">// action.js</span></span><br><span class="line"><span class="keyword">const</span> addFavor = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">dispatch, getState</span>) </span>&#123;</span><br><span class="line">    reqFavor(&#123;<span class="attr">id</span>: id&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; </span><br><span class="line">      dispatch(&#123;</span><br><span class="line">        type: <span class="string">"FAVOR"</span>,</span><br><span class="line">        id:id</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// component</span></span><br><span class="line">dispatch(addFavor(id))</span><br></pre></td></tr></table></figure></p><p>改变以后，从功能层面上来说，两者并无差别，都可以满足业务场景需求。但除此之外我们可以发现:<br><strong>一：</strong>dispatch 接受的参数由一个 PlainObject 变为一个函数<br><strong>二：</strong>我们把请求的异步操作从 dispatch action 这个 redux 流程外塞到的流程里，这看起来将异步操作内聚到这个流程中，无论是从逻辑上理解（这很 middleware！）还是项目代码开发维护（区分异步与同步状态管理流程进行维护管理）上都是很大的改进<br><strong>三：</strong>如果项目中有多处需要实现收藏功能，我们可以节省很多冗余代码，不用到处在 dispatch 外层套上 reqLike(id).then。。。</p><p>直接将 thunk 中间件引入，作为 applyMiddleware 参数，然后传入 createStore 方法，就完成了 store.dispatch() 的功能增强，这样就可以进行一些异步的操作了。其中 applyMiddleware 是 Redux 的一个原生方法，将所有中间件组成一个数组，依次执行，中间件多了可以当做参数依次传进去。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">    reducers, </span><br><span class="line">    applyMiddleware(thunk, logger)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>了解了 redux-thunk 的基本概念以及应用后，我们一起看看源码加深下理解，源码十分精巧。在了解 redux-thunk 源码之前，我们很有必要先看看 redux 源码中 applyMiddleware 的部分：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> (...args) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line">    <span class="keyword">let</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class="line">          <span class="string">`Other middleware would not be applied to this dispatch.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们将 thunk 作为参数传入之后，直接返回了一个函数，这个函数作为 enhancer 传入 redux 源码中的 createStore 函数中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> preloadedState === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    enhancer = preloadedState</span><br><span class="line">    preloadedState = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the enhancer to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 redux 源码中的 createStore 函数中，enhancer 被执行，传入参数 createStore，又紧接着执行其返回的函数，传入 reducer 和 preloadedState。接下来，我们进入 applyMiddleware 和 thunk 的关键部分，上面 applyMiddleware 接受的最初的 (…middlewares) 参数其实就是 thunk，thunk 会被执行，并且传入参数 getState 和 dispatch：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入到 thunk 的参数</span></span><br><span class="line"><span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">  getState: store.getState,</span><br><span class="line">  dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在 map 中执行 thunk</span></span><br><span class="line">chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line"><span class="comment">//重新改写 dispatch</span></span><br><span class="line">dispatch = compose(...chain)(store.dispatch)</span><br></pre></td></tr></table></figure></p><p>那么上面的chain是什么呢，我们现在就可以去看 redux-thunk 的源码了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</span><br><span class="line">thunk.withExtraArgument = createThunkMiddleware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</span><br></pre></td></tr></table></figure></p><p>redux-thunk 中间件 export default 的就是 createThunkMiddleware() 过的 thunk，再看 createThunkMiddleware 这个函数，返回的是一个柯里化过的函数。我们将上述代码编译成ES5的代码看一看：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">&#123; dispatch, getState &#125;</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 这里返回的函数就是chain</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这里返回的函数就是改写的dispatch</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> next(action);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从源码我们可以看出，chain 就是以 next 作为形参的匿名函数，至于 compose 只是不断传递每个函数的返回值给下一个执行函数，然后依次去执行它所有传入的函数而已，它源码中的注释说的很清楚：<code>For example, compose(f, g, h) is identical to doing (...args) =&gt; f(g(h(...args)))</code>。<br>我们这里的 chain 只是一个函数而已，所以很简单，就是执行 chain，并且传入 store.dispatch 作为 next 就行。</p><p>接下来，进入最后一步，改写了 dispatch，最终变为:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// next为之前传入的store.dispatch,即改写前的dispatch</span></span><br><span class="line">  <span class="keyword">return</span> next(action);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>如果传入的参数是函数，则执行函数，否则还是跟之前一样 dispatch(PlainObject)。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>redux-thunk 实现了相关异步流程内聚到 redux 的流程中，实现 middleware 的功能，也便于项目的开发与维护，避免冗余代码。而实现的方式便是改写 redux 中的 dispatch API，使其可以除 PlainObject 外，接受一个函数作为参数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;redux 的核心概念很简单：将需要修改的 state 都储存在 store 里，发起一个 action 用来描述发生了什么，用 reduc
      
    
    </summary>
    
      <category term="redux" scheme="http://sosout.com/categories/redux/"/>
    
    
      <category term="middleware" scheme="http://sosout.com/tags/middleware/"/>
    
  </entry>
  
  <entry>
    <title>前端加密JS库--CryptoJS 使用指南</title>
    <link href="http://sosout.com/2018/09/05/cryptojs-tutorial.html"/>
    <id>http://sosout.com/2018/09/05/cryptojs-tutorial.html</id>
    <published>2018-09-05T14:07:39.000Z</published>
    <updated>2018-09-10T11:10:37.072Z</updated>
    
    <content type="html"><![CDATA[<p>有时候项目涉及到的敏感数据比较多，为了信息安全，我们常常需要对一些数据进行接口加密处理，如编码、将明文转化为暗文、加密比对、AES + BASE64 算法加密等。<br>接下来我们就分别说一下 CryptoJS 常用的一些方法。</p><p><a href="https://github.com/brix/crypto-js" target="_blank" rel="noopener">CryptoJS文档</a></p><h3 id="Base64-编码"><a href="#Base64-编码" class="headerlink" title="Base64 编码"></a>Base64 编码</h3><p><strong>为什么要编码？</strong></p><p>由于一些网络通讯协议的限制, 又或者是出于信息加密的目的, 我们就需要将原信息转换为base64编码,然后才能进行传输.例如，发送某些含有 ASCII 码表中0到31之间的控制字符的数据。</p><p><strong>window.btoa 对字符串进行 base64编码（注意不能编码中文）;</strong><br><strong>winodw.atob 对 base64字符串 进行解码（对于包含中文的 base64编码，不能正确解码）;</strong></p><p>通常的方法是通过 window.btoa() 方法对源数据进行编码, 然后接收方使用 window.atob() 方法对其进行解码, 从而得到原数据。但是这种方法存在的问题是：window.btoa() 不支持中文, window.atob() 转换含有中文的 base64编码 的时候中文部分会变为乱码。另一个存在的问题是解码github的readme数据的时候也是乱码。经过查找相关资料发现了 Base64的编码与解码转的最优方案:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_to_b64</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(str)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_to_utf8</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(<span class="built_in">window</span>.atob(str)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line">utf8_to_b64(<span class="string">'✓ à la mode'</span>); <span class="comment">// 4pyTIMOgIGxhIG1vZGU=</span></span><br><span class="line">b64_to_utf8(<span class="string">'4pyTIMOgIGxhIG1vZGU='</span>); <span class="comment">// "✓ à la mode"</span></span><br><span class="line"></span><br><span class="line">utf8_to_b64(<span class="string">'I \u2661 Unicode!'</span>); <span class="comment">// SSDimaEgVW5pY29kZSE=</span></span><br><span class="line">b64_to_utf8(<span class="string">'SSDimaEgVW5pY29kZSE='</span>); <span class="comment">// "I ♡ Unicode!"</span></span><br><span class="line"></span><br><span class="line">utf8_to_b64(<span class="string">'我爱中国'</span>); <span class="comment">// 5oiR54ix5Lit5Zu9</span></span><br><span class="line">b64_to_utf8(<span class="string">'SSDimaEgVW5pY29kZSE='</span>); <span class="comment">// "我爱中国"</span></span><br><span class="line"></span><br><span class="line">utf8_to_b64(<span class="number">123456</span>); <span class="comment">// MTIzNDU2</span></span><br><span class="line">b64_to_utf8(<span class="string">"MTIzNDU2"</span>); <span class="comment">// 123456</span></span><br></pre></td></tr></table></figure><h3 id="AES-加密"><a href="#AES-加密" class="headerlink" title="AES 加密"></a>AES 加密</h3><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install crypto-js</span><br></pre></td></tr></table></figure><p><strong>aes加密: crypto.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CryptoJS <span class="keyword">from</span> <span class="string">"crypto-js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = CryptoJS.enc.Utf8.parse(<span class="string">"1234567890000000"</span>); <span class="comment">//16位</span></span><br><span class="line"><span class="keyword">const</span> iv = CryptoJS.enc.Utf8.parse(<span class="string">"1234567890000000"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//aes加密</span></span><br><span class="line">  encrypt(word) &#123;</span><br><span class="line">    <span class="keyword">let</span> encrypted = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> word == <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> srcs = CryptoJS.enc.Utf8.parse(word);</span><br><span class="line">      encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;</span><br><span class="line">        iv: iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> word == <span class="string">"object"</span>) &#123;</span><br><span class="line">      <span class="comment">//对象格式的转成json字符串</span></span><br><span class="line">      <span class="keyword">const</span> data = <span class="built_in">JSON</span>.stringify(word);</span><br><span class="line">      <span class="keyword">const</span> srcs = CryptoJS.enc.Utf8.parse(data);</span><br><span class="line">      encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;</span><br><span class="line">        iv: iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encrypted.ciphertext.toString();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// aes解密</span></span><br><span class="line">  decrypt(word) &#123;</span><br><span class="line">    <span class="keyword">const</span> encryptedHexStr = CryptoJS.enc.Hex.parse(word);</span><br><span class="line">    <span class="keyword">const</span> srcs = CryptoJS.enc.Base64.stringify(encryptedHexStr);</span><br><span class="line">    <span class="keyword">const</span> decrypt = CryptoJS.AES.decrypt(srcs, key, &#123;</span><br><span class="line">      iv: iv,</span><br><span class="line">      mode: CryptoJS.mode.CBC,</span><br><span class="line">      padding: CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);</span><br><span class="line">    <span class="keyword">return</span> decryptedStr.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>使用</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto <span class="keyword">from</span> <span class="string">"@/utils/crypto"</span>;</span><br><span class="line"></span><br><span class="line">Crypto.encrypt(<span class="string">"✓ à la mode"</span>); <span class="comment">// b915bf40c4795227488da86978f55fce</span></span><br><span class="line">Crypto.decrypt(userPwd); <span class="comment">// "✓ à la mode"</span></span><br><span class="line"></span><br><span class="line">Crypto.encrypt(<span class="string">"✓ à la mode"</span>); <span class="comment">// 6317313288b32bf1909f165ec530d60a</span></span><br><span class="line">Crypto.decrypt(userPwd); <span class="comment">// "I ♡ Unicode!"</span></span><br><span class="line"></span><br><span class="line">Crypto.encrypt(<span class="string">"我爱中国"</span>); <span class="comment">// 1898a34273855f55255437aa22f87504</span></span><br><span class="line">Crypto.decrypt(userPwd); <span class="comment">// "我爱中国"</span></span><br><span class="line"></span><br><span class="line">Crypto.encrypt(<span class="string">"123456"</span>); <span class="comment">// dd7a6c4edc68e683b700a7a2846a2bc6</span></span><br><span class="line">Crypto.decrypt(userPwd); <span class="comment">// "123456"</span></span><br></pre></td></tr></table></figure></p><h3 id="前后端数据通信参数加密"><a href="#前后端数据通信参数加密" class="headerlink" title="前后端数据通信参数加密"></a>前后端数据通信参数加密</h3><p>加密代码实现:</p><p>项目中需要将所有传到后台的参数分5个步骤处理：</p><p>第一步：排序</p><p>第二步：将排序好的参数进行MD5加密作为接口的签名</p><p>第三步：将排序好的参数和接口签名拼接上进行AES加密</p><p>第四部：将AES加密后的密文Base64加密</p><p>第五步：将最终的密文encodeURIComponent；</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encryption</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> strs=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> data)&#123;</span><br><span class="line">        strs.push(i+<span class="string">'='</span>+data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    strs.sort();  <span class="comment">// 数组排序</span></span><br><span class="line">    strs=strs.join(<span class="string">'&amp;'</span>); <span class="comment">// 数组变字符串</span></span><br><span class="line">    <span class="keyword">let</span> endData=strs+<span class="string">'&amp;sign='</span>+CryptoJS.MD5(strs+<span class="string">'ADfj3kcadc2349akvm1CPFFCD84f'</span>).toString(); <span class="comment">// MD5加密</span></span><br><span class="line">    <span class="keyword">let</span> key = CryptoJS.enc.Utf8.parse(<span class="string">"0880076B18D7EE81"</span>); <span class="comment">// 加密秘钥</span></span><br><span class="line">    <span class="keyword">let</span> iv = CryptoJS.enc.Utf8.parse(<span class="string">"CB3EC842D7C69578"</span>);  <span class="comment">//  矢量</span></span><br><span class="line">    <span class="keyword">let</span> encryptResult = CryptoJS.AES.encrypt(endData,key, &#123;   <span class="comment">//  AES加密</span></span><br><span class="line">        iv: iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7  <span class="comment">// 后台用的是pad.Pkcs5,前台对应为Pkcs7</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(CryptoJS.enc.Base64.stringify(encryptResult.ciphertext));  <span class="comment">// Base64加密encode;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密最终的密文拼接在接口地址后面，请求接口。后台返回的数据也是密文；解密方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decryption</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key = CryptoJS.enc.Utf8.parse(<span class="string">"0880076B18D7EE81"</span>);  <span class="comment">// 加密秘钥</span></span><br><span class="line">    <span class="keyword">let</span> iv = CryptoJS.enc.Utf8.parse(<span class="string">"CB3EC842D7C69578"</span>);   <span class="comment">//  矢量</span></span><br><span class="line">    <span class="keyword">let</span> baseResult=CryptoJS.enc.Base64.parse(data);   <span class="comment">// Base64解密</span></span><br><span class="line">    <span class="keyword">let</span> ciphertext=CryptoJS.enc.Base64.stringify(baseResult);     <span class="comment">// Base64解密</span></span><br><span class="line">    <span class="keyword">let</span> decryptResult = CryptoJS.AES.decrypt(ciphertext,key, &#123;    <span class="comment">//  AES解密</span></span><br><span class="line">        iv: iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> resData=decryptResult.toString(CryptoJS.enc.Utf8).toString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(resData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：因为后台返回的数据是json格式；所以做种return的时候使用JSON.parse();如果解密的目标为字符串，比如说需要解密的是一个加密的token值。那就要做相应的改动：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decryption</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key = CryptoJS.enc.Utf8.parse(<span class="string">"0880076B18D7EE81"</span>);  <span class="comment">// 加密秘钥</span></span><br><span class="line">    <span class="keyword">let</span> iv = CryptoJS.enc.Utf8.parse(<span class="string">"CB3EC842D7C69578"</span>);   <span class="comment">//  矢量</span></span><br><span class="line">    <span class="keyword">let</span> baseResult=CryptoJS.enc.Base64.parse(data);   <span class="comment">// Base64解密</span></span><br><span class="line">    <span class="keyword">let</span> ciphertext=CryptoJS.enc.Base64.stringify(baseResult);     <span class="comment">// Base64解密</span></span><br><span class="line">    <span class="keyword">let</span> decryptResult = CryptoJS.AES.decrypt(ciphertext,key, &#123;    <span class="comment">//  AES解密</span></span><br><span class="line">        iv: iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> CryptoJS.enc.Utf8.stringify(decryptResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候项目涉及到的敏感数据比较多，为了信息安全，我们常常需要对一些数据进行接口加密处理，如编码、将明文转化为暗文、加密比对、AES + BASE64 算法加密等。&lt;br&gt;接下来我们就分别说一下 CryptoJS 常用的一些方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="javascript" scheme="http://sosout.com/categories/javascript/"/>
    
    
      <category term="cryptojs" scheme="http://sosout.com/tags/cryptojs/"/>
    
  </entry>
  
  <entry>
    <title>React 背后的工具体系</title>
    <link href="http://sosout.com/2018/08/30/react-source-tools.html"/>
    <id>http://sosout.com/2018/08/30/react-source-tools.html</id>
    <published>2018-08-30T12:10:11.000Z</published>
    <updated>2018-09-10T11:10:37.075Z</updated>
    
    <content type="html"><![CDATA[<p>北京时间2017年9月27日，Facebook 官方发布了 React v16.0。相较于之前的 v15.x 版本，v16 发生了很大的变化。</p><h3 id="React-v16-0-API-变化"><a href="#React-v16-0-API-变化" class="headerlink" title="React v16.0 API 变化"></a>React v16.0 API 变化</h3><p><strong>1.render 函数支持返回数组和字符串：</strong>我们终于不需要再将多个同级元素包裹在一个冗余的 DOM 元素中了，但每个同级元素还是需要唯一的 key 值以便 React 进行更新，而且在未来版本，React 可能还会提供一个特殊的 jsx 片段来支持无 key 值的 DOM 元素。</p><p><strong>2.更好的异常处理：</strong>在之前版本的 React 中，某个组件在 Render 阶段的运行错误可能会 break 掉整个应用，而且抛出的异常信息含义也非常模糊，难以确定错误的发生位置。在 v16.0 中，如果某个组件在执行 render 或其他生命周期函数时出错，整个组件将被从根节点上移除掉，方便开发者快速定位异常组件。在定位到异常组件后，开发者可以为该组件添加 componentDidCatch 方法，并在这个方法中为组件定义一个备用视图用于渲染异常状态下的组件。当然，在这个新的生命周期函数中，开发者也可以获得更加有帮助的错误信息进行 debug。这被称作组件的错误边界，大家可以理解为组件层面的 try catch 声明。</p><p><strong>3.新的组件类型 portals：</strong>ReactDOM.createPortal(child, container) 可以将子组件直接渲染到当前容器组件 DOM 结构之外的任意 DOM 节点中，这将使得开发对话框，浮层，提示信息等需要打破当前 DOM 结构的组件更为方便。</p><p><strong>4.更好的服务端渲染：</strong>与之前 renderToString 方法不同，新版本提供的 renderToNodeStream 将返回 Readable，可以持续产生字节流（a stream of bytes）并在下一部分的 document 生成之前将之前已生成的部分 document 传回给客户端。通常来讲，新的服务端渲染将比老的快3倍以上。在 document 到达客户端之后，新版本的 react 也将不会再去将客户端的初次渲染结果与服务端的渲染结果进行比较，而是尽可能地去重用相同的 DOM 元素。</p><p><strong>5.支持自定义 DOM 元素：</strong>新版本将不会再抛出不支持的 DOM 元素错误，而是将所有开发者自定义的 DOM 元素都传递到相应的 DOM 节点上。</p><p><strong>6.更小的打包大小：</strong>总体体积减少 30%</p><p>react is 5.3 kb (2.2 kb gzipped), 老版本 20.7 kb (6.9 kb gzipped)<br>react-dom is 103.7 kb (32.6 kb gzipped), 老版本 141 kb (42.9 kb gzipped)<br>react + react-dom is 109 kb (34.8 kb gzipped), 老版本 161.7 kb (49.8 kb gzipped)</p><p><strong>7.MIT 许可：</strong>除了最新的 16.0 版本外，Facebook 还发布了使用 MIT 许可的 15.6.2 版本，以方便无法立刻升级的使用者。</p><p><strong>8.新的核心架构 Fiber：</strong>React v16.0 使用了 Fiber 作为底层架构。正是得益于 Fiber，返回数组和字符串及错误边界等功能才变得可能。Fiber 相较于之前最大的不同是它支持<strong>异步渲染（async rendering），</strong>这意味着 React 可以在更细的粒度上控制组件的绘制过程，从最终的用户体验来讲，用户可以体验到更流畅交互及动画体验。而因为异步渲染涉及到 React 的方方面面甚至未来，在 16.0 版本中 React 还暂时没有启用，并将在未来几个月陆续推出。</p><p>其实，以上种种变化都离不开背后构建工具的变化。</p><h3 id="React-构建工具"><a href="#React-构建工具" class="headerlink" title="React 构建工具"></a>React 构建工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开发工具</span></span><br><span class="line">ES Module, Flow, ESLint, Prettier, Yarn workspace, HUBOT(GitHub Bot), [x]Haste, [x]CommonJS Module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建工具</span></span><br><span class="line">Rollup, Closure Compiler, Error Code System, React DevTools, [x]Gulp/Grunt+Browserify</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试工具</span></span><br><span class="line">Jest, Prettier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布工具</span></span><br><span class="line">npm</span><br></pre></td></tr></table></figure><p>以上前面带<code>[x]</code>的表示之前在用，React v16.0 已不再使用。简单说一下上面的工具都有什么作用？</p><p>开发时，按照 ES Module 机制编写源码，用 flow 进行类型检查、ESLint 语法规则和代码风格的检查、Prettier 来统一代码风格，借助 Yarn workspace 处理模块依赖，HUBOT(GitHub Bot) 检查PR；</p><p>开发过程中，用 Jest 单元测试，Prettier 来统一代码风格</p><p>开发完成，用 Rollup + Closure Compiler 构建，利用 Error Code System 机制实现生产环境错误追踪，React DevTools 侧面辅助 bundle 检查；</p><p>最后通过 npm 发布新 package。</p><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h4 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h4><p>React 16 之前的版本都用 CommonJS Module 定义，例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">'./lib/React'</span>);</span><br></pre></td></tr></table></figure></p><p>React 16 为什么选择使用 ES Module，有以下几个原因：</p><p><strong>1.编译期发现模块导入/导出问题：</strong>我们都知道使用 CommonJS Module 的 require 一个未定义的方法时，不调用我们是发现不了错误的。而 ES Module 由于静态的模块机制，import 与 export 必须按名匹配，否则编译构建就会出错。 </p><p><strong>2.更小的打包大小：</strong> 众所周知 module.exports 是对象级别导出，而ES Module 支持更细粒度的原子级导出，我们把这个特性叫做 tree-shaking，这个特性可以帮助你将无用代码（即没有使用的代码）从最终的目标文件中过滤掉。</p><p>这里只是把源码切换到了 ES Module，单元测试用例并未切换，主要原因是 CommonJS Module 对 Jest 的一些特性（resetModules）更友好，即便切换到 ES Module，在需要模块状态隔离的场景，仍然要用 require，所以切换意义不是很大。</p><p>还有 Haste，则是 React 团队自定义的模块处理工具，用来解决长相对路径的问题，例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref: react-15.5.4</span></span><br><span class="line"><span class="keyword">var</span> ReactCurrentOwner = <span class="built_in">require</span>(<span class="string">'ReactCurrentOwner'</span>);</span><br><span class="line"><span class="keyword">var</span> warning = <span class="built_in">require</span>(<span class="string">'warning'</span>);</span><br><span class="line"><span class="keyword">var</span> canDefineProperty = <span class="built_in">require</span>(<span class="string">'canDefineProperty'</span>);</span><br><span class="line"><span class="keyword">var</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty;</span><br><span class="line"><span class="keyword">var</span> REACT_ELEMENT_TYPE = <span class="built_in">require</span>(<span class="string">'ReactElementSymbol'</span>);</span><br></pre></td></tr></table></figure></p><p>Haste 模块机制下模块引用不需要给出明确的相对路径，而是通过项目级唯一的模块名来自动查找，例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @providesModule ReactClass</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用</span></span><br><span class="line"><span class="keyword">var</span> ReactClass = <span class="built_in">require</span>(<span class="string">'ReactClass'</span>);</span><br></pre></td></tr></table></figure></p><p>从表面上解决了长路径引用的问题（并没有解决项目结构深层嵌套的根本问题），使用非标准模块机制有几个典型的坏处：</p><p><strong>1.与标准不和，接入标准生态中的工具时会面临适配问题</strong></p><p><strong>2.源码难读，不容易弄明白模块依赖关系</strong></p><p>React 16 去掉了大部分自定义的模块机制（ReactNative 里还有一小部分），采用 Node 标准的相对路径引用，长路径的问题通过重构项目结构来彻底解决，采用扁平化目录结构（同 package 下最深2级引用，跨 package 的经 Yarn 处理以顶层绝对路径引用）</p><h4 id="Flow-ESLint"><a href="#Flow-ESLint" class="headerlink" title="Flow + ESLint"></a>Flow + ESLint</h4><p>Flow 是 facebook 出品的 JavaScript 静态类型检查工具，所谓类型检查，就是在编译期尽早发现（由类型错误引起的）bug，又不影响代码运行（不需要运行时动态检查类型），使编写 JavaScript 具有和编写 Java 等强类型语言相近的体验。我们看一下 React 使用实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type ReactElement = &#123;</span><br><span class="line">  $$<span class="keyword">typeof</span>: any,</span><br><span class="line">  type: any,</span><br><span class="line">  key: any,</span><br><span class="line">  ref: any,</span><br><span class="line">  props: any,</span><br><span class="line">  _owner: any, <span class="comment">// ReactInstance or ReactFiber</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// __DEV__</span></span><br><span class="line">  _store: &#123;</span><br><span class="line">    validated: boolean,</span><br><span class="line">  &#125;,</span><br><span class="line">  _self: React$Element&lt;any&gt;,</span><br><span class="line">  _shadowChildren: any,</span><br><span class="line">  _source: Source,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>除了静态类型声明及检查外，Flow 最大的特点是<strong>对React组件及JSX的深度支持</strong>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type Props = &#123;</span><br><span class="line">  foo: number,</span><br><span class="line">&#125;;</span><br><span class="line">type State = &#123;</span><br><span class="line">  bar: number,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">Props</span>, <span class="title">State</span>&gt; </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    bar: <span class="number">42</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.foo + <span class="keyword">this</span>.state.bar;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外还有导出类型检查的 Flow “魔法”，用来校验 mock 模块的导出类型是否与源模块一致：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type Check&lt;_X, <span class="attr">Y</span>: _X, <span class="attr">X</span>: Y = _X&gt; = <span class="literal">null</span>;</span><br><span class="line">(<span class="literal">null</span>: Check&lt;FeatureFlagsShimType, FeatureFlagsType&gt;);</span><br></pre></td></tr></table></figure></p><p>Eslint 解决了代码格式检查的问题，同时，一些有用的提示能让我们发现 bug 和无用代码（如 no-unused-vars, no-extra-bind, no-implicit-globals），例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rules: &#123;</span><br><span class="line">  <span class="string">'no-unused-expressions'</span>: ERROR,</span><br><span class="line">  <span class="string">'no-unused-vars'</span>: [ERROR, &#123;<span class="attr">args</span>: <span class="string">'none'</span>&#125;],</span><br><span class="line">  <span class="comment">// React &amp; JSX</span></span><br><span class="line">  <span class="comment">// Our transforms set this automatically</span></span><br><span class="line">  <span class="string">'react/jsx-boolean-value'</span>: [ERROR, <span class="string">'always'</span>],</span><br><span class="line">  <span class="string">'react/jsx-no-undef'</span>: ERROR,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h4><p>Prettier 可以制定想要的代码风格，然后通过脚本或编辑器插件来一键格式化/美化代码，我发现使用 Prettier 有很多益处：</p><p><strong>1.代码格式化成统一风格</strong></p><p><strong>2.提交之前对有改动的部分进行格式化，也可以保存文件的时候自动统一风格。</strong></p><p><strong>3.配合持续集成，保证PR代码风格完全一致（否则build失败，并输出风格存在差异的部分）</strong></p><p><strong>4.对构建结果进行格式化，一方面提升dev bundle可读性，另外还有助于发现prod bundle中的冗余代码</strong></p><p><strong>5.开源代码开发者不需要去学习项目的代码风格。</strong></p><h4 id="Yarn-workspace"><a href="#Yarn-workspace" class="headerlink" title="Yarn workspace"></a>Yarn workspace</h4><p>Yarn 的 workspace 特性用来解决 monorepo 的 package 依赖（作用类似于 lerna bootstrap），通过在 node_modules 下建立软链接“骗过”Node模块机制。</p><p>通过 package.json/workspaces 配置 Yarn workspaces：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // ...</span><br><span class="line">    "workspaces": [</span><br><span class="line">        <span class="string">"packages/*"</span></span><br><span class="line">    ],</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Yarn 的实际处理与 Lerna 类似，都通过软链接来实现，只是在包管理器这一层提供 monorepo package 支持更合理一些，具体原因见<a href="https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/#lerna" target="_blank" rel="noopener">Workspaces in Yarn | Yarn Blog</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;enableUserTimingAPI&#125; <span class="keyword">from</span> <span class="string">'shared/ReactFeatureFlags'</span>;</span><br><span class="line"><span class="keyword">import</span> getComponentName <span class="keyword">from</span> <span class="string">'shared/getComponentName'</span>;</span><br><span class="line"><span class="keyword">import</span> invariant <span class="keyword">from</span> <span class="string">'fbjs/lib/invariant'</span>;</span><br><span class="line"><span class="keyword">import</span> warning <span class="keyword">from</span> <span class="string">'fbjs/lib/warning'</span>;</span><br></pre></td></tr></table></figure><p>另外，Yarn 与 Lerna 可以无缝结合，通过 useWorkspaces 选项把依赖处理部分交由 Yarn 来做，详细见<a href="https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/#integrating-with-lerna" target="_blank" rel="noopener">Integrating with Lerna</a></p><h4 id="HUBOT"><a href="#HUBOT" class="headerlink" title="HUBOT"></a>HUBOT</h4><p><a href="https://hubot.github.com/" target="_blank" rel="noopener">HUBOT</a> 是指 Github 机器人，通常用于：</p><p><strong>1. 持续集成、PR 触发构建/检查</strong><br><strong>2. 管理 Issue，关掉不活跃的讨论帖</strong></p><p>主要围绕 PR 与 Issue 做一些自动化的事情，比如 React 团队计划（目前还没这么做）机器人回复 PR 对 bundle size 的影响，以此督促持续优化 bundle size。</p><p>目前每次构建把 bundle size 变化输出到文件，并交由 Git 追踪变化（提交上去），例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"bundleSizes"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"filename"</span>: <span class="string">"react.development.js"</span>,</span><br><span class="line">      <span class="attr">"bundleType"</span>: <span class="string">"UMD_DEV"</span>,</span><br><span class="line">      <span class="attr">"packageName"</span>: <span class="string">"react"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">59086</span>,</span><br><span class="line">      <span class="attr">"gzip"</span>: <span class="number">16296</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"filename"</span>: <span class="string">"react.production.min.js"</span>,</span><br><span class="line">      <span class="attr">"bundleType"</span>: <span class="string">"UMD_PROD"</span>,</span><br><span class="line">      <span class="attr">"packageName"</span>: <span class="string">"react"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">7217</span>,</span><br><span class="line">      <span class="attr">"gzip"</span>: <span class="number">3050</span></span><br><span class="line">    &#125;,</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点可想而知，这个json文件经常冲突，要么需要浪费精力 merge 冲突，要么就懒得提交这个自动生成的麻烦文件，导致版本滞后，所以计划通过 GitHub Bot 把这个麻烦抽离出去。</p><h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><h4 id="bundle形式"><a href="#bundle形式" class="headerlink" title="bundle形式"></a>bundle形式</h4><p>React16 之前提供了两种 bundle 形式：</p><p><strong>第一种：</strong>UMD 单文件，用作外部依赖。</p><p><strong>第二种：</strong>CJS 散文件，用于支持自行构建 bundle（把 React 作为源码依赖）。</p><p>存在一些问题：</p><p><strong>一：</strong>自行构建的版本不一致：不同的 build 环境/配置构建出的 bundle 都不一样。</p><p><strong>二：</strong>bundle 性能有优化空间：用打包 App 的方式构建类库不太合适，性能上有提升余地</p><p><strong>三：</strong>不利于实验性优化尝试：无法对散文件模块应用打包、压缩等优化手段</p><p>React 16 调整了 bundle 形式：</p><p><strong>一：</strong>不再提供 CJS 散文件，从 npm 拿到的就是构建好的，统一优化过的 bundle。</p><p><strong>二：</strong>提供 UMD 单文件与 CJS 单文件，分别用于 Web 环境与 Node 环境（SSR）。</p><p>以不可再分的类库姿态，把优化环节都收进来，摆脱 bundle 形式带来的限制。</p><h4 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h4><p>之前的构建系统是基于 Gulp/Grunt+Browserify 手搓的一套工具，后来在扩展方面受限于工具，例如：</p><p>Node 环境下性能不好：频繁的 process.env.NODE_ENV 访问拖慢了 SSR 性能，但又没办法从类库角度解决，因为 Uglify 依靠这个去除无用代码，所以 React SSR 性能最佳实践一般都有一条“重新打包 React，在构建时去掉 process.env.NODE_ENV”（当然，React 16 不需要再这样做了，原因见上面提到的bundle形式变化）</p><p>丢弃了过于复杂（overly-complicated）的自定义构建工具，改用更合适的 Rollup：</p><blockquote><p>It solves one problem well: how to combine multiple modules into a flat file with minimal junk code in between.</p></blockquote><p>无论 Haste -&gt; ES Module 还是 Gulp/Grunt+Browserify -&gt; Rollup 的切换都是从非标准的定制化方案切换到标准的开放的方案，应该在“手搓”方面吸取教训，为什么业界规范的东西在我们的场景不适用，非要自己造吗？</p><h4 id="mock-module"><a href="#mock-module" class="headerlink" title="mock module"></a>mock module</h4><p>构建时可能面临动态依赖的场景：不同的 bundle 依赖功能相似但实现存在差异的 module，例如 ReactNative 的错误提醒机制是显示个红框，而 Web 环境就是输出到 Console。</p><p>一般解法有2种：</p><p><strong>第一种：</strong>运行时动态依赖（注入）：把两份都放进bundle，运行时根据配置或环境选择。</p><p><strong>第二种：</strong>构建时处理依赖：多构建几份，不同的bundle含有各自需要的依赖模块。</p><p>显然构建时处理更干净一些，即 mock module，开发中不用关心这种差异，构建时根据环境自动选择具体依赖，通过手写简单的 Rollup 插件来实现：<a href="https://github.com/facebook/react/blob/master/scripts/rollup/forks.js" target="_blank" rel="noopener">动态依赖配置</a> + <a href="https://github.com/facebook/react/blob/master/scripts/rollup/plugins/use-forks-plugin.js" target="_blank" rel="noopener">构建时依赖替换</a>。</p><h4 id="Closure-Compiler"><a href="#Closure-Compiler" class="headerlink" title="Closure Compiler"></a>Closure Compiler</h4><p><a href="https://github.com/google/closure-compiler" target="_blank" rel="noopener">google/closure-compiler</a>是个非常强大的 minifier，有3种优化模式（compilation_level）：</p><p><strong>第一种：</strong>WHITESPACE_ONLY：去除注释，多余的标点符号和空白字符，逻辑功能上与源码完全等价。</p><p><strong>第二种：</strong>SIMPLE_OPTIMIZATIONS：默认模式，在 WHITESPACE_ONLY 的基础上进一步缩短变量名（局部变量和函数形参），逻辑功能基本等价，特殊情况（如 eval(‘localVar’)按名访问局部变量和解析 fn.toString() ）除外</p><p><strong>第三种：</strong>ADVANCED_OPTIMIZATIONS：在 SIMPLE_OPTIMIZATIONS 的基础上进行更强力的重命名（全局变量名，函数名和属性），去除无用代码（走不到的，用不着的），内联方法调用和常量（划算的话，把函数调用换成函数体内容，常量换成其值）</p><p>关于compilation_level的详细信息见<a href="https://developers.google.com/closure/compiler/docs/compilation_levels" target="_blank" rel="noopener">Closure Compiler Compilation Levels</a></p><p>ADVANCED 模式过于强大：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'Hello, '</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">hello(<span class="string">'New user'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">alert(<span class="string">"Hello, New user"</span>);</span><br></pre></td></tr></table></figure></p><p>也可以在<a href="https://closure-compiler.appspot.com/home" target="_blank" rel="noopener">Closure Compiler Service</a>在线试玩。</p><p>迁移切换有一定风险，因此 React 用的还是 SIMPLE 模式，但后续可能有计划开启 ADVANCED 模式，充分利用 Closure Compiler 优化 bundle size。</p><h4 id="Error-Code-System"><a href="#Error-Code-System" class="headerlink" title="Error Code System"></a>Error Code System</h4><blockquote><p>In order to make debugging in production easier, we’re introducing an Error Code System in 15.2.0. We developed a gulp script that collects all of our invariant error messages and folds them to a JSON file, and at build-time Babel uses the JSON to rewrite our invariant calls in production to reference the corresponding error IDs.</p></blockquote><p>简言之，在 prod bundle 中把详细的报错信息替换成对应错误码，生产环境捕获到运行时错误就把错误码与上下文信息抛出来，再丢给错误码转换服务还原出完整错误信息。这样既保证了 prod bundle 尽量干净，还保留了与开发环境一样的详细报错能力。</p><p>例如生产环境下的非法 React Element 报错：</p><blockquote><p>Minified React error #109; visit <a href="https://reactjs.org/docs/error-decoder.html?invariant=109&amp;args[]=Foo" target="_blank" rel="noopener">https://reactjs.org/docs/error-decoder.html?invariant=109&amp;args[]=Foo</a> for the full message or use the non-minified dev environment for full errors and additional helpful warnings.</p></blockquote><p>很有意思的技巧，确实在提升开发体验上花了不少心思。</p><h4 id="envification"><a href="#envification" class="headerlink" title="envification"></a>envification</h4><p>所谓 envification 就是分环境 build，例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref: react-16.2.0/build/packages/react/index.js</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">'./cjs/react.production.min.js'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">'./cjs/react.development.js'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>常用手段，构建时把 process.env.NODE_ENV 替换成目标环境对应的字符串常量，在后续构建过程中（打包工具/压缩工具）会把多余代码剔除掉。</p><p>除了 package 入口文件外，还在里面做了同样的判断作为双保险：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref: react-16.2.0/build/packages/react/cjs/react.development.js</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">"production"</span>) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = react;</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此外，还担心开发者误用 dev bundle 上线，所以在 React DevTools 也加了一点提醒：</p><blockquote><p>This page is using the development build of React.</p></blockquote><h4 id="DCE-check"><a href="#DCE-check" class="headerlink" title="DCE check"></a>DCE check</h4><p>DCE(dead code eliminated) check 是指检查无用代码是否被正常去除。</p><p>考虑了一种特殊情况：process.env.NODE_ENV 如果是在运行时设置的话也不合理（可能存在另一环境的多余代码），所以还通过 React DevTools 做了 bundle 环境检查：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref: react-16.2.0/packages/react-dom/npm/index.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkDCE</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'^_^'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">  checkDCE();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DevTools 即__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE声明</span></span><br><span class="line">checkDCE: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> toString = <span class="built_in">Function</span>.prototype.toString;</span><br><span class="line">    <span class="keyword">var</span> code = toString.call(fn);</span><br><span class="line">    <span class="keyword">if</span> (code.indexOf(<span class="string">'^_^'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      hasDetectedBadDCE = <span class="literal">true</span>;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">          <span class="string">'React is running in production mode, but dead code '</span> +</span><br><span class="line">            <span class="string">'elimination has not been applied. Read how to correctly '</span> +</span><br><span class="line">            <span class="string">'configure React for production: '</span> +</span><br><span class="line">            <span class="string">'https://fb.me/react-perf-use-the-production-build'</span></span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理类似于 Redux 的 minified 检测，先声明一个含有 dev 环境判断的方法，在判断中包含一个标识字符串，然后运行时（通过 DevTools ）检查 fn.toString() 源码，如果含有该标识字符串就说明 DCE 失败（无用代码没在 build 过程中去除），异步 throw 出来。</p><p>关于 DCE check 的详细信息，可以参考<a href="https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html#detecting-misconfigured-dead-code-elimination" target="_blank" rel="noopener">Detecting Misconfigured Dead Code Elimination</a></p><h3 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h3><h4 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h4><p><a href="https://jestjs.io/" target="_blank" rel="noopener">Jest</a> 是由 Facebook 发布的开源的、基于<a href="https://jasmine.github.io/" target="_blank" rel="noopener">Jasmine</a>的 JavaScript 单元测试框架。</p><p><strong>为什么选择Jest？</strong></p><p><strong>第一点：</strong>Jest 可以利用其特有的快照测试功能，通过比对 UI 代码生成的快照文件，实现对 React 等常见框架的自动测试。此外， Jest 的测试用例是并行执行的，而且只执行发生改变的文件所对应的测试，提升了测试速度。</p><p><strong>第二点：</strong>安装配置简单，非常容易上手，几乎是零配置的，通过 npm 命令安装就可以直接运行了。</p><p><strong>第三点：</strong>Jest 内置了测试覆盖率工具 <a href="https://github.com/gotwarlost/istanbul" target="_blank" rel="noopener">istanbul</a>，可以通过命令开启或者在 package.json 文件进行更详细的配置。运行 istanbul 除了会再终端展示测试覆盖率情况，还会在项目下生产一个 coverage 目录，内附一个测试覆盖率的报告，让我们可以清晰看到分支的代码的测试情况。</p><p><strong>第四点：</strong>集成了断言库，不需要再引入第三方的断言库，并且非常完美的支持 React 组件化测试。</p><p>Snapshot Testing 与 UI 自动化测试的一般做法类似，对正确结果截屏作为基准（这个基准需要持续更新，所以快照文件一般随源码提交上去），后续每次改动后与之前的截图做像素级对比，存在差异则说明有问题。</p><p>另外，提到 React App 测试，还有一个更狠的：<a href="http://airbnb.io/enzyme/" target="_blank" rel="noopener">Enzyme</a>，可以采用Jest + Enzyme对React组件进行深度测试，更多信息请查看<a href="https://www.codementor.io/vijayst/unit-testing-react-components-jest-or-enzyme-du1087lh8" target="_blank" rel="noopener">Unit Testing React Components: Jest or Enzyme</a>?</p><p>关于前端UI自动化测试的一般方法，可参考<a href="https://www.zhihu.com/question/29922082/answer/46141819" target="_blank" rel="noopener">如何进行前端自动化测试？ – 张云龙的回答 – 知乎</a>，当然也可以在<a href="https://repl.it/@amasad/try-jest" target="_blank" rel="noopener">repl.it – try-jest by @amasad在线试玩</a>。</p><h4 id="preventing-Infinite-Loops"><a href="#preventing-Infinite-Loops" class="headerlink" title="preventing Infinite Loops"></a>preventing Infinite Loops</h4><p>即死循环检查，Facebook 团队不希望测试过程被死循环阻塞（React 16 递归改循环之后有很多while (true)，他们不太放心）。处理方式与死递归检查类似：限制最大深度（TTL）。通过 Babel 插件来做，在测试环境构建时注入检查：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref: https://github.com/facebook/react/blob/master/scripts/jest/preprocessor.js#L38</span></span><br><span class="line"><span class="built_in">require</span>.resolve(<span class="string">'../babel/transform-prevent-infinite-loops'</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">// ref: https://github.com/facebook/react/blob/master/scripts/babel/transform-prevent-infinite-loops.js#L37</span></span><br><span class="line"><span class="string">'WhileStatement|ForStatement|DoWhileStatement'</span>: <span class="function">(<span class="params">path, file</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> guard = buildGuard(&#123;</span><br><span class="line">    ITERATOR: iterator,</span><br><span class="line">    MAX_ITERATIONS: t.numericLiteral(MAX_ITERATIONS),</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (!path.get(<span class="string">'body'</span>).isBlockStatement()) &#123;</span><br><span class="line">    <span class="keyword">const</span> statement = path.get(<span class="string">'body'</span>).node;</span><br><span class="line">    path.get(<span class="string">'body'</span>).replaceWith(t.blockStatement([guard, statement]));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    path.get(<span class="string">'body'</span>).unshiftContainer(<span class="string">'body'</span>, guard);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用来防护的 buildGuard 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buildGuard = template(<span class="string">`</span></span><br><span class="line"><span class="string">  if (ITERATOR++ &gt; MAX_ITERATIONS) &#123;</span></span><br><span class="line"><span class="string">    global.infiniteLoopError = new RangeError(</span></span><br><span class="line"><span class="string">      'Potential infinite loop: exceeded ' +</span></span><br><span class="line"><span class="string">      MAX_ITERATIONS +</span></span><br><span class="line"><span class="string">      ' iterations.'</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">    throw global.infiniteLoopError;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure><p>注意这里使用了一个全局错误变量 global.infiniteLoopError，用来中断后续测试流程：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref: https://github.com/facebook/react/blob/master/scripts/jest/setupTests.js#L56</span></span><br><span class="line"> env.afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> error = global.infiniteLoopError;</span><br><span class="line">  global.infiniteLoopError = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在每个 case 结束都看一眼是否发生死循环，防止 guard 中 throw 的错误被外层 catch 住后，测试流程仍然正常进行。</p><h3 id="发布工具"><a href="#发布工具" class="headerlink" title="发布工具"></a>发布工具</h3><h4 id="npm-publish"><a href="#npm-publish" class="headerlink" title="npm publish"></a>npm publish</h4><p>为了规范/简化发布流程，Facebook 团队做了以下几件事情：</p><p><strong>1.采用 master + feature flag 的分支策略</strong><br><strong>2.统一的工具化发布流程</strong></p><p>之前采用 stable 分支策略，发版时需要手动<a href="https://git-scm.com/docs/git-cherry-pick" target="_blank" rel="noopener">cherry-pick</a>，发个版要花很长时间。后来调整为直接从 master 发布，对于不想要的 breaking change，通过 feature flag 在构建时去掉，免去了手动 cherry-pick 的繁琐。</p><p>统一了工具发布流程，自动的按顺序自动执行，人工的就提示保存退出，人工处理完成后恢复之前的进度继续向下执行，大致经过以下流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动</span></span><br><span class="line">$ npm run <span class="built_in">test</span></span><br><span class="line">$ npm run build</span><br><span class="line"><span class="comment"># 人工</span></span><br><span class="line">changelog <span class="comment"># 更新日志</span></span><br><span class="line">smoke <span class="built_in">test</span> <span class="comment"># 冒烟测试</span></span><br><span class="line"><span class="comment"># 自动</span></span><br><span class="line">$ git commit <span class="comment"># 提交更新日志</span></span><br><span class="line">$ npm publish <span class="comment"># 发布新包</span></span><br><span class="line"><span class="comment"># 人工</span></span><br><span class="line">GitHub release <span class="comment"># Github 发布</span></span><br><span class="line">update site version <span class="comment"># 更新版本</span></span><br><span class="line"><span class="built_in">test</span> new release <span class="comment"># 测试新版</span></span><br><span class="line">notify involved team <span class="comment"># 发布通知</span></span><br></pre></td></tr></table></figure><p>这样通过工具化可以减少很多人为失误，保证统一的发布流程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;北京时间2017年9月27日，Facebook 官方发布了 React v16.0。相较于之前的 v15.x 版本，v16 发生了很大的变化。&lt;/p&gt;
&lt;h3 id=&quot;React-v16-0-API-变化&quot;&gt;&lt;a href=&quot;#React-v16-0-API-变化&quot; cla
      
    
    </summary>
    
      <category term="react" scheme="http://sosout.com/categories/react/"/>
    
    
      <category term="react" scheme="http://sosout.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>由 let 和 for 引起的血案</title>
    <link href="http://sosout.com/2018/08/16/let-for-together-used.html"/>
    <id>http://sosout.com/2018/08/16/let-for-together-used.html</id>
    <published>2018-08-16T12:17:19.000Z</published>
    <updated>2018-08-25T10:23:47.492Z</updated>
    
    <content type="html"><![CDATA[<p>这是一道出自 HTTP 203 的 JS 题目。HTTP 203 是 Youtube 上的一个栏目，主要讲一些有趣的知识。</p><p>原题目是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(</span><br><span class="line">  <span class="keyword">let</span> i = <span class="function">(<span class="params">setTimeout((</span>)=&gt;</span><span class="built_in">console</span>.log(i), <span class="number">2333</span>), <span class="number">0</span>);</span><br><span class="line">  i &lt; <span class="number">2</span>;</span><br><span class="line">  i++</span><br><span class="line">) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 问 2333 毫秒之后打印出什么</span></span><br></pre></td></tr></table></figure><p>答案是 2333 毫秒后打印出 0。 为什么呢？</p><p>在开始分析题目之前，我们先来回顾几个知识点：</p><h3 id="for-语法"><a href="#for-语法" class="headerlink" title="for 语法"></a>for 语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (语句 <span class="number">1</span>; 语句 <span class="number">2</span>; 语句 <span class="number">3</span>) &#123;</span><br><span class="line">    被执行的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>语句 1</strong>（代码块）开始前执行；<br><strong>语句 2</strong> 定义运行循环（代码块）的条件；<br><strong>语句 3</strong> 在循环（代码块）已被执行之后执行；</p><p>执行的顺序为：<br><strong>1.第一次循环，即初始化循环。</strong><br>首先执行语句1（一般为初始化语句），再执行语句2（一般为条件判断语句），判断语句1是否符合语句2的条件，如果符合，则执行代码块，否则，停止执行，最后执行语句3。<br><strong>2.其他循环：</strong><br>首先判断前一次语句3的执行结果是否符合执行语句2的条件，如果符合，继续执行代码块，否则停止执行，最后执行语句3。如此往复，直到前一次语句3的执行结果不满足符合执行语句2的条件。</p><p>总的来说，执行顺序是一致的，先执行条件判断（语句2），再执行代码块，最后执行语句3。如此往复，区别在于条件判断的对象，在第一次判断时，是执行语句1，初始化的对象，后续的判断对象是执行语句3的结果。</p><h3 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h3><p>逗号表达式，因为原题目中就有使用逗号表达式<code>let i = (setTimeout(()=&gt;console.log(i), 2333), 0);</code>。</p><p>逗号表达式的一般形式是：表达式1,表达式2,表达式3……表达式n。<br>逗号表达式的求解过程是：先计算表达式1的值，再计算表达式2的值，……一直计算到表达式n的值。最后整个逗号表达式的值是表达式n的值。 看下面几个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">8</span>*<span class="number">2</span>, x*<span class="number">4</span>  <span class="comment">// 整个表达式的值为64，x的值为16</span></span><br><span class="line"></span><br><span class="line">(x=<span class="number">8</span>*<span class="number">2</span>, x*<span class="number">4</span>), x*<span class="number">2</span> <span class="comment">// 整个表达式的值为32，x的值为16</span></span><br><span class="line"></span><br><span class="line">x=(z=<span class="number">5</span>, <span class="number">5</span>*<span class="number">2</span>) <span class="comment">// 整个表达式为赋值表达式，它的值为10，z的值为5，x的值为10</span></span><br><span class="line"></span><br><span class="line">x=z=<span class="number">5</span>, <span class="number">5</span>*<span class="number">2</span> <span class="comment">// 整个表达式为逗号表达式，它的值为10，x和z的值都为5</span></span><br></pre></td></tr></table></figure><p>逗号表达式用的地方不太多，一般情况是在给循环变量赋初值时才用得到。所以程序中并不是所有的逗号都要看成逗号运算符，尤其是在函数调用时，各个参数是用逗号隔开的，这时逗号就不是逗号运算符。 </p><p>基础知识回顾完毕，我们通过几个简单示例一步一步地逼近原题目：</p><h3 id="示例一：基础知识-for-循环"><a href="#示例一：基础知识-for-循环" class="headerlink" title="示例一：基础知识 for 循环"></a>示例一：基础知识 for 循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印什么</span></span><br></pre></td></tr></table></figure><p>这个无需多说，答案输出 0  1。</p><h3 id="示例二：我们稍微改造下，将-log-放入-setTimeout-中"><a href="#示例二：我们稍微改造下，将-log-放入-setTimeout-中" class="headerlink" title="示例二：我们稍微改造下，将 log 放入 setTimeout 中"></a>示例二：我们稍微改造下，将 log 放入 setTimeout 中</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印什么</span></span><br></pre></td></tr></table></figure><p>答案输出 2  2。分析下：<br><strong>上述代码中，变量 i 是 var 命令声明的，在全局范围内都有效，所以全局只有一个变量 i。每一次循环，变量 i 的值都会发生改变，而循环内被赋给 setTimeout 内部的 console.log(i)，里面的 i 指向的就是全局的 i。也就是说，这里面所有的 i 指向的都是同一个 i，导致运行时输出的是最后一轮的 i 的值，也就是 2。</strong></p><h3 id="示例三：我再稍微改造下，将上述-var-改为-let。"><a href="#示例三：我再稍微改造下，将上述-var-改为-let。" class="headerlink" title="示例三：我再稍微改造下，将上述 var 改为 let。"></a>示例三：我再稍微改造下，将上述 var 改为 let。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印什么</span></span><br></pre></td></tr></table></figure><p>答案输出 0  1。分析下：<br><strong>上述代码中，变量 i 是 let 声明的，当前的 i 只在本轮循环有效，所以每一次循环的 i 其实都是一个新的变量，所以最后输出的是0 1。你可能会问，如果每一轮循环的变量i都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。</strong></p><h3 id="原题目"><a href="#原题目" class="headerlink" title="原题目"></a>原题目</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(</span><br><span class="line">  <span class="keyword">let</span> i = <span class="function">(<span class="params">setTimeout((</span>)=&gt;</span><span class="built_in">console</span>.log(i), <span class="number">2333</span>), <span class="number">0</span>); <span class="comment">// 语句1</span></span><br><span class="line">  i &lt; <span class="number">2</span>; <span class="comment">// 语句2</span></span><br><span class="line">  i++ <span class="comment">// 语句3</span></span><br><span class="line">) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 问 2333 毫秒之后打印出什么</span></span><br></pre></td></tr></table></figure><p>答案是 2333 毫秒后打印出 0。分析下：<br><strong>上述题目中，变量 i 是 let 声明的，当前的 i 只在本轮循环有效，后面的表达式是逗号表达式，取最后一个值，即 i = 0，settimeout 在语句1，由于语句1只在第一次循环执行，因此 settimeout 的作用域是第一次迭代的作用域，且只执行一次。第一次迭代时 i = 0，所以答案是 2333 毫秒后打印出 0。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一道出自 HTTP 203 的 JS 题目。HTTP 203 是 Youtube 上的一个栏目，主要讲一些有趣的知识。&lt;/p&gt;
&lt;p&gt;原题目是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="es6" scheme="http://sosout.com/categories/es6/"/>
    
    
      <category term="let" scheme="http://sosout.com/tags/let/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 表达式后应不应该加分号？</title>
    <link href="http://sosout.com/2018/08/14/javascript-expression-semicolon.html"/>
    <id>http://sosout.com/2018/08/14/javascript-expression-semicolon.html</id>
    <published>2018-08-14T14:08:22.000Z</published>
    <updated>2018-08-24T10:57:06.046Z</updated>
    
    <content type="html"><![CDATA[<p>我们在看源代码时，我们经常会发现有的源代码 Javascript 表达式后面加了分号，有的却没有加，难免心中产生疑惑：Javascript 表达式后面到底该不该加分号呢？</p><p>其实 Javascript 表达式没有应不应该加分号明确规定，全凭个人习惯，也就是说你加也可以不加也不会出错。Javascript 语法长得有点像 C-like， 但不代表它本质上和 C 是一类语言，不过《JavaScript高级程序设计》一书提到：<code>虽然语句结尾的分号不是必须的，但我们建议任何时候都不要省略它。因为加上这个分号可以避免很多错误（例如不完整的输入），开发人员也可以放心地通过删除多余的空格来压缩 ECMAScript 代码（代码行结尾处没有分号会导致压缩错误）。另外，加上分号也会在某些情况下增进代码的性能，因为这样解析器就不必要再花时间推测应该在哪里插入分号</code>。后来新设计的语言里可选分号的多得去了，光是 “可以加分号但是大家都不加” 的语言就有：Go, Scala, Ruby, Python, Swift, Groovy…</p><p>至于说“什么时候该加什么时候该不加”，其实真的很简单。真正会导致上下行解析出问题的 token 有 5 个：括号，方括号，正则开头的斜杠，加号，减号。实际代码中用正则、加号、减号作为行首的情况极少，所以总结下来就是一句话：一行开头是括号或者方括号的时候加上分号就可以了，其他时候全部不需要。其实即使是这两种情况，在实际代码中也颇为少见。</p><p>eslint –fix 已经支持自动添加删除分号，另外 prettier 1.0 现在也支持无分号选项，在不同 style 之间迁移的成本已经接近 0 了。</p><p>上面提到加上分号会在某些情况下会增进代码的性能。那么问题来了：加或不加分号是否影响JS执行性能？</p><p>我们都清楚无论是解释执行还是编译执行，代码先要被 parse 成 AST（抽象语法树），在 AST 中是没有分号这个东西的，也就是说单纯执行本身，是不可能因为有无分号而造成性能差异的，所以唯一会有差异的是在 parsing 代码的阶段。而 parsing 本身是一次性的，因此通常不可能是性能问题的重点，何况 ASI（自动分号插入）只是整个 parsing 的很小一点。有人实际测试过相同代码在依赖 ASI 或不依赖 ASI 下的性能差异，据说较早版本的 V8 下，依赖 ASI（即不加分号）略慢，但较新版本则反之。也有人认为性能测试结果在统计上没有差异。无论如何，实测结果都表明即使有差异，也小到完全可忽略。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在看源代码时，我们经常会发现有的源代码 Javascript 表达式后面加了分号，有的却没有加，难免心中产生疑惑：Javascript 表达式后面到底该不该加分号呢？&lt;/p&gt;
&lt;p&gt;其实 Javascript 表达式没有应不应该加分号明确规定，全凭个人习惯，也就是说你加
      
    
    </summary>
    
      <category term="javascript" scheme="http://sosout.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://sosout.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>markdown表格中转义 &quot; | &quot;符号</title>
    <link href="http://sosout.com/2018/08/13/markdown-table-transfer.html"/>
    <id>http://sosout.com/2018/08/13/markdown-table-transfer.html</id>
    <published>2018-08-13T12:09:32.000Z</published>
    <updated>2018-08-25T10:47:26.448Z</updated>
    
    <content type="html"><![CDATA[<p>今天用 markdown 语法写文档时，用到了 table 标签。文档中有一项用到<code>|</code>符号，发现<code>|</code>无法使用<code>反斜杠</code>转义。google一番找到了一个方法：使用<a href="http://www.runoob.com/tags/html-ascii.html" target="_blank" rel="noopener">ASCII 字符集</a>。举个简单的例子：</p><table><thead><tr><th>姓名</th><th>爱好</th></tr></thead><tbody><tr><td>Weich1</td><td>篮球 &#124; 游泳</td></tr><tr><td>Weich2</td><td>足球 &#124; 音乐</td></tr><tr><td>Weich3</td><td>爬山</td></tr></tbody></table><p>注：「篮球 &amp;#124; 游泳&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;足球 &amp;#124; 音乐」</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天用 markdown 语法写文档时，用到了 table 标签。文档中有一项用到&lt;code&gt;|&lt;/code&gt;符号，发现&lt;code&gt;|&lt;/code&gt;无法使用&lt;code&gt;反斜杠&lt;/code&gt;转义。google一番找到了一个方法：使用&lt;a href=&quot;http://www.ru
      
    
    </summary>
    
      <category term="markdown" scheme="http://sosout.com/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://sosout.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Vue 源码全方位剖析</title>
    <link href="http://sosout.com/2018/08/12/vue-source-analysis.html"/>
    <id>http://sosout.com/2018/08/12/vue-source-analysis.html</id>
    <published>2018-08-12T15:55:37.000Z</published>
    <updated>2018-09-07T13:39:13.631Z</updated>
    
    <content type="html"><![CDATA[<p><code>版本：v2.5.17-beta.0</code></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着这几年前端的快速发展，页面中需要实现的功能越来越复杂，DOM操作频繁，使用传统的jQuery库去频繁操作DOM时不仅消耗性能，而且各种DOM绑定后期维护时简直是一场噩梦，在开发大型项目时，模块间的依赖问题也变得十分复杂，在这个大背景下，以数据驱动和组件化思想开发的 Vue、React等JavaScript MVVM库应运而生。相比于其他库，Vue.js 提供了更加简洁、更易于理解的 API，使得我们能够快速上手，一经推出，便迅速走红。现在 Vue.js 更是火得一塌糊涂，github star 数更是超越 React。既然 Vue 如此火，我们是不是很有必要了解一下 Vue.js 背后的实现原理。</p><p>目前社区有很多 Vue.js 的源码剖析文章，当下质量比较好的有<a href="http://hcysun.me/vue-design/" target="_blank" rel="noopener">Vue技术内幕–逐行级别的 Vue 源码分析</a>、<a href="https://ustbhuangyi.github.io/vue-analysis/" target="_blank" rel="noopener">Vue.js 技术揭秘</a>，更是得到 Vue 作者本人的推荐。通过通读这两本电子书，我相信大家都能全方位了解 Vue.js 的实现原理。有人可能会有疑问，比如：既然人家写得这么好你为什么还写，直接看人家的不就好了吗，谁会看你的等等？我要说的是源码分析并不是为了彰显个人技术，更多的是为了学习，不管当下想法是否足够成熟，只要我们坚持，我们都会有收获。在开始之前我们先做以下几点约定：</p><p><strong>第一：</strong>目前分析的版本是 Vue.js 的最新版本 Vue.js 2.5.17-beta.0；<br><strong>第二：</strong>Vue web应用是最常见的，也是最易于理解的，所以该源码均围绕 Vue web应用剖析；<br><strong>第三：</strong>我尽可能站在我自己的角度去剖析，当然我会借鉴社区比较优秀的文章，面对大家的拍砖，我无条件接受，也很乐意与大家一起交换意见，努力写好该 Vue 源码系列；<br><strong>第四：</strong>如果有幸您读到该 Vue 源码系列，感觉写得还行，还望收藏、分享或打赏。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>我们从这一章开始即将分析 Vue 的源码，在分析源码之前我们很有必要介绍一些前置知识如flow、Rollup等。除此之外，我们最好已经用过 Vue 做过实际项目，对 Vue 的思想有了一定的了解，对绝大部分的 API 都已经有使用，同时，我们应该有一定的HTML、CSS、JavaScript、ES6+、node &amp; npm等功底，并对代码调试有一定的了解。</p><p>如果具备了以上条件，并且对 Vue 的实现原理很感兴趣，那么就可以开始 Vue 的底层学习了，对它的实现细节一探究竟。</p><h3 id="Flow-JavaScript静态类型检查工具"><a href="#Flow-JavaScript静态类型检查工具" class="headerlink" title="Flow - JavaScript静态类型检查工具"></a>Flow - JavaScript静态类型检查工具</h3><p><a href="https://flow.org/" target="_blank" rel="noopener">Flow</a> 是 facebook 出品的 JavaScript 静态类型检查工具，它与 Typescript 不同的是，它可以部分引入，不需要完全重构整个项目，所以对于一个已有一定规模的项目来说，迁移成本更小，也更加可行。除此之外，Flow 可以提供实时增量的反馈，通过运行 Flow server 不需要在每次更改项目的时候完全从头运行类型检查，提高运行效率。可以简单总结为：<strong>对于新项目，可以考虑使用 TypeScript 或者 Flow，对于已有一定规模的项目则建议使用 Flow 进行较小成本的逐步迁移来引入类型检查。Vue 的源码利用了 Flow 做了静态类型检查，所以了解 Flow 有助于我们阅读源码。</strong></p><h4 id="为什么用静态类型检查工具-Flow"><a href="#为什么用静态类型检查工具-Flow" class="headerlink" title="为什么用静态类型检查工具 Flow"></a>为什么用静态类型检查工具 Flow</h4><p>JavaScript 是动态类型语言，它的灵活性有目共睹，但是过于灵活的副作用就是很容易就写出非常隐蔽的隐患代码，在编译期甚至运行时看上去都不会报错，但是可能会发生各种各样奇怪的和难以解决的bug。</p><p>类型检查是当前动态类型语言的发展趋势，所谓类型检查，就是在编译期尽早发现（由类型错误引起的）bug，又不影响代码运行（不需要运行时动态检查类型），使编写 JavaScript 具有和编写 Java 等强类型语言相近的体验。</p><p>项目越复杂就越需要通过工具的手段来保证项目的维护性和增强代码的可读性。Vue.js 在做2.0重构的时候，在 ES2015 的基础上，除了 ESLint 保证代码风格之外，也引入了 Flow 做静态类型检查。之所以选择 Flow，<strong>最根本原因作者在知乎提及过，还是在于工程上成本和收益的考量。</strong> 大致体现在以下几点：</p><p><strong>第一点：</strong>使用 Flow 可以一个一个文件地迁移，如果使用 TypeScript，则需要全部替换，成本极高，短期内并不现实；<br><strong>第二点：</strong>Babel 和 ESLint 都有对应的 Flow 插件以支持语法，可以完全沿用现有的构建配置，非常小成本的改动就可以拥有静态类型检查的能力；<br><strong>第三点：</strong>更贴近 ES 规范。除了 Flow 的类型声明之外，其他都是标准的 ES。万一哪天不想用 Flow 了，用<code>babel-plugin-transform-flow-strip-types</code>转一下，就得到符合规范的 ES；<br><strong>第四点：</strong>在需要的地方保留 ES 的灵活性，并且对于生成的代码尺寸有更好的控制力 (rollup / 自定义 babel 插件）。</p><h4 id="如何用静态类型检查工具-Flow"><a href="#如何用静态类型检查工具-Flow" class="headerlink" title="如何用静态类型检查工具 Flow"></a>如何用静态类型检查工具 Flow</h4><p>在这里我们就简单说一说 Flow 的用法，其他用法可以参考<a href="https://flow.org/" target="_blank" rel="noopener">Flow官网</a>（可能需要 VPN，非常不稳定），有时间我会详细写一篇 Flow 使用指南。</p><p>Flow 仅仅是一个用于检查的工具，安装使用都很方便，使用时注意以下3点即可：</p><p>1.将 Flow 安装到我们的项目中。<br>2.确保编译之后的代码移除了 Flow 相关的语法。<br>3.在需要检查的地方增加了 Flow 相关的类型注解。</p><p><strong>第一点：将Flow增加到我们的项目中</strong></p><p>安装最新版本的 Flow：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev flow-bin</span><br></pre></td></tr></table></figure></p><p>安装完成之后在 package.json 文件中增加执行脚本：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "your-script-name": "flow",</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后初始化 Flow：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run flow init</span><br></pre></td></tr></table></figure><p>执行完成后，Flow 会在终端输出以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; yourProjectName@1.0.0 flow /yourProjectPath</span><br><span class="line">&gt; flow &quot;init&quot;</span><br></pre></td></tr></table></figure><p>然后在根目录下生成一个名为 .flowconfig 的文件，打开之后是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ignore]</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line"></span><br><span class="line">[libs]</span><br><span class="line"></span><br><span class="line">[lints]</span><br><span class="line"></span><br><span class="line">[options]</span><br><span class="line"></span><br><span class="line">[strict]</span><br></pre></td></tr></table></figure><p>基本上，配置文件没有什么特殊需求是不用去配置的，Flow 默认涵盖了当前目录之后的所有文件。[include] 用于引入项目之外的文件。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line"></span><br><span class="line">../otherProject/a.js</span><br><span class="line"></span><br><span class="line">[libs]</span><br></pre></td></tr></table></figure><p>它会将和当前项目平级的 otherProject/a.js 文件纳入进来。详细配置文件请看<a href="https://flow.org/en/docs/config/" target="_blank" rel="noopener">官网</a>。</p><p><strong>第二点：编译之后的代码移除 Flow 相关的语法</strong></p><p>Flow 在 JavaScript 语法的基础上使用了一些注解（annotation）进行了扩展。因此浏览器无法正确的解读这些 Flow 相关的语法，我们必须在编译之后的代码中（最终发布的代码）将增加的 Flow 注解移除掉。具体方法需要看我们使用了什么样的编译工具。下面将说明一些 Vue 开发常用的编译工具：</p><p><strong>方式一：</strong>Babel</p><p>如果使用 Babel 我们需要安装一个 Babel 对于 Flow 的 preset：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev babel-preset-flow</span><br></pre></td></tr></table></figure></p><p>然后，我们需要在项目根目录<a href="http://babeljs.io/docs/en/babelrc/" target="_blank" rel="noopener">Babel 的配置文件 .babelrc</a>中添加一个 Flow 相关的 preset：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"flow"</span>,</span><br><span class="line">    //other config</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong>flow-remove-types</p><p>如果我们既没有使用 Babel 作为语法糖编译器，那么可以使用 <a href="https://github.com/flowtype/flow-remove-types" target="_blank" rel="noopener">flow-remove-types</a> 这个工具在发布之前移除 Flow 代码。</p><p><strong>第三点：在需要检查的地方增加 Flow 相关的类型注解</strong></p><p>如果我们了解 C++/C# 的元编程或者 Java 的 Annotation，那么理解 Flow 的 Annotation 就会非常轻松。大概就是在文件、方法、代码块之前增加一个注解（Annotation）用来告知 Flow 的执行行为。</p><p>首先，Flow 只检查包含<code>// @flow</code>注解的文件，所以如果需要检查，我们需要这样编写我们的文件，首先我们写一个正确的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">22</span>, <span class="number">11</span>)</span><br></pre></td></tr></table></figure><p>运行 Flow 终端会打印出以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; yourProjectName@1.0.0 flow /yourProjectPath</span><br><span class="line">&gt; flow &quot;init&quot;</span><br><span class="line"></span><br><span class="line">Found 0 errors</span><br></pre></td></tr></table></figure><p>承接上面代码，我们把代码修改成带有检查错误的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="string">"Hello"</span>, <span class="number">11</span>)</span><br></pre></td></tr></table></figure><p>运行 Flow 终端会打印出以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; yourProjectName@1.0.0 flow /yourProjectPath</span><br><span class="line">&gt; flow &quot;init&quot;</span><br><span class="line"></span><br><span class="line">Error ------------------------------------------------------------------------------------- src/platforms/web/mnr.js:8:5</span><br><span class="line"></span><br><span class="line">Cannot call `add` with `&quot;Hello&quot;` bound to `x` because string [1] is incompatible with number [2].</span><br><span class="line"></span><br><span class="line">   src/platforms/web/mnr.js:8:5</span><br><span class="line">   8| add(&quot;Hello&quot;, 11)</span><br><span class="line">          ^^^^^^^ [1]</span><br><span class="line"></span><br><span class="line">References:</span><br><span class="line">   src/platforms/web/mnr.js:4:17</span><br><span class="line">   4| function add(x: number, y: number): number &#123;</span><br><span class="line">                      ^^^^^^ [2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Found 1 error</span><br></pre></td></tr></table></figure><p>到这里，Flow 已经算是安装成功了，接下来的事是要增加各种注解以加强类型限定或者参数检测。之后的内容将简要介绍 flow 的类型检查方式。</p><h4 id="Flow-的类型检查方式"><a href="#Flow-的类型检查方式" class="headerlink" title="Flow 的类型检查方式"></a>Flow 的类型检查方式</h4><p>现在我们就说说 Flow 常用的2种类型检查方式：<br><strong>类型推断</strong>：通过变量的执行上下文来推断出变量类型，然后根据这些推断来检查类型。<br><strong>类型注释</strong>：事先注释好我们期望的类型，Flow 会基于这些注释来检查。</p><p><strong>第一种方式：类型推断</strong></p><p>此方式不需要编写任何代码即可进行类型检查，最小化开发者的工作量，它也不会强制我们改变开发习惯，因为它会自动推断出变量的类型，这就是所谓的类型推断，Flow 最重要的特性之一。</p><p>通过一个简单例子说明一下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">split</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">split(<span class="number">11</span>)</span><br></pre></td></tr></table></figure></p><p>Flow 检查上述代码后会报错，因为函数 split 期待的参数是字符串，而我们输入的是数字。</p><p><strong>第二种方式：类型注释</strong></p><p>如上所述，类型推断是 Flow 最有用的特性之一，不需要编写任何代码就能进行类型检查。但在某些特定的场景下，使用类型注释可以提供更好更明确的检查依据。</p><p>看看以下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="string">'Hello'</span>, <span class="number">11</span>)</span><br></pre></td></tr></table></figure></p><p>Flow 根据类型推断检查上述代码时检查不出任何错误，因为从语法层面考虑， + 既可以用在字符串上，也可以用在数字上，我们并没有明确指出 add() 的参数必须为数字。在这种情况下，我们可以借助类型注释来指明期望的类型。类型注释是以冒号 : 开头，可以在函数参数，返回值，变量声明中使用。如果我们在上段代码中使用类型注释，就会变成如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="string">'Hello'</span>, <span class="number">11</span>)</span><br></pre></td></tr></table></figure></p><p>现在 Flow 就能检查出错误，因为函数参数的期待类型为数字，而我们提供了字符串。上面的例子是针对函数的类型注释。接下来我们来看看 Flow 能支持的一些常见的类型注释:</p><p><strong>第一种：</strong>数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">arr.push(<span class="string">'Hello'</span>)</span><br></pre></td></tr></table></figure></p><p>数组类型注释的格式是 Array<t>，T 表示数组中每项的数据类型。在上述代码中，arr 是每项均为数字的数组。如果我们给这个数组添加了一个字符串，Flow 能检查出错误。</t></p><p><strong>第二种：</strong>类和对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  x: string;           <span class="comment">// x 是字符串</span></span><br><span class="line">  y: string | number;  <span class="comment">// y 可以是字符串或者数字</span></span><br><span class="line">  z: boolean;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(x: string, y: string | number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x</span><br><span class="line">    <span class="keyword">this</span>.y = y</span><br><span class="line">    <span class="keyword">this</span>.z = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar: Bar = <span class="keyword">new</span> Bar(<span class="string">'hello'</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj: &#123; <span class="attr">a</span>: string, <span class="attr">b</span>: number, <span class="attr">c</span>: <span class="built_in">Array</span>&lt;string&gt;, <span class="attr">d</span>: Bar &#125; = &#123;</span><br><span class="line">  a: <span class="string">'hello'</span>,</span><br><span class="line">  b: <span class="number">11</span>,</span><br><span class="line">  c: [<span class="string">'hello'</span>, <span class="string">'world'</span>],</span><br><span class="line">  d: <span class="keyword">new</span> Bar(<span class="string">'hello'</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的类型注释格式如上，可以对类自身的属性做类型检查，也可以对构造函数的参数做类型检查。这里需要注意的是：属性 y 的类型中间用 | 做间隔，表示 y 的类型即可以是字符串也可以是数字。</p><p>对象的注释类型类似于类，需要指定对象属性的类型。</p><p><strong>第三种：</strong>Null/undefined</p><p>Flow 会检查所有的 JavaScript 基础类型—— Boolean、String、Number、null、undefined（在Flow中用void代替）。除此之外还提供了一些操作符号，例如 text : ?string，它表示参数存在“没有值”的情况，除了传递 string 类型之外，还可以是 null 或 undefined。需要特别注意的是，这里的没有值和 JavaScript 的表达式的“非”是两个概念，Flow 的“没有值”只有 null、void（undefined），而 JavaScript 表达式的“非”包含：null、undefined、0、false。</p><p>如果想任意类型 T 可以为 null 或者 undefined，只需写成如下 ?T 的格式即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo: ?string = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>此时，foo 可以为字符串，也可以为 null。</p><h4 id="Flow-在-Vue-js-源码中的应用"><a href="#Flow-在-Vue-js-源码中的应用" class="headerlink" title="Flow 在 Vue.js 源码中的应用"></a>Flow 在 Vue.js 源码中的应用</h4><p>有时候我们想引用第三方库，或者自定义一些类型，但 Flow 并不认识，因此检查的时候会报错。为了解决这类问题，Flow 提出了一个 libdef 的概念，可以用来识别这些第三方库或者是自定义类型，而 Vue.js 也利用了这一特性。</p><p>在 Vue.js 的主目录下有 .flowconfig 文件， 它是 Flow 的配置文件。这其中的 [libs] 部分用来描述包含指定库定义的目录，默认是名为 flow-typed 的目录。</p><p>这里 [libs] 配置的是 flow，表示指定的库定义都在 flow 文件夹内。我们打开这个目录，会发现文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flow</span><br><span class="line">├── compiler.js        # 编译相关</span><br><span class="line">├── component.js       # 组件数据结构</span><br><span class="line">├── global-api.js      # Global API 结构</span><br><span class="line">├── modules.js         # 第三方库定义</span><br><span class="line">├── options.js         # 选项相关</span><br><span class="line">├── ssr.js             # 服务端渲染相关</span><br><span class="line">├── vnode.js           # 虚拟 node 相关</span><br></pre></td></tr></table></figure></p><p>可以看到，Vue.js 有很多自定义类型的定义，在阅读源码的时候，如果遇到某个类型并想了解它完整的数据结构的时候，可以回来翻阅这些数据结构的定义。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>通过对 Flow 的认识，有助于我们阅读 Vue 的源码，并且这种静态类型检查的方式非常有利于大型项目源码的开发和维护。<strong>此外，通过 Vue 重构，我们发现项目重构要么依赖规范，要么就得自己有绝对控制权，同时还要考量开发成本、项目收益以及整个团队的技术水平，并不是一味的什么火就用什么。</strong></p><h3 id="Rollup-另一个前端模块化的打包工具"><a href="#Rollup-另一个前端模块化的打包工具" class="headerlink" title="Rollup - 另一个前端模块化的打包工具"></a>Rollup - 另一个前端模块化的打包工具</h3><p>Rollup 是前端模块化的一个打包工具，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。简单地说，它可以从一个入口文件开始，将所有使用的模块根据命令或者根据 Rollup 配置文件打包成一个目标文件，并且 Rollup 会自动过滤掉那些没有被使用过的函数或变量，从而使代码最小化，如果想使用直接导入这一个目标文件即可，因此 Rollup 极其适合构建一个工具库。</p><p>这里提到 Rollup 的两个特别重要的特性，第一个就是它使用了 ES2015 的模板标准，这意味着我们可以直接使用 import 和 export 而不需要引入 babel。另一个重要特性叫做 tree-shaking，这个特性可以帮助我们将无用代码（即没有使用的代码）从最终的目标文件中过滤掉。举个简单的例子，我们在 foo.js 文件定义了 f1 和 f2 两个方法，然后在入口文件 index.js 只引入了 foo.js 文件中的 f1 方法，那么在最后打包 index.js 文件时，Rollup 就不会将 f2 方法打包到最终文件中（这个特性是基于 ES6 模块的静态分析的，也就是说，只有 export 而没有 import 的变量是不会被打包到最终代码中的）。</p><h4 id="为什么用前端模块化的打包工具-Rollup"><a href="#为什么用前端模块化的打包工具-Rollup" class="headerlink" title="为什么用前端模块化的打包工具 Rollup"></a>为什么用前端模块化的打包工具 Rollup</h4><p>之前 Vue 用 webpack 打包，还是会自带一个小型的动态 module 加载机制，并且每个文件是包在一个模块函数里的。Rollup 打包通过重命名 import binding 直接把所有文件的函数都放在同一个函数体里面… 所以最终出来的文件会小一些，并且初始化快个十几毫秒的样子。</p><h4 id="如何用前端模块化的打包工具-Rollup"><a href="#如何用前端模块化的打包工具-Rollup" class="headerlink" title="如何用前端模块化的打包工具 Rollup"></a>如何用前端模块化的打包工具 Rollup</h4><p>关于如何使用前端模块化的打包工具 Rollup，这里就不做过多介绍了，可参考我之前写的一篇文章：<a href="/2018/08/04/rollup-tutorial.html">Rollup使用指南</a>，更详细的使用文档可参考：<a href="https://www.rollupjs.com/guide/zh" target="_blank" rel="noopener">官网</a>。</p><h4 id="Webpack-和-Rollup-有什么不同"><a href="#Webpack-和-Rollup-有什么不同" class="headerlink" title="Webpack 和 Rollup 有什么不同"></a>Webpack 和 Rollup 有什么不同</h4><p>Vue 从 1.0.10 开始就改用 Rollup 来打包。作者尤雨溪在知乎上也曾说过 使用 Rollup 只是用于 Vue 发布文件的构建，对用户使用没有直接影响。在这之前用 webpack 打包，还是会自带一个小型的动态 module 加载机制，并且每个文件是包在一个模块函数里的。Rollup 打包通过重命名 import binding 直接把所有文件的函数都放在同一个函数体里面… 所以最终出来的文件会小一些，并且初始化快个十几毫秒的样子。</p><p>Webpack 是目前使用最为火热的打包工具，没有之一，每月有数百万的下载量，为成千上万的网站和应用提供支持。相比之下，Rollup 并不起眼。但 Vue 并不孤单 – React，Ember，Preact，D3，Three.js，Moment 以及其他许多知名的库也使用 Rollup 。世界到底怎么了？为什么我们不能只有一个大众认可的 JavaScript 模块化打包工具？</p><p>Webpack 始于2012年，由 Tobias Koppers 发起，用于解决当时现有工具未解决的的一个难题：<strong>构建复杂的单页应用程序(SPA)。</strong>特别是 webpack 的两个特性改变了一切：</p><p><strong>第一个特性：</strong>代码拆分(Code Splitting)</p><p>代码拆分也就是说我们可以将应用程序分解成可管理的代码块，可以按需加载，这意味着用户可以快速获取网站内容，而不必等到整个应用程序下载和解析完成。</p><p><strong>第二个特性：</strong>各式各样的加载器（loader）</p><p>不管是图像，css，还是 html ，在 Webpack 看来一切都可作为模块，然后通过不同的加载器 loader 来加载它们。</p><p>ES6 发布之后，其中引入的模块机制使得静态分析成为了可能，于是 Rollup 发布了：其中 Rollup 有两个特别重要的特性，第一个就是它利用 ES2015 巧妙的模块设计，尽可能高效的构建出能够直接被其他 Javascript 库的。另一个重要特性叫做 tree-shaking，这个特性可以帮助我们将无用代码（即没有使用的代码）从最终的目标文件中过滤掉。</p><p>紧接着 Webpack2 发布，仿照 Rollup 增加了 tree-shaking。 在之后， Webpack3 发布，仿照 Rollup 又增加了 Scope Hoisting。在在之后， Parcel 发布了一个快速、零配置的打包工具。于是，Webpack4 仿照 Parcel 发布了。</p><p>说了这么多，工作中我们到底该用哪个工具？</p><p>对于应用使用 webpack，对于类库使用 Rollup。如果我们需要代码拆分(Code Splitting)，或者我们有很多静态资源需要处理，再或者我们构建的项目需要引入很多 CommonJS 模块的依赖，那么 webpack 是个很不错的选择。如果您的代码库是基于 ES2015 模块的，而且希望我们写的代码能够被其他人直接使用，我们需要的打包工具可能是 Rollup。</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>通过对 Rollup 的认识，有助于我们了解 Vue 的构建以及源码目录结构。</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>上一章我们简单介绍了下 flow、Rollup 等前置知识，有兴趣的可以有针对性的学习它们。这一章我们真正的开始分析 Vue 源码，激动不激动？该章主要包括三小节：项目目录、源码构建、源码入口。</p><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p>Vue.js 的源码都在 src 目录下，其详细目录结构如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">├── dist ---------------------------------------- 构建后的输出目录</span><br><span class="line">├── examples ------------------------------------ Vue 开发的应用案例</span><br><span class="line">├── flow ---------------------------------------- Flow 类型声明</span><br><span class="line">├── packages ------------------------------------ 独立发布包的目录</span><br><span class="line">├── scripts ------------------------------------- 构建相关的文件</span><br><span class="line">│   ├── git-hooks ------------------------------- git钩子的目录</span><br><span class="line">│   ├── alias.js -------------------------------- 别名配置文件</span><br><span class="line">│   ├── build.js -------------------------------- Rollup 构建文件</span><br><span class="line">│   ├── config.js ------------------------------- Rollup 构建配置的文件</span><br><span class="line">│   ├── gen-release-note.js --------------------- 生成发布通知</span><br><span class="line">│   ├── get-weex-version.js --------------------- 获取 weex 版本</span><br><span class="line">│   ├── release-weex.sh ------------------------- 自动发布新版本weex脚本</span><br><span class="line">│   ├── ci.sh ----------------------------------- 持续集成运行的脚本</span><br><span class="line">│   ├── release.sh ------------------------------ 自动发布新版本脚本</span><br><span class="line">├── src ----------------------------------------- 源码目录，我们主要剖析目录</span><br><span class="line">│   ├── compiler -------------------------------- 编译相关，主要将 template 编译为 render 函数 </span><br><span class="line">│   ├── core ------------------------------------ 核心代码，与平台无关的代码</span><br><span class="line">│   │   ├── components -------------------------- 抽象出来的通用组件</span><br><span class="line">│   │   ├── instance ---------------------------- Vue 构造函数设计相关的代码</span><br><span class="line">│   │   ├── global-api -------------------------- Vue 构造函数挂载全局方法(静态方法)或属性的代码</span><br><span class="line">│   │   ├── observer ---------------------------- 响应系统，包含数据观测的核心代码</span><br><span class="line">│   │   ├── vdom -------------------------------- 虚拟DOM创建(creation)和打补丁(patching)的代码</span><br><span class="line">├── ├── platforms ------------------------------- 平台特有的相关代码，不同平台的构建入口文件</span><br><span class="line">│   │   ├── web --------------------------------- web平台</span><br><span class="line">│   │   │   ├── entry-runtime.js ---------------- 不带编译器构建的入口</span><br><span class="line">│   │   │   ├── entry-runtime-<span class="keyword">with</span>-compiler.js -- 自带编译器构建的入口</span><br><span class="line">│   │   │   ├── entry-compiler.js --------------- vue-template-compiler 包的入口文件</span><br><span class="line">│   │   │   ├── entry-server-renderer.js -------- vue-server-renderer 包的入口文件</span><br><span class="line">│   │   │   ├── entry-server-basic-renderer.js -- 输出 packages/vue-server-renderer/basic.js</span><br><span class="line">│   │   ├── weex -------------------------------- 混合应用</span><br><span class="line">├── ├── server ---------------------------------- 服务端渲染</span><br><span class="line">│   ├── sfc ------------------------------------- .vue 文件解析</span><br><span class="line">│   ├── shared ---------------------------------- 整个项目通用代码</span><br><span class="line">├── test ---------------------------------------- 测试文件</span><br><span class="line">├── .babelrc ------------------------------------ babel 配置文件</span><br><span class="line">├── .editorconfig ------------------------------- 编辑器语法规范配置</span><br><span class="line">├── .eslintignore ------------------------------- eslint 忽略配置</span><br><span class="line">├── .eslintrc ----------------------------------- eslint 配置文件</span><br><span class="line">├── .flowconfig --------------------------------- flow 的配置文件</span><br><span class="line">├── .gitignore ---------------------------------- git 忽略配置</span><br><span class="line">├── package-lock.json --------------------------- npm 加锁文件</span><br><span class="line">├── package.json -------------------------------- 项目管理文件</span><br><span class="line">├── README.md ----------------------------------- 项目文档</span><br><span class="line">├── yarn.lock ----------------------------------- yarn 加锁文件</span><br></pre></td></tr></table></figure></p><p>上述目录很是熟悉，根目录下 src 存放源码，test 存放单元测试，examples 作为应用案例等等，后续 Vue 团队会不会也采用 monorepo 项目组织方式这个目前不好说，但有可能。接下来我们对重点剖析的源码目录做一个简要分析：</p><h4 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h4><p>compiler 目录包含 Vue.js 所有编译相关的代码。它包括把模板解析成 ast 语法树，ast 语法树优化，代码生成等功能。通常我们利用 vue-cli 去初始化我们的 Vue.js 项目的时候会询问我们用 Runtime Only 版本的还是 Runtime + Compiler 版本。下面我们来对比这两个版本：</p><p><strong>Runtime Only 版本：</strong>我们在使用 Runtime Only 版本的 Vue.js 的时候，通常需要借助如 webpack 的 vue-loader 工具把 .vue 文件编译成 JavaScript，因为是在编译阶段做的，所以它只包含运行时的 Vue.js 代码，因此代码体积也会更轻量。</p><p><strong>Runtime + Compiler 版本：</strong>我们如果没有对代码做预编译，但又使用了 Vue 的 template 属性并传入一个字符串，则需要在客户端编译模板，如下所示：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要编译器的版本</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;&#123;&#123; hi &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种情况不需要</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.hi)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>因为在 Vue.js 2.0 中，最终渲染都是通过 render 函数，如果写 template 属性，则需要编译成 render 函数，那么这个编译过程会发生运行时，所以需要带有编译器的版本。很显然，这个编译过程对性能会有一定损耗，所以通常我们更推荐使用 Runtime-Only 的 Vue.js。</p><h4 id="core"><a href="#core" class="headerlink" title="core"></a>core</h4><p>core 目录包含了 Vue.js 的核心代码，包括内置组件、全局 API 封装，Vue 实例化、观察者、虚拟 DOM、工具函数等等。</p><h4 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h4><p>platform 目录是 Vue.js 的入口，2 个目录代表 2 个主要入口，分别打包成运行在 web 上和配合 weex 运行在 native 客户端上的 Vue.js。</p><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><p>server 目录主要用于服务端渲染。这部分代码是跑在服务端的 Node.js，不要和跑在浏览器端的 Vue.js 混为一谈。Vue.js 从 2.0 开始支持了服务端渲染，服务端渲染的主要工作是把组件渲染为服务器端的 HTML 字符串，然后将它们直接发送到浏览器，最后将静态标记”混合”为客户端上完全交互的应用程序。</p><h4 id="sfc"><a href="#sfc" class="headerlink" title="sfc"></a>sfc</h4><p>sfc 目录主要用于把 .vue 文件内容解析成一个 JavaScript 对象，实际开发中我们一般用 webpack 完成该工作。</p><h4 id="shared"><a href="#shared" class="headerlink" title="shared"></a>shared</h4><p>shared 目录主要定义了一些共享的工具方法，这些工具方法不但适用于浏览器端的 Vue.js，同时也适用于服务端的 Vue.js。</p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>从 Vue.js 的目录设计可以看到，作者把功能模块拆分的非常清楚，相关的逻辑放在一个独立的目录下维护，并且把复用的代码也抽成一个独立目录。</p><h3 id="源码构建"><a href="#源码构建" class="headerlink" title="源码构建"></a>源码构建</h3><p>Vue 源码是基于 Rollup 构建的，它的构建相关配置都在 scripts 目录下。</p><h4 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h4><p>通常一个基于 NPM 托管的项目都会有一个 package.json 文件，实际上它是对项目的描述文件，它的内容是一个标准的 JSON 对象。我们通常会配置 script 字段作为 NPM 的构建命令，Vue 源码构建的脚本如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // ...</span><br><span class="line">    "main": "dist/vue.runtime.common.js",</span><br><span class="line">    "module": "dist/vue.runtime.esm.js",</span><br><span class="line">    "unpkg": "dist/vue.js",</span><br><span class="line">    "jsdelivr": "dist/vue.js",</span><br><span class="line">    "typings": "types/index.d.ts",</span><br><span class="line">    "files": [</span><br><span class="line">        "src",</span><br><span class="line">        "dist/*.js",</span><br><span class="line">        <span class="string">"types/*.d.ts"</span></span><br><span class="line">    ],</span><br><span class="line">    "sideEffects": false,</span><br><span class="line">    "scripts": &#123;</span><br><span class="line">         // 构建完整版 umd 模块的 Vue</span><br><span class="line">        "dev": "rollup -w -c scripts/config.js --environment TARGET:web-full-dev",</span><br><span class="line">        // 构建运行时 cjs 模块的 Vue</span><br><span class="line">        "dev:cjs": "rollup -w -c scripts/config.js --environment TARGET:web-runtime-cjs",</span><br><span class="line">        // 构建运行时 es 模块的 Vue</span><br><span class="line">        "dev:esm": "rollup -w -c scripts/config.js --environment TARGET:web-runtime-esm",</span><br><span class="line">        // 构建 web-server-renderer 包</span><br><span class="line">        "dev:ssr": "rollup -w -c scripts/config.js --environment TARGET:web-server-renderer",</span><br><span class="line">        // 构建 Compiler 包</span><br><span class="line">        "dev:compiler": "rollup -w -c scripts/config.js --environment TARGET:web-compiler ",</span><br><span class="line">        // ...</span><br><span class="line">        "build": "node scripts/build.js",</span><br><span class="line">        "build:ssr": "npm run build -- web-runtime-cjs,web-server-renderer",</span><br><span class="line">        "build:weex": "npm run build -- weex",</span><br><span class="line">        // ...</span><br><span class="line">    &#125;,</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里总共有 3 条命令，作用都是构建 Vue，后面 2 条是在第一条命令的基础上，添加一些环境参数。当在命令行运行<code>npm run build</code>的时候，实际上会执行<code>node scripts/build.js</code>，接下来我们就来看看它实际上是如何构建的。</p><h4 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h4><p>我们首先打开构建命令对应的构建 JS 脚本，在<code>scripts/build.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">let</span> builds = <span class="built_in">require</span>(<span class="string">'./config'</span>).getAllBuilds()</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter builds via command line arg</span></span><br><span class="line"><span class="keyword">if</span> (process.argv[<span class="number">2</span>]) &#123;</span><br><span class="line">  <span class="keyword">const</span> filters = process.argv[<span class="number">2</span>].split(<span class="string">','</span>)</span><br><span class="line">  builds = builds.filter(<span class="function"><span class="params">b</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> filters.some(<span class="function"><span class="params">f</span> =&gt;</span> b.output.file.indexOf(f) &gt; <span class="number">-1</span> || b._name.indexOf(f) &gt; <span class="number">-1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// filter out weex builds by default</span></span><br><span class="line">  builds = builds.filter(<span class="function"><span class="params">b</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b.output.file.indexOf(<span class="string">'weex'</span>) === <span class="number">-1</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build(builds)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></p><p>这段代码逻辑非常简单，先从配置文件读取配置，再通过命令行参数对构建配置做过滤，这样就可以构建出不同用途的 Vue.js 了。稍后我们再来看构建函数 build，我们先来看看配置文件，在<code>scripts/config.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> builds = &#123;</span><br><span class="line">  <span class="comment">// Runtime only (CommonJS). Used by bundlers e.g. Webpack &amp; Browserify</span></span><br><span class="line">  <span class="string">'web-runtime-cjs'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.common.js'</span>),</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler CommonJS build (CommonJS)</span></span><br><span class="line">  <span class="string">'web-full-cjs'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.common.js'</span>),</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime only (ES Modules). Used by bundlers that support ES Modules,</span></span><br><span class="line">  <span class="comment">// e.g. Rollup &amp; Webpack 2</span></span><br><span class="line">  <span class="string">'web-runtime-esm'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.esm.js'</span>),</span><br><span class="line">    format: <span class="string">'es'</span>,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler CommonJS build (ES Modules)</span></span><br><span class="line">  <span class="string">'web-full-esm'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.esm.js'</span>),</span><br><span class="line">    format: <span class="string">'es'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// runtime-only build (Browser)</span></span><br><span class="line">  <span class="string">'web-runtime-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// runtime-only production build (Browser)</span></span><br><span class="line">  <span class="string">'web-runtime-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.min.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler development build (Browser)</span></span><br><span class="line">  <span class="string">'web-full-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler production build  (Browser)</span></span><br><span class="line">  <span class="string">'web-full-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.min.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里简单列举了一些 Vue 构建的配置，其他已省略，可以看出实际上这是一个用于 Rollup 构建配置的对象。接下来我们再看一下构建函数 build，在<code>scripts/build.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">build(builds)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build</span> (<span class="params">builds</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> built = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> total = builds.length</span><br><span class="line">  <span class="keyword">const</span> next = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    buildEntry(builds[built]).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      built++</span><br><span class="line">      <span class="keyword">if</span> (built &lt; total) &#123;</span><br><span class="line">        next()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).catch(logError)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildEntry</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> output = config.output</span><br><span class="line">  <span class="keyword">const</span> &#123; file, banner &#125; = output</span><br><span class="line">  <span class="keyword">const</span> isProd = <span class="regexp">/min\.js$/</span>.test(file)</span><br><span class="line">  <span class="keyword">return</span> rollup.rollup(config)</span><br><span class="line">    .then(<span class="function"><span class="params">bundle</span> =&gt;</span> bundle.generate(output))</span><br><span class="line">    .then(<span class="function">(<span class="params">&#123; code &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isProd) &#123;</span><br><span class="line">        <span class="keyword">var</span> minified = (banner ? banner + <span class="string">'\n'</span> : <span class="string">''</span>) + uglify.minify(code, &#123;</span><br><span class="line">          output: &#123;</span><br><span class="line">            ascii_only: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          compress: &#123;</span><br><span class="line">            pure_funcs: [<span class="string">'makeMap'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).code</span><br><span class="line">        <span class="keyword">return</span> write(file, minified, <span class="literal">true</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> write(file, code)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述关键的代码是<code>return rollup.rollup(config)</code>，可以看出这是通过 rollup 打包的，对于单个配置，它是遵循 Rollup 的构建规则的。其中 entry 属性表示构建的入口 JS 文件地址，dest 属性表示构建后的输出的 JS 文件地址，format 属性表示构建的格式，cjs 表示构建出来的文件遵循<a href="http://wiki.commonjs.org/wiki/Modules/1.1" target="_blank" rel="noopener">CommonJS 规范</a>，es 表示构建出来的文件遵循<a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="noopener">ES Module 规范</a>，umd 表示构建出来的文件遵循<a href="https://github.com/umdjs/umd" target="_blank" rel="noopener">UMD 规范</a>。</p><p><strong>下面我们以配置文件的<code>web-runtime-cjs</code>配置为例：</strong></p><p>构建的入口 JS 文件地址：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> builds = &#123;</span><br><span class="line">  <span class="comment">// Runtime only (CommonJS). Used by bundlers e.g. Webpack &amp; Browserify</span></span><br><span class="line">    <span class="string">'web-runtime-cjs'</span>: &#123;</span><br><span class="line">        entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">        dest: resolve(<span class="string">'dist/vue.runtime.common.js'</span>),</span><br><span class="line">        format: <span class="string">'cjs'</span>,</span><br><span class="line">        banner</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>沿着<code>resolve</code>函数我们来看一下它的定义，在<code>scripts/config.js</code>中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aliases = <span class="built_in">require</span>(<span class="string">'./alias'</span>)</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> base = p.split(<span class="string">'/'</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">if</span> (aliases[base]) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(aliases[base], p.slice(base.length + <span class="number">1</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(__dirname, <span class="string">'../'</span>, p)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述<code>resolve</code>函数实现非常简单：<strong>它把传入的参数<code>p</code>通过<code>/</code>分割成数组并取数组第一个元素赋值给<code>base</code>。</strong>在我们这个例子中，参数<code>p</code>的值是<code>web/entry-runtime.js</code>，那么<code>base</code>的值则为<code>web</code>。这里的<code>base</code>并不是实际的路径，它的实际路径是借助别名获取的，接下来我们来看一下别名配置的代码，在<code>scripts/alias</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">p</span> =&gt;</span> path.resolve(__dirname, <span class="string">'../'</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  vue: resolve(<span class="string">'src/platforms/web/entry-runtime-with-compiler'</span>),</span><br><span class="line">  compiler: resolve(<span class="string">'src/compiler'</span>),</span><br><span class="line">  core: resolve(<span class="string">'src/core'</span>),</span><br><span class="line">  shared: resolve(<span class="string">'src/shared'</span>),</span><br><span class="line">  web: resolve(<span class="string">'src/platforms/web'</span>),</span><br><span class="line">  weex: resolve(<span class="string">'src/platforms/weex'</span>),</span><br><span class="line">  server: resolve(<span class="string">'src/server'</span>),</span><br><span class="line">  entries: resolve(<span class="string">'src/entries'</span>),</span><br><span class="line">  sfc: resolve(<span class="string">'src/sfc'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很显然，这里<code>web</code>对应的真实的路径是<code>path.resolve(__dirname, &#39;../&#39;, &#39;src/platforms/web&#39;)</code>，这个路径就是<code>src/platforms/web</code>，然后<code>resolve</code>函数通过<code>path.resolve(aliases[base], p.slice(base.length + 1))</code>就得到了<code>Vue</code>源码的最终路径，它就是<code>src/platforms/web/entry-runtime.js</code>，因此，<code>web-runtime-cjs</code>配置对应的入口文件就是<code>src/platforms/web/entry-runtime.js</code>。</p><p>构建后的输出的 JS 文件地址：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aliases = <span class="built_in">require</span>(<span class="string">'./alias'</span>)</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> base = p.split(<span class="string">'/'</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">if</span> (aliases[base]) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(aliases[base], p.slice(base.length + <span class="number">1</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(__dirname, <span class="string">'../'</span>, p)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> builds = &#123;</span><br><span class="line">  <span class="comment">// Runtime only (CommonJS). Used by bundlers e.g. Webpack &amp; Browserify</span></span><br><span class="line">    <span class="string">'web-runtime-cjs'</span>: &#123;</span><br><span class="line">        entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">        dest: resolve(<span class="string">'dist/vue.runtime.common.js'</span>),</span><br><span class="line">        format: <span class="string">'cjs'</span>,</span><br><span class="line">        banner</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// alias.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">p</span> =&gt;</span> path.resolve(__dirname, <span class="string">'../'</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  vue: resolve(<span class="string">'src/platforms/web/entry-runtime-with-compiler'</span>),</span><br><span class="line">  compiler: resolve(<span class="string">'src/compiler'</span>),</span><br><span class="line">  core: resolve(<span class="string">'src/core'</span>),</span><br><span class="line">  shared: resolve(<span class="string">'src/shared'</span>),</span><br><span class="line">  web: resolve(<span class="string">'src/platforms/web'</span>),</span><br><span class="line">  weex: resolve(<span class="string">'src/platforms/weex'</span>),</span><br><span class="line">  server: resolve(<span class="string">'src/server'</span>),</span><br><span class="line">  entries: resolve(<span class="string">'src/entries'</span>),</span><br><span class="line">  sfc: resolve(<span class="string">'src/sfc'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于别名配置里并没有<code>dist</code>别名配置，因此<code>dest</code>直接返回<code>path.resolve(__dirname,&#39;../&#39;,dist/vue.runtime.common.js);</code>，因此构建后的输出的 JS 文件地址是<code>dist/vue.runtime.common.js</code>。</p><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><p>通过这一节的分析，我们可以了解到 Vue.js 的打包过程，也知道了不同作用和功能的 Vue.js 它们对应的入口以及最终编译生成的 JS 文件。尽管在实际开发过程中我们会用<code>Runtime Only</code>版本开发比较多，但为了分析 Vue 的编译过程，我们重点分析的源码是<code>Runtime + Compiler 的 Vue.js</code>。</p><h3 id="源码入口"><a href="#源码入口" class="headerlink" title="源码入口"></a>源码入口</h3><h4 id="Vue-的定义"><a href="#Vue-的定义" class="headerlink" title="Vue 的定义"></a>Vue 的定义</h4><p>我们在源码构建一节讲到，在<code>web</code>应用下，我们来分析<code>Runtime + Compiler</code>构建出来的 Vue.js，它的入口是<code>src/platforms/web/entry-runtime-with-compiler.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'core/config'</span></span><br><span class="line"><span class="keyword">import</span> &#123; warn, cached &#125; <span class="keyword">from</span> <span class="string">'core/util/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; mark, measure &#125; <span class="keyword">from</span> <span class="string">'core/util/perf'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./runtime/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; query &#125; <span class="keyword">from</span> <span class="string">'./util/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; compileToFunctions &#125; <span class="keyword">from</span> <span class="string">'./compiler/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; shouldDecodeNewlines, shouldDecodeNewlinesForHref &#125; <span class="keyword">from</span> <span class="string">'./util/compat'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> idToTemplate = cached(<span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> el = query(id)</span><br><span class="line">  <span class="keyword">return</span> el &amp;&amp; el.innerHTML</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mount = Vue.prototype.$mount</span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">Vue.compile = compileToFunctions</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><p>由此可以看出，当我们在代码执行<code>import Vue from &#39;vue&#39;</code>时，就是从这个入口来初始化 Vue 的。在这个入口 JS 的上方我们可以找到 Vue 的来源：<code>import Vue from &#39;./runtime/index&#39;</code>，接下来我们来看一下这块儿的实现，在<code>src/platforms/web/runtime/index.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'core/index'</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'core/config'</span></span><br><span class="line"><span class="keyword">import</span> &#123; extend, noop &#125; <span class="keyword">from</span> <span class="string">'shared/util'</span></span><br><span class="line"><span class="keyword">import</span> &#123; mountComponent &#125; <span class="keyword">from</span> <span class="string">'core/instance/lifecycle'</span></span><br><span class="line"><span class="keyword">import</span> &#123; devtools, inBrowser, isChrome &#125; <span class="keyword">from</span> <span class="string">'core/util/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  query,</span><br><span class="line">  mustUseProp,</span><br><span class="line">  isReservedTag,</span><br><span class="line">  isReservedAttr,</span><br><span class="line">  getTagNamespace,</span><br><span class="line">  isUnknownElement</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'web/util/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; patch &#125; <span class="keyword">from</span> <span class="string">'./patch'</span></span><br><span class="line"><span class="keyword">import</span> platformDirectives <span class="keyword">from</span> <span class="string">'./directives/index'</span></span><br><span class="line"><span class="keyword">import</span> platformComponents <span class="keyword">from</span> <span class="string">'./components/index'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// install platform specific utils</span></span><br><span class="line">Vue.config.mustUseProp = mustUseProp</span><br><span class="line">Vue.config.isReservedTag = isReservedTag</span><br><span class="line">Vue.config.isReservedAttr = isReservedAttr</span><br><span class="line">Vue.config.getTagNamespace = getTagNamespace</span><br><span class="line">Vue.config.isUnknownElement = isUnknownElement</span><br><span class="line"></span><br><span class="line"><span class="comment">// install platform runtime directives &amp; components</span></span><br><span class="line">extend(Vue.options.directives, platformDirectives)</span><br><span class="line">extend(Vue.options.components, platformComponents)</span><br><span class="line"></span><br><span class="line"><span class="comment">// install platform patch function</span></span><br><span class="line">Vue.prototype.__patch__ = inBrowser ? patch : noop</span><br><span class="line"></span><br><span class="line"><span class="comment">// public mount method</span></span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? query(el) : <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">return</span> mountComponent(<span class="keyword">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure></p><p>在这个 JS 的上方我们可以找到 Vue 的来源：<code>import Vue from &#39;core/index&#39;</code>，剩下的都是对 Vue 这个对象的扩展，我们暂且不去分析，我们先来看一下关键代码实现的文件，在<code>src/core/index.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./instance/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; initGlobalAPI &#125; <span class="keyword">from</span> <span class="string">'./global-api/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; isServerRendering &#125; <span class="keyword">from</span> <span class="string">'core/util/env'</span></span><br><span class="line"><span class="keyword">import</span> &#123; FunctionalRenderContext &#125; <span class="keyword">from</span> <span class="string">'core/vdom/create-functional-component'</span></span><br><span class="line"></span><br><span class="line">initGlobalAPI(Vue)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$isServer'</span>, &#123;</span><br><span class="line">  get: isServerRendering</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$ssrContext'</span>, &#123;</span><br><span class="line">  get () &#123;</span><br><span class="line">    <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$vnode &amp;&amp; <span class="keyword">this</span>.$vnode.ssrContext</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// expose FunctionalRenderContext for ssr runtime helper installation</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue, <span class="string">'FunctionalRenderContext'</span>, &#123;</span><br><span class="line">  value: FunctionalRenderContext</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.version = <span class="string">'__VERSION__'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure></p><p>阿西吧，还没到！在这个 JS 的上方我们可以找到 Vue 的来源是<code>import Vue from &#39;./instance/index&#39;</code>，在<code>src/core/instance/index.js</code>中，不过这里有一点需要特别说明下：<code>initGlobalAPI(Vue)</code>用于初始化全局 Vue API（我们稍后介绍）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initMixin &#125; <span class="keyword">from</span> <span class="string">'./init'</span></span><br><span class="line"><span class="keyword">import</span> &#123; stateMixin &#125; <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderMixin &#125; <span class="keyword">from</span> <span class="string">'./render'</span></span><br><span class="line"><span class="keyword">import</span> &#123; eventsMixin &#125; <span class="keyword">from</span> <span class="string">'./events'</span></span><br><span class="line"><span class="keyword">import</span> &#123; lifecycleMixin &#125; <span class="keyword">from</span> <span class="string">'./lifecycle'</span></span><br><span class="line"><span class="keyword">import</span> &#123; warn &#125; <span class="keyword">from</span> <span class="string">'../util/index'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initMixin(Vue)</span><br><span class="line">stateMixin(Vue)</span><br><span class="line">eventsMixin(Vue)</span><br><span class="line">lifecycleMixin(Vue)</span><br><span class="line">renderMixin(Vue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><p>至此，我们终于看到了 Vue 的定义，可以看出它实际上就是一个用 Function 实现的类，我们只能通过 new Vue 去实例化它。接下来我们来分析一下上面遗留下来的问题。</p><h4 id="initGlobalAPI"><a href="#initGlobalAPI" class="headerlink" title="initGlobalAPI"></a>initGlobalAPI</h4><p>Vue.js 在整个初始化过程中，除了给它的原型 prototype 上扩展方法，还会给 Vue 这个对象本身扩展全局的静态方法，它的定义在<code>src/core/global-api/index.js</code>中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initGlobalAPI</span> (<span class="params">Vue: GlobalAPI</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// config</span></span><br><span class="line">  <span class="keyword">const</span> configDef = &#123;&#125;</span><br><span class="line">  configDef.get = <span class="function"><span class="params">()</span> =&gt;</span> config</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    configDef.set = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">'Do not replace the Vue.config object, set individual fields instead.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue, <span class="string">'config'</span>, configDef)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// exposed util methods.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> these are not considered part of the public API - avoid relying on</span></span><br><span class="line">  <span class="comment">// them unless you are aware of the risk.</span></span><br><span class="line">  Vue.util = &#123;</span><br><span class="line">    warn,</span><br><span class="line">    extend,</span><br><span class="line">    mergeOptions,</span><br><span class="line">    defineReactive</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vue.set = set</span><br><span class="line">  Vue.delete = del</span><br><span class="line">  Vue.nextTick = nextTick</span><br><span class="line"></span><br><span class="line">  Vue.options = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  ASSET_TYPES.forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">    Vue.options[type + <span class="string">'s'</span>] = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// this is used to identify the "base" constructor to extend all plain-object</span></span><br><span class="line">  <span class="comment">// components with in Weex's multi-instance scenarios.</span></span><br><span class="line">  Vue.options._base = Vue</span><br><span class="line"></span><br><span class="line">  extend(Vue.options.components, builtInComponents)</span><br><span class="line"></span><br><span class="line">  initUse(Vue)</span><br><span class="line">  initMixin(Vue)</span><br><span class="line">  initExtend(Vue)</span><br><span class="line">  initAssetRegisters(Vue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是对 Vue 扩展的一些全局方法，有一点要注意的是，Vue.util 暴露的方法最好不要依赖，因为它可能经常会发生变化且不稳定的。</p><h4 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h4><p>那么至此，我们应该对 Vue 是什么有一个直观的认识，它本质上就是一个用 Function 实现的 Class，然后在它的原型 prototype 以及它本身都扩展了一系列的方法和属性，至于 Vue 能做什么，它是怎么做的，我们会在后面的章节一一剖析它们。</p><h2 id="本文不断更新中"><a href="#本文不断更新中" class="headerlink" title="本文不断更新中"></a>本文不断更新中</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;版本：v2.5.17-beta.0&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着这几年前端的快速发展，页面中需要实现的功能越来越复杂，DOM
      
    
    </summary>
    
      <category term="vue" scheme="http://sosout.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://sosout.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>React 源码全方位剖析</title>
    <link href="http://sosout.com/2018/08/12/react-source-analysis.html"/>
    <id>http://sosout.com/2018/08/12/react-source-analysis.html</id>
    <published>2018-08-12T14:10:52.000Z</published>
    <updated>2018-09-29T15:48:33.625Z</updated>
    
    <content type="html"><![CDATA[<p><code>版本：v16.5.2</code></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当时在各种前端框架或库充斥市场的情况下，出现了大量优秀的框架，比如 Backbone、Angular、Knockout、Ember 这些框架大都采用了 MV* 的理念，把数据与视图分离。而就在这样纷繁复杂的时期，React 诞生于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。所谓知其然还要知其所以然，加上 React 真是一天一改，如果现在不看，以后也真的很难看懂了。目前社区有很多 React 的源码剖析文章，趁着最近工作不忙，我打算分享一下 React 源码，并自形成一个系列，欢迎一起交流。在开始之前我们先做以下几点约定：</p><p><strong>第一：</strong>目前分析的版本是 React 的最新版本 16.5.2；<br><strong>第二：</strong>React web应用是最常见的，也是最易于理解的，所以该源码均围绕 React web应用剖析；<br><strong>第三：</strong>我尽可能站在我自己的角度去剖析，当然我会借鉴社区比较优秀的文章，同时面对大家的拍砖，我无条件接受，也很乐意与大家一起交换意见，努力写好该 React 源码系列；<br><strong>第四：</strong>如果有幸您读到该 React 源码系列，感觉写得还行，还望收藏、分享或打赏。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>我们从这一章开始即将分析 React 的源码，在分析源码之前我们很有必要介绍一些前置知识如flow、Rollup等。除此之外，我们最好已经用过 React 做过实际项目，对 React 的思想有了一定的了解，对绝大部分的 API 都已经有使用，同时，我们应该有一定的HTML、CSS、JavaScript、ES6+、node &amp; npm等功底，并对代码调试有一定的了解。</p><p>如果具备了以上条件，并且对 React 的实现原理很感兴趣，那么就可以开始 React 的底层学习了，对它的实现细节一探究竟。</p><h3 id="Flow-JavaScript静态类型检查工具"><a href="#Flow-JavaScript静态类型检查工具" class="headerlink" title="Flow - JavaScript静态类型检查工具"></a>Flow - JavaScript静态类型检查工具</h3><p><a href="https://flow.org/" target="_blank" rel="noopener">Flow</a> 是 facebook 出品的 JavaScript 静态类型检查工具，它与 Typescript 不同的是，它可以部分引入，不需要完全重构整个项目，所以对于一个已有一定规模的项目来说，迁移成本更小，也更加可行。除此之外，Flow 可以提供实时增量的反馈，通过运行 Flow server 不需要在每次更改项目的时候完全从头运行类型检查，提高运行效率。可以简单总结为：<strong>对于新项目，可以考虑使用 TypeScript 或者 Flow，对于已有一定规模的项目则建议使用 Flow 进行较小成本的逐步迁移来引入类型检查。React 的源码利用了 Flow 做了静态类型检查，所以了解 Flow 有助于我们阅读源码。</strong></p><h4 id="为什么用静态类型检查工具-Flow"><a href="#为什么用静态类型检查工具-Flow" class="headerlink" title="为什么用静态类型检查工具 Flow"></a>为什么用静态类型检查工具 Flow</h4><p>JavaScript 是动态类型语言，它的灵活性有目共睹，但是过于灵活的副作用就是很容易就写出非常隐蔽的隐患代码，在编译期甚至运行时看上去都不会报错，但是可能会发生各种各样奇怪的和难以解决的bug。</p><p>类型检查是当前动态类型语言的发展趋势，所谓类型检查，就是在编译期尽早发现（由类型错误引起的）bug，又不影响代码运行（不需要运行时动态检查类型），使编写 JavaScript 具有和编写 Java 等强类型语言相近的体验。</p><p>项目越复杂就越需要通过工具的手段来保证项目的维护性和增强代码的可读性。React 源码在 ES2015 的基础上，除了用 ESLint 保证代码风格之外，也引入了 Flow 做静态类型检查。之所以选择 Flow，<strong>最根本原因应该和 Vue 一样，还是在于工程上成本和收益的考量。</strong> 大致体现在以下几点：</p><p><strong>第一点：</strong>使用 Flow 可以一个一个文件地迁移，如果使用 TypeScript，则需要全部替换，成本极高，短期内并不现实；<br><strong>第二点：</strong>Babel 和 ESLint 都有对应的 Flow 插件以支持语法，可以完全沿用现有的构建配置，非常小成本的改动就可以拥有静态类型检查的能力；<br><strong>第三点：</strong>更贴近 ES 规范。除了 Flow 的类型声明之外，其他都是标准的 ES。万一哪天不想用 Flow 了，用<code>babel-plugin-transform-flow-strip-types</code>转一下，就得到符合规范的 ES；<br><strong>第四点：</strong>在需要的地方保留 ES 的灵活性，并且对于生成的代码尺寸有更好的控制力 (rollup / 自定义 babel 插件）。</p><h4 id="如何用静态类型检查工具-Flow"><a href="#如何用静态类型检查工具-Flow" class="headerlink" title="如何用静态类型检查工具 Flow"></a>如何用静态类型检查工具 Flow</h4><p>在这里我们就简单说一说 Flow 的用法，其他用法可以参考<a href="https://flow.org/" target="_blank" rel="noopener">Flow官网</a>（可能需要 VPN，非常不稳定），有时间我会详细写一篇 Flow 使用指南。</p><p>Flow 仅仅是一个用于检查的工具，安装使用都很方便，使用时注意以下3点即可：</p><p>1.将 Flow 安装到我们的项目中。<br>2.确保编译之后的代码移除了 Flow 相关的语法。<br>3.在需要检查的地方增加了 Flow 相关的类型注解。</p><p><strong>第一点：将Flow增加到我们的项目中</strong></p><p>安装最新版本的 Flow：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev flow-bin</span><br></pre></td></tr></table></figure></p><p>安装完成之后在 package.json 文件中增加执行脚本：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "your-script-name": "flow",</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后初始化 Flow：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run flow init</span><br></pre></td></tr></table></figure><p>执行完成后，Flow 会在终端输出以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; yourProjectName@1.0.0 flow /yourProjectPath</span><br><span class="line">&gt; flow &quot;init&quot;</span><br></pre></td></tr></table></figure><p>然后在根目录下生成一个名为 .flowconfig 的文件，打开之后是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ignore]</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line"></span><br><span class="line">[libs]</span><br><span class="line"></span><br><span class="line">[lints]</span><br><span class="line"></span><br><span class="line">[options]</span><br><span class="line"></span><br><span class="line">[strict]</span><br></pre></td></tr></table></figure><p>基本上，配置文件没有什么特殊需求是不用去配置的，Flow 默认涵盖了当前目录之后的所有文件。[include] 用于引入项目之外的文件。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line"></span><br><span class="line">../otherProject/a.js</span><br><span class="line"></span><br><span class="line">[libs]</span><br></pre></td></tr></table></figure><p>它会将和当前项目平级的 otherProject/a.js 文件纳入进来。详细配置文件请看<a href="https://flow.org/en/docs/config/" target="_blank" rel="noopener">官网</a>。</p><p><strong>第二点：编译之后的代码移除 Flow 相关的语法</strong></p><p>Flow 在 JavaScript 语法的基础上使用了一些注解（annotation）进行了扩展。因此浏览器无法正确的解读这些 Flow 相关的语法，我们必须在编译之后的代码中（最终发布的代码）将增加的 Flow 注解移除掉。具体方法需要看我们使用了什么样的编译工具。下面将说明一些 React 开发常用的编译工具：</p><p><strong>方式一：</strong>create-react-app</p><p>如果我们的项目是使用<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a>直接创建的，那么移除 Flow 语法的事项就不用操心了，create-react-app 已经帮我们搞定了这个事。</p><p><strong>方式二：</strong>Babel</p><p>如果使用 Babel 我们需要安装一个 Babel 对于 Flow 的 preset：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev babel-preset-flow</span><br></pre></td></tr></table></figure></p><p>然后，我们需要在项目根目录<a href="http://babeljs.io/docs/en/babelrc/" target="_blank" rel="noopener">Babel 的配置文件 .babelrc</a>中添加一个 Flow 相关的 preset：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"flow"</span>,</span><br><span class="line">    //other config</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式三：</strong>flow-remove-types</p><p>如果我们既没有使用 create-react-app 也没使用 Babel 作为语法糖编译器，那么可以使用 <a href="https://github.com/flowtype/flow-remove-types" target="_blank" rel="noopener">flow-remove-types</a> 这个工具在发布之前移除 Flow 代码。</p><p><strong>第三点：在需要检查的地方增加 Flow 相关的类型注解</strong></p><p>如果我们了解 C++/C# 的元编程或者 Java 的 Annotation，那么理解 Flow 的 Annotation 就会非常轻松。大概就是在文件、方法、代码块之前增加一个注解（Annotation）用来告知 Flow 的执行行为。</p><p>首先，Flow 只检查包含<code>// @flow</code>注解的文件，所以如果需要检查，我们需要这样编写我们的文件，首先我们写一个正确的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">22</span>, <span class="number">11</span>)</span><br></pre></td></tr></table></figure><p>运行 Flow 终端会打印出以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; yourProjectName@1.0.0 flow /yourProjectPath</span><br><span class="line">&gt; flow &quot;init&quot;</span><br><span class="line"></span><br><span class="line">Found 0 errors</span><br></pre></td></tr></table></figure><p>承接上面代码，我们把代码修改成带有检查错误的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="string">"Hello"</span>, <span class="number">11</span>)</span><br></pre></td></tr></table></figure><p>运行 Flow 终端会打印出以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; yourProjectName@1.0.0 flow /yourProjectPath</span><br><span class="line">&gt; flow &quot;init&quot;</span><br><span class="line"></span><br><span class="line">Error ------------------------------------------------------------------------------------- src/platforms/web/mnr.js:8:5</span><br><span class="line"></span><br><span class="line">Cannot call `add` with `&quot;Hello&quot;` bound to `x` because string [1] is incompatible with number [2].</span><br><span class="line"></span><br><span class="line">   src/platforms/web/mnr.js:8:5</span><br><span class="line">   8| add(&quot;Hello&quot;, 11)</span><br><span class="line">          ^^^^^^^ [1]</span><br><span class="line"></span><br><span class="line">References:</span><br><span class="line">   src/platforms/web/mnr.js:4:17</span><br><span class="line">   4| function add(x: number, y: number): number &#123;</span><br><span class="line">                      ^^^^^^ [2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Found 1 error</span><br></pre></td></tr></table></figure><p>到这里，Flow 已经算是安装成功了，接下来的事是要增加各种注解以加强类型限定或者参数检测。之后的内容将简要介绍 flow 的类型检查方式。</p><h4 id="Flow-的类型检查方式"><a href="#Flow-的类型检查方式" class="headerlink" title="Flow 的类型检查方式"></a>Flow 的类型检查方式</h4><p>现在我们就说说 Flow 常用的2种类型检查方式：<br><strong>类型推断</strong>：通过变量的执行上下文来推断出变量类型，然后根据这些推断来检查类型。<br><strong>类型注释</strong>：事先注释好我们期望的类型，Flow 会基于这些注释来检查。</p><p><strong>第一种方式：类型推断</strong></p><p>此方式不需要编写任何代码即可进行类型检查，最小化开发者的工作量，它也不会强制我们改变开发习惯，因为它会自动推断出变量的类型，这就是所谓的类型推断，Flow 最重要的特性之一。</p><p>通过一个简单例子说明一下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">split</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">split(<span class="number">11</span>)</span><br></pre></td></tr></table></figure></p><p>Flow 检查上述代码后会报错，因为函数 split 期待的参数是字符串，而我们输入的是数字。</p><p><strong>第二种方式：类型注释</strong></p><p>如上所述，类型推断是 Flow 最有用的特性之一，不需要编写任何代码就能进行类型检查。但在某些特定的场景下，使用类型注释可以提供更好更明确的检查依据。</p><p>看看以下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="string">'Hello'</span>, <span class="number">11</span>)</span><br></pre></td></tr></table></figure></p><p>Flow 根据类型推断检查上述代码时检查不出任何错误，因为从语法层面考虑， + 既可以用在字符串上，也可以用在数字上，我们并没有明确指出 add() 的参数必须为数字。在这种情况下，我们可以借助类型注释来指明期望的类型。类型注释是以冒号 : 开头，可以在函数参数，返回值，变量声明中使用。如果我们在上段代码中使用类型注释，就会变成如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="string">'Hello'</span>, <span class="number">11</span>)</span><br></pre></td></tr></table></figure></p><p>现在 Flow 就能检查出错误，因为函数参数的期待类型为数字，而我们提供了字符串。上面的例子是针对函数的类型注释。接下来我们来看看 Flow 能支持的一些常见的类型注释:</p><p><strong>第一种：</strong>数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">arr.push(<span class="string">'Hello'</span>)</span><br></pre></td></tr></table></figure></p><p>数组类型注释的格式是 Array<t>，T 表示数组中每项的数据类型。在上述代码中，arr 是每项均为数字的数组。如果我们给这个数组添加了一个字符串，Flow 能检查出错误。</t></p><p><strong>第二种：</strong>类和对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  x: string;           <span class="comment">// x 是字符串</span></span><br><span class="line">  y: string | number;  <span class="comment">// y 可以是字符串或者数字</span></span><br><span class="line">  z: boolean;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(x: string, y: string | number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x</span><br><span class="line">    <span class="keyword">this</span>.y = y</span><br><span class="line">    <span class="keyword">this</span>.z = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar: Bar = <span class="keyword">new</span> Bar(<span class="string">'hello'</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj: &#123; <span class="attr">a</span>: string, <span class="attr">b</span>: number, <span class="attr">c</span>: <span class="built_in">Array</span>&lt;string&gt;, <span class="attr">d</span>: Bar &#125; = &#123;</span><br><span class="line">  a: <span class="string">'hello'</span>,</span><br><span class="line">  b: <span class="number">11</span>,</span><br><span class="line">  c: [<span class="string">'hello'</span>, <span class="string">'world'</span>],</span><br><span class="line">  d: <span class="keyword">new</span> Bar(<span class="string">'hello'</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的类型注释格式如上，可以对类自身的属性做类型检查，也可以对构造函数的参数做类型检查。这里需要注意的是：属性 y 的类型中间用 | 做间隔，表示 y 的类型即可以是字符串也可以是数字。</p><p>对象的注释类型类似于类，需要指定对象属性的类型。</p><p><strong>第三种：</strong>Null/undefined</p><p>Flow 会检查所有的 JavaScript 基础类型—— Boolean、String、Number、null、undefined（在Flow中用void代替）。除此之外还提供了一些操作符号，例如 text : ?string，它表示参数存在“没有值”的情况，除了传递 string 类型之外，还可以是 null 或 undefined。需要特别注意的是，这里的没有值和 JavaScript 的表达式的“非”是两个概念，Flow 的“没有值”只有 null、void（undefined），而 JavaScript 表达式的“非”包含：null、undefined、0、false。</p><p>如果想任意类型 T 可以为 null 或者 undefined，只需写成如下 ?T 的格式即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo: ?string = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>此时，foo 可以为字符串，也可以为 null。</p><h4 id="Flow-在-React-源码中的应用"><a href="#Flow-在-React-源码中的应用" class="headerlink" title="Flow 在 React 源码中的应用"></a>Flow 在 React 源码中的应用</h4><p>Flow 是 Facebook 开源的静态代码检查工具，它的作用就是在运行代码之前对 React 组件以及 Jsx 语法进行静态代码的检查以发现一些可能存在的问题。在 React v16 Fiber中的部分 TypeScript 代码只是类型声明文件和测试代码，也就是为了方便利用 TypeScript 写应用的开发者使用 React，给了接口定义和测试样例而已。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>React 重构告诉我们，项目重构要么依赖规范，要么就得自己有绝对控制权，同时还要考量开发成本、项目收益以及整个团队的技术水平，并不是一味的什么火就用什么。这一节主要对 Flow 的认识，有助于我们后续阅读 React 的源码，这种静态类型检查的方式非常有利于大型项目源码的开发和维护。</p><h3 id="Rollup-另一个前端模块化的打包工具"><a href="#Rollup-另一个前端模块化的打包工具" class="headerlink" title="Rollup - 另一个前端模块化的打包工具"></a>Rollup - 另一个前端模块化的打包工具</h3><p>Rollup 是前端模块化的一个打包工具，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。简单地说，<strong>它可以从一个入口文件开始，将所有使用的模块根据命令或者根据 Rollup 配置文件打包成一个目标文件，并且 Rollup 会自动过滤掉那些没有被使用过的函数或变量，从而使代码最小化，如果想使用直接导入这一个目标文件即可，因此 Rollup 极其适合构建一个工具库。</strong></p><p>这里提到 Rollup 的两个特别重要的特性，<strong>第一个就是它使用了 ES2015 的模板标准，这意味着我们可以直接使用 import 和 export 而不需要引入 babel。另一个重要特性叫做 tree-shaking，这个特性可以帮助我们将无用代码（即没有使用的代码）从最终的目标文件中过滤掉。</strong>举个简单的例子，我们在 foo.js 文件定义了 f1 和 f2 两个方法，然后在入口文件 index.js 只引入了 foo.js 文件中的 f1 方法，那么在最后打包 index.js 文件时，Rollup 就不会将 f2 方法打包到最终文件中（这个特性是基于 ES6 模块的静态分析的，也就是说，只有 export 而没有 import 的变量是不会被打包到最终代码中的）。</p><h4 id="为什么用前端模块化的打包工具-Rollup"><a href="#为什么用前端模块化的打包工具-Rollup" class="headerlink" title="为什么用前端模块化的打包工具 Rollup"></a>为什么用前端模块化的打包工具 Rollup</h4><p>之前的构建系统是基于 Gulp/Grunt+Browserify 手搓的一套工具，后来在扩展方面受限于工具，例如：</p><p>Node 环境下性能不好：频繁的<code>process.env.NODE_ENV</code>访问拖慢了<code>SSR 性能</code>，但又没办法从类库角度解决，因为<code>Uglify</code>依靠这个去除无用代码，所以<code>React SSR</code>性能最佳实践一般都有一条“<code>重新打包 React，在构建时去掉 process.env.NODE_ENV</code>”.</p><p>丢弃了过于复杂（overly-complicated）的自定义构建工具，改用更合适的 Rollup：</p><blockquote><p>It solves one problem well: how to combine multiple modules into a flat file with minimal junk code in between.</p></blockquote><p>无论 Haste -&gt; ES Module 还是 Gulp/Grunt+Browserify -&gt; Rollup 的切换都是从非标准的定制化方案切换到标准的开放的方案，应该在“手搓”方面吸取教训，为什么业界规范的东西在我们的场景不适用，非要自己造吗？</p><h4 id="如何用前端模块化的打包工具-Rollup"><a href="#如何用前端模块化的打包工具-Rollup" class="headerlink" title="如何用前端模块化的打包工具 Rollup"></a>如何用前端模块化的打包工具 Rollup</h4><p>关于如何使用前端模块化的打包工具 Rollup，这里就不做过多介绍了，可参考我之前写的一篇文章：<a href="/2018/08/04/rollup-tutorial.html">Rollup使用指南</a>，更详细的使用文档可参考：<a href="https://www.rollupjs.com/guide/zh" target="_blank" rel="noopener">官网</a>。</p><h4 id="Webpack-和-Rollup-有什么不同"><a href="#Webpack-和-Rollup-有什么不同" class="headerlink" title="Webpack 和 Rollup 有什么不同"></a>Webpack 和 Rollup 有什么不同</h4><p>2017年4月初，Facebook 将一个巨大的 pull 请求合并到了 React 主分支(master)中，将其现有的构建流程替换为基于 Rollup，这一举动促使一些人产生很大的疑惑“React 为什么选择 Rollup 而抛弃 webpack”，难道webpack要跌下神坛了？</p><p>Webpack 是目前使用最为火热的打包工具，没有之一，每月有数百万的下载量，为成千上万的网站和应用提供支持。相比之下，Rollup 并不起眼。但 React 并不孤单 – Vue，Ember，Preact，D3，Three.js，Moment 以及其他许多知名的库也使用 Rollup 。世界到底怎么了？为什么我们不能只有一个大众认可的 JavaScript 模块化打包工具？</p><p>Webpack 始于2012年，由 Tobias Koppers 发起，用于解决当时现有工具未解决的的一个难题：<strong>构建复杂的单页应用程序(SPA)。</strong>特别是 webpack 的两个特性改变了一切：</p><p><strong>第一个特性：</strong>代码拆分(Code Splitting)</p><p>代码拆分也就是说我们可以将应用程序分解成可管理的代码块，可以按需加载，这意味着用户可以快速获取网站内容，而不必等到整个应用程序下载和解析完成。</p><p><strong>第二个特性：</strong>各式各样的加载器（loader）</p><p>不管是图像，css，还是 html ，在 Webpack 看来一切都可作为模块，然后通过不同的加载器 loader 来加载它们。</p><p>ES6 发布之后，其中引入的模块机制使得静态分析成为了可能，于是 Rollup 发布了：其中 Rollup 有两个特别重要的特性，第一个就是它利用 ES2015 巧妙的模块设计，尽可能高效的构建出能够直接被其他 Javascript 库的。另一个重要特性叫做 tree-shaking，这个特性可以帮助我们将无用代码（即没有使用的代码）从最终的目标文件中过滤掉。</p><p>紧接着 Webpack2 发布，仿照 Rollup 增加了 tree-shaking。 在之后， Webpack3 发布，仿照 Rollup 又增加了 Scope Hoisting。在在之后， Parcel 发布了一个快速、零配置的打包工具。于是，Webpack4 仿照 Parcel 发布了。</p><p>说了这么多，工作中我们到底该用哪个工具？</p><p>对于应用使用 webpack，对于类库使用 Rollup。如果我们需要代码拆分(Code Splitting)，或者我们有很多静态资源需要处理，再或者我们构建的项目需要引入很多 CommonJS 模块的依赖，那么 webpack 是个很不错的选择。如果您的代码库是基于 ES2015 模块的，而且希望我们写的代码能够被其他人直接使用，我们需要的打包工具可能是 Rollup。</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>无论 Haste -&gt; ES Module 还是 Gulp/Grunt+Browserify -&gt; Rollup 的切换都是从非标准的定制化方案切换到标准的开放的方案，可以看出 React 团队也在积极拥抱标准方案并非一味造轮子。其实 Vue.js 1.0.10 就已经使用 Rollup 了，而 React v16.0 改用 Rollup 肯定也有借鉴之意，因此，好技术都是在借鉴的大背景下诞生的（Vue 就是一个典型的例子）。在这里通过对 Rollup 的认识，有助于我们了解 React 的构建以及源码目录结构。</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>上一章我们简单介绍了下flow、Rollup等前置知识，有兴趣的可以有针对性的学习它们。这一章我们真正的开始分析 React 源码，激动不激动？该章主要包括三小节：项目目录、源码构建、源码入口。</p><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>我们主要剖析的 React 源码目录在 packages 下，在这里我们看看详细目录结构，混个眼熟：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">├── build --------------------------------------- 构建后的输出目录</span><br><span class="line">├── fixtures ------------------------------------ React 开发的测试用例</span><br><span class="line">├── packages ------------------------------------ 源码目录，我们主要剖析目录</span><br><span class="line">│   ├── create-subscription --------------------- 在组件里订阅额外数据的工具</span><br><span class="line">│   ├── events ---------------------------------- 事件处理 </span><br><span class="line">│   ├── interaction-tracking -------------------- 跟踪交互事件</span><br><span class="line">│   ├── react ----------------------------------- 核心代码</span><br><span class="line">│   ├── react-art ------------------------------- 矢量图形库</span><br><span class="line">│   ├── react-dom ------------------------------- DOM 渲染相关</span><br><span class="line">│   ├── react-is -------------------------------- React 元素类型相关</span><br><span class="line">│   ├── react-native-renderer ------------------- react-native 渲染相关 </span><br><span class="line">│   ├── react-noop-renderer --------------------- Fiber 测试相关 </span><br><span class="line">│   ├── react-reconciler ------------------------ React 调制器</span><br><span class="line">│   ├── react-scheduler ------------------------- 规划 React 初始化，更新等等</span><br><span class="line">│   ├── react-test-renderer --------------------- 实验性的 React 渲染器</span><br><span class="line">│   ├── shared ---------------------------------- 通用代码</span><br><span class="line">│   ├── simple-cache-provider ------------------- 为 React 应用提供缓存</span><br><span class="line">│   ├── server ---------------------------------- 服务端渲染</span><br><span class="line">│   ├── sfc ------------------------------------- .vue 文件解析</span><br><span class="line">│   ├── shared ---------------------------------- 整个项目通用代码</span><br><span class="line">├── scripts ------------------------------------- 公共的lint，build，test和release等相关的文件</span><br><span class="line">│   ├── eslint ---------------------------------- 语法规则和代码风格</span><br><span class="line">│   ├── flow ------------------------------------ Flow 类型声明</span><br><span class="line">│   ├── git ------------------------------------- git钩子的目录</span><br><span class="line">│   ├── jest ------------------------------------ JavaScript 测试目录</span><br><span class="line">│   ├── release --------------------------------- 自动发布新版本脚本</span><br><span class="line">│   ├── rollup ---------------------------------- rollup 构建目录</span><br><span class="line">├── .babelrc ------------------------------------ babel 配置文件</span><br><span class="line">├── .editorconfig ------------------------------- 编辑器语法规范配置</span><br><span class="line">├── .eslintignore ------------------------------- eslint 忽略配置 </span><br><span class="line">├── .eslintrc ----------------------------------- eslint 配置文件</span><br><span class="line">├── .gitattributes ------------------------------ 给 attributes 路径名的简单文本文件</span><br><span class="line">├── .gitignore ---------------------------------- git 忽略配置</span><br><span class="line">├── .mailmap ------------------------------------ 邮件列表档案 </span><br><span class="line">├── .nvmrc -------------------------------------- nvm 配置文件</span><br><span class="line">├── .prettierrc.js ------------------------------ prettierrc 配置文件</span><br><span class="line">├── .watchmanconfig ----------------------------- watchman 配置文件</span><br><span class="line">├── appveyor.yml -------------------------------- GitHub 托管项目的自动化集成</span><br><span class="line">├── AUTHORS ------------------------------------- 开发者列表档案</span><br><span class="line">├── CHANGELOG.md -------------------------------- 更新日志</span><br><span class="line">├── CODE_OF_CONDUCT.md -------------------------- Code <span class="keyword">of</span> Conduct</span><br><span class="line">├── CONTRIBUTING.md ----------------------------- Contributing to React</span><br><span class="line">├── dangerfile.js ------------------------------- 提高 Code Review 体验</span><br><span class="line">├── netlify.toml -------------------------------- 持续集成静态网站</span><br><span class="line">├── package-lock.json --------------------------- npm 加锁文件</span><br><span class="line">├── package.json -------------------------------- 项目管理文件</span><br><span class="line">├── README.md ----------------------------------- 项目文档</span><br><span class="line">├── yarn.lock ----------------------------------- yarn 加锁文件</span><br></pre></td></tr></table></figure><p>一眼望去，上面的目录结构是不是感觉很是奇怪？<br><strong>根目录下没有 src 之类的源码目录，也没有 test 这类的存放单元测试的目录，只有一个 packages 目录。这个 repository 其实是一个用 Lerna 管理的 monorepo。实际上，我们往npm上发布的几个package都来自于同一个codebase，包括react、react-dom、react-is……</strong></p><h4 id="monorepo"><a href="#monorepo" class="headerlink" title="monorepo"></a>monorepo</h4><p>通常，当我们的项目不断的迭代更新的时候，我们会根据业务或者是功能又或者是方便复用某些代码模块，把一个大的 codebase 拆成一些独立的 package 或 module，再将这些功能独立的 package 分别放入单独的 repository 中进行维护，此方式可以简单地称为<code>multiple repositories</code>。而 monorepo 则是一种相反的做法，它提倡将所有的相关 package 都放入一个 repository 来管理。</p><p><strong>monorepo VS multirepo（集中管理 vs 多元化）</strong><br>首先这两者都是管理组织代码的方式，顾名思义 monorepo 就是把所有的相关项目都放在一个仓库中（比如 React, Angular, Babel, Google…），multirepo 则是按模块分为多个仓库。</p><p><strong>multirepo：</strong>这种管理方式可以让每个子团队拥有自己的 repo，我们可以用自己擅长的工具、workflow 等等。多元化能促使各个团队尽可能的提升自己的效率。但代价也在于会增加很多沟通成本，如果我们项目用到的库中发现了一个 bug，就必须到目标库里修复它、打包、发版本，然后再回到我们的库继续工作。在不同的仓库间，我们不仅需要处理不同的代码、工具，甚至是不同的工作流程。甚至我们只能去问维护这个仓库的人，能不能为我们做出改变，然后等着他们去解决。</p><p><strong>monorepo：</strong>这种管理方式可以让不同的团队走自己的路，并不见得能提高生产力。虽然有些团队可能会找到自己最佳的工作方式，但我们的收益也会被其他团队不那么好的工作方式所抵消。相反，严格统一的管理更能提升效率，团队中的任何人都可以（并且应该也被鼓励）修改任何东西（因为修改造成的结果马上就能展现出来，）。虽然把所有的鸡蛋都放进了一个篮子里，但我们也可以更小心的照顾这个篮子。</p><p>如果我们团队选择 monorepo，那主要的挑战自然是随着项目的发展，其会变得非常庞大（因为没有根据模块或功能拆分成不同 repo）。因此会需要很多的工具来应对这样的挑战。虽然我们可能认为这是一个很糟糕的做法，但是现在这样做的开源项目和公司并不算少。</p><p><strong>谁在使用 monorepo</strong><br>Babel 是一个 Javascript 编译器，它可以将浏览器环境尚未支持的 Javascript 变为向下兼容的版本。因此，我们可以毫无顾虑地使用较新的 Javascript 语法和特性来提升编程的体验和效率。</p><p>其中 Babel 官方维护了众多独立的 plugin、polyfill、preset，但并未按照传统，将这些独立的模块分别放入不同的 repo。而是遵循了 monorepo 的方式，将它们放入一个相同的 repo 中。因为 Babel 认为，有效的组织一个多模块，多 repo 的项目，就像是尝试教一个刚出生的婴儿骑自行车一样。</p><blockquote><p>Juggling a multimodule project over multiple repos is like trying to teach a newborn baby how to ride a bike.</p></blockquote><p>所以，Babel 采用了 lerna 来管理自己的 monorepo。</p><p>无独有偶，Cycle.js（一个函数式和响应式 Javascript 框架）的作者 André Staltz 也摒弃了一个 package 一个 repo 的做法，将 Cycle.js 的众多 package 迁移到了一个 monorepo 中。他也认为，管理多个 repo 并不是件有意思的事情。多个  repo 意味着有多个地方需要处理 issue，保持多个 repo 的 issue 标签统一，管理很多 PR 和 git 钩子等等。</p><blockquote><p>Managing multiple repos isn’t that fun. Multiple repos means multiple places to manage issues, manage issue labels (and making them consistent across repos), manage PRs, git hooks for conventions, etc.</p></blockquote><p>André Staltz 并没有使用 lerna 之类的工具来实现自己的 monorepo，他自己通过 Bash sh 实现了类似于 Lerna 管理的 monorepo。</p><p>除了 Babel 和 Cycle.js 以外，React、Angular、Meteor、Ember，还包括国内饿了么的 mint-ui 等等开源项目，以及一些公司如 Google、Facebook、BBC 等也都采用了 monorepo。它到底有什么优点，这么多公司，这么多库纷纷加入。</p><p><strong>优点</strong><br><strong>一：</strong>单个的 lint，build，test 和 release 流程；<br><strong>二：</strong>统一的地方处理issue；<br><strong>三：</strong>不用到处去找自己项目的repo；<br><strong>四：</strong>方便管理版本和dependencies；<br><strong>五：</strong>跨项目的操作和修改变得容易；<br><strong>六：</strong>方便生成总的changelog。</p><p><strong>缺点</strong><br><strong>一：</strong>repo 的体积变得很大；<br><strong>二：</strong>安全问题，如何管理权限。</p><p>关于 monorepo 我们暂且就说这么多，有时间我会单独写一篇 monorepo 文章。</p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>从 React 的目录设计可以看出，React 团队在项目管理比较倾向 monorepo 方式，看来这种严格统一的管理方式真的提升效率。无论 monorepo 方式，还是 multirepo 方式都是为了团队效率，因此建议还是根据团队的情况选定一种方式，尽可能的扬长避短。</p><h3 id="源码构建"><a href="#源码构建" class="headerlink" title="源码构建"></a>源码构建</h3><p>React v16.0 之前源码是基于<code>Gulp/Grunt+Browserify</code>构建的，而 React v16.0 是基于<code>Rollup</code>构建的，它的构建相关配置都在<code>scripts/rollup</code>目录下。</p><h4 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h4><p>通常基于 NPM 托管的项目都会有一个 package.json 文件，实际上它是项目的描述文件，它的内容是一个标准的 JSON 对象。我们通常会配置 script 字段作为 NPM 的构建命令，React 源码构建配置如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // ...</span><br><span class="line">    "scripts": &#123;</span><br><span class="line">        "build": "npm run version-check &amp;&amp; node ./scripts/rollup/build.js",</span><br><span class="line">        // ...</span><br><span class="line">        "version-check": "node ./scripts/tasks/version-check.js"</span><br><span class="line">    &#125;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>build命令</code>，实际上先执行<code>version-check</code>命令，然后执行<code>node ./scripts/rollup/build.js</code>进行打包，其中<code>version-check</code>命令实际上是执行<code>node ./scripts/tasks/version-check.js</code>，用于检查即将构建的<code>bundle版本</code>是否完全匹配，接下来我们就来看看它实际上是如何构建的。</p><h4 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h4><p>我们首先打开<code>build</code>命令对应的第一个 JS 文件，在<code>scripts/tasks/version-check.js</code>中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reactVersion = <span class="built_in">require</span>(<span class="string">'../../package.json'</span>).version;</span><br><span class="line"><span class="keyword">const</span> versions = &#123;</span><br><span class="line">  <span class="string">'packages/react/package.json'</span>: <span class="built_in">require</span>(<span class="string">'../../packages/react/package.json'</span>)</span><br><span class="line">    .version,</span><br><span class="line">  <span class="string">'packages/react-dom/package.json'</span>: <span class="built_in">require</span>(<span class="string">'../../packages/react-dom/package.json'</span>)</span><br><span class="line">    .version,</span><br><span class="line">  <span class="string">'packages/react-test-renderer/package.json'</span>: <span class="built_in">require</span>(<span class="string">'../../packages/react-test-renderer/package.json'</span>)</span><br><span class="line">    .version,</span><br><span class="line">  <span class="string">'packages/shared/ReactVersion.js'</span>: <span class="built_in">require</span>(<span class="string">'../../packages/shared/ReactVersion'</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> allVersionsMatch = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">Object</span>.keys(versions).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> version = versions[name];</span><br><span class="line">  <span class="keyword">if</span> (version !== reactVersion) &#123;</span><br><span class="line">    allVersionsMatch = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">'%s version does not match package.json. Expected %s, saw %s.'</span>,</span><br><span class="line">      name,</span><br><span class="line">      reactVersion,</span><br><span class="line">      version</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!allVersionsMatch) &#123;</span><br><span class="line">  process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码逻辑非常简单，先获取<code>即将发布的以及源码核心bundle</code>的管理文件，再比对<code>即将发布的和源码核心bundle</code>的版本，如果不相同，给出对应的提示并结束构建，这样就保证了构建出来的 bundle 版本统一。</p><p>接下来我们打开<code>build</code>命令对应的第二个 JS 文件，在<code>scripts/rollup/build.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">buildEverything</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> asyncRimRaf(<span class="string">'build'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Run them serially for better console output</span></span><br><span class="line">  <span class="comment">// and to avoid any potential race conditions.</span></span><br><span class="line">  <span class="comment">// eslint-disable-next-line no-for-of-loops/no-for-of-loops</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> bundle <span class="keyword">of</span> Bundles.bundles) &#123;</span><br><span class="line">    <span class="keyword">await</span> createBundle(bundle, UMD_DEV);</span><br><span class="line">    <span class="keyword">await</span> createBundle(bundle, UMD_PROD);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buildEverything();</span><br></pre></td></tr></table></figure></p><p>这里通过调用<code>buildEverything</code>函数开启构建过程，<code>asyncRimRaf</code>用于删除上一次打包生成的包文件，然后循环包配置文件的配置构建出不同用途的 React 包，稍后我们再来看构建函数<code>createBundle</code>，我们先来看看包配置文件，在<code>scripts/rollup/bundles.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bundles = [</span><br><span class="line">  <span class="comment">/******* Isomorphic *******/</span></span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">'core'</span>,</span><br><span class="line">    bundleTypes: [</span><br><span class="line">      UMD_DEV,</span><br><span class="line">      UMD_PROD,</span><br><span class="line">      NODE_DEV,</span><br><span class="line">      NODE_PROD,</span><br><span class="line">      FB_WWW_DEV,</span><br><span class="line">      FB_WWW_PROD,</span><br><span class="line">    ],</span><br><span class="line">    moduleType: ISOMORPHIC,</span><br><span class="line">    entry: <span class="string">'react'</span>,</span><br><span class="line">    global: <span class="string">'React'</span>,</span><br><span class="line">    externals: [],</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="comment">/******* React DOM *******/</span></span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">'dom-client'</span>,</span><br><span class="line">    bundleTypes: [</span><br><span class="line">      UMD_DEV,</span><br><span class="line">      UMD_PROD,</span><br><span class="line">      NODE_DEV,</span><br><span class="line">      NODE_PROD,</span><br><span class="line">      NODE_PROFILING,</span><br><span class="line">      FB_WWW_DEV,</span><br><span class="line">      FB_WWW_PROD,</span><br><span class="line">      FB_WWW_PROFILING,</span><br><span class="line">    ],</span><br><span class="line">    moduleType: RENDERER,</span><br><span class="line">    entry: <span class="string">'react-dom'</span>,</span><br><span class="line">    global: <span class="string">'ReactDOM'</span>,</span><br><span class="line">    externals: [<span class="string">'react'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  bundles,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这里简单列举了一些 React 包构建的配置，其他已省略，可以看出实际上这是一个用于 Rollup 构建配置的对象数组，通过循环该对象数组构建出不同用途的 React 包。接下来我们再看一下构建函数<code>createBundle</code>，在<code>scripts/rollup/build.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">createBundle</span>(<span class="params">bundle, bundleType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (shouldSkipBundle(bundle, bundleType)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> filename = getFilename(bundle.entry, bundle.global, bundleType);</span><br><span class="line">  <span class="keyword">const</span> logKey =</span><br><span class="line">    chalk.white.bold(filename) + chalk.dim(<span class="string">` (<span class="subst">$&#123;bundleType.toLowerCase()&#125;</span>)`</span>);</span><br><span class="line">  <span class="keyword">const</span> format = getFormat(bundleType);</span><br><span class="line">  <span class="keyword">const</span> packageName = Packaging.getPackageName(bundle.entry);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> resolvedEntry = <span class="built_in">require</span>.resolve(bundle.entry);</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    bundleType === FB_WWW_DEV ||</span><br><span class="line">    bundleType === FB_WWW_PROD ||</span><br><span class="line">    bundleType === FB_WWW_PROFILING</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> resolvedFBEntry = resolvedEntry.replace(<span class="string">'.js'</span>, <span class="string">'.fb.js'</span>);</span><br><span class="line">    <span class="keyword">if</span> (fs.existsSync(resolvedFBEntry)) &#123;</span><br><span class="line">      resolvedEntry = resolvedFBEntry;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> shouldBundleDependencies =</span><br><span class="line">    bundleType === UMD_DEV || bundleType === UMD_PROD;</span><br><span class="line">  <span class="keyword">const</span> peerGlobals = Modules.getPeerGlobals(bundle.externals, bundleType);</span><br><span class="line">  <span class="keyword">let</span> externals = <span class="built_in">Object</span>.keys(peerGlobals);</span><br><span class="line">  <span class="keyword">if</span> (!shouldBundleDependencies) &#123;</span><br><span class="line">    <span class="keyword">const</span> deps = Modules.getDependencies(bundleType, bundle.entry);</span><br><span class="line">    externals = externals.concat(deps);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> importSideEffects = Modules.getImportSideEffects();</span><br><span class="line">  <span class="keyword">const</span> pureExternalModules = <span class="built_in">Object</span>.keys(importSideEffects).filter(</span><br><span class="line">    <span class="built_in">module</span> =&gt; !importSideEffects[<span class="built_in">module</span>]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> rollupConfig = &#123;</span><br><span class="line">    input: resolvedEntry,</span><br><span class="line">    treeshake: &#123;</span><br><span class="line">      pureExternalModules,</span><br><span class="line">    &#125;,</span><br><span class="line">    external(id) &#123;</span><br><span class="line">      <span class="keyword">const</span> containsThisModule = <span class="function"><span class="params">pkg</span> =&gt;</span> id === pkg || id.startsWith(pkg + <span class="string">'/'</span>);</span><br><span class="line">      <span class="keyword">const</span> isProvidedByDependency = externals.some(containsThisModule);</span><br><span class="line">      <span class="keyword">if</span> (!shouldBundleDependencies &amp;&amp; isProvidedByDependency) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> !!peerGlobals[id];</span><br><span class="line">    &#125;,</span><br><span class="line">    onwarn: handleRollupWarning,</span><br><span class="line">    plugins: getPlugins(</span><br><span class="line">      bundle.entry,</span><br><span class="line">      externals,</span><br><span class="line">      bundle.babel,</span><br><span class="line">      filename,</span><br><span class="line">      packageName,</span><br><span class="line">      bundleType,</span><br><span class="line">      bundle.global,</span><br><span class="line">      bundle.moduleType,</span><br><span class="line">      bundle.modulesToStub</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment">// We can't use getters in www.</span></span><br><span class="line">    legacy:</span><br><span class="line">      bundleType === FB_WWW_DEV ||</span><br><span class="line">      bundleType === FB_WWW_PROD ||</span><br><span class="line">      bundleType === FB_WWW_PROFILING,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> [mainOutputPath, ...otherOutputPaths] = Packaging.getBundleOutputPaths(</span><br><span class="line">    bundleType,</span><br><span class="line">    filename,</span><br><span class="line">    packageName</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> rollupOutputOptions = getRollupOutputOptions(</span><br><span class="line">    mainOutputPath,</span><br><span class="line">    format,</span><br><span class="line">    peerGlobals,</span><br><span class="line">    bundle.global,</span><br><span class="line">    bundleType</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;chalk.bgYellow.black(<span class="string">' BUILDING '</span>)&#125;</span> <span class="subst">$&#123;logKey&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> rollup(rollupConfig);</span><br><span class="line">    <span class="keyword">await</span> result.write(rollupOutputOptions);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;chalk.bgRed.black(<span class="string">' OH NOES! '</span>)&#125;</span> <span class="subst">$&#123;logKey&#125;</span>\n`</span>);</span><br><span class="line">    handleRollupError(error);</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; otherOutputPaths.length; i++) &#123;</span><br><span class="line">    <span class="keyword">await</span> asyncCopyTo(mainOutputPath, otherOutputPaths[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;chalk.bgGreen.black(<span class="string">' COMPLETE '</span>)&#125;</span> <span class="subst">$&#123;logKey&#125;</span>\n`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述关键的代码是<code>const result = await rollup(rollupConfig);</code>，可以看出这是通过 rollup 打包的，对于单个配置，它是遵循 Rollup 的构建规则的。其中 input 属性表示构建的入口 JS 文件地址，output.file 属性表示构建后的输出的  JS 文件地址，format 属性表示构建的格式，cjs 表示构建出来的文件遵循<a href="http://wiki.commonjs.org/wiki/Modules/1.1" target="_blank" rel="noopener">CommonJS 规范</a>，es 表示构建出来的文件遵循<a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="noopener">ES Module 规范</a>，umd 表示构建出来的文件遵循<a href="https://github.com/umdjs/umd" target="_blank" rel="noopener">UMD 规范</a>。</p><p>下面我们以配置文件的第一个<code>react</code>配置为例：</p><p>构建的入口 JS 文件地址：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> resolvedEntry = <span class="built_in">require</span>.resolve(bundle.entry);</span><br></pre></td></tr></table></figure><p>沿着<code>bundle.entry</code>我们发现它的值为<code>react</code>（在<code>scripts/rollup/bundles.js</code>中），<code>require.resolve</code>用于查询文件的完整绝对路径，也就说<code>react</code>对应的真实入口路径是<code>/**/**/react/packages/react/index.js</code>，由此不难看出所有源码都在<code>packages</code>中：</p><p>构建后的输出的 JS 文件地址：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [mainOutputPath, ...otherOutputPaths] = Packaging.getBundleOutputPaths(</span><br><span class="line">    bundleType,</span><br><span class="line">    filename,</span><br><span class="line">    packageName</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>接下来我们看看<code>Packaging.getBundleOutputPaths</code>，在<code>scripts/rollup/packaging.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBundleOutputPaths</span>(<span class="params">bundleType, filename, packageName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (bundleType) &#123;</span><br><span class="line">    <span class="keyword">case</span> NODE_DEV:</span><br><span class="line">    <span class="keyword">case</span> NODE_PROD:</span><br><span class="line">    <span class="keyword">case</span> NODE_PROFILING:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">`build/node_modules/<span class="subst">$&#123;packageName&#125;</span>/cjs/<span class="subst">$&#123;filename&#125;</span>`</span>];</span><br><span class="line">    <span class="keyword">case</span> UMD_DEV:</span><br><span class="line">    <span class="keyword">case</span> UMD_PROD:</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">`build/node_modules/<span class="subst">$&#123;packageName&#125;</span>/umd/<span class="subst">$&#123;filename&#125;</span>`</span>,</span><br><span class="line">        <span class="string">`build/dist/<span class="subst">$&#123;filename&#125;</span>`</span>,</span><br><span class="line">      ];</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Unknown bundle type.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从上面不难看出所有打包后的输出文件都在<code>build</code>，这就是为什么打包前先删除<code>build</code>文件了。</p><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><p>通过这一节的分析，我们可以了解到 React 的打包过程，也知道了不同作用和功能的 React 对应的入口以及最终编译生成的 JS 文件。</p><h3 id="源码入口"><a href="#源码入口" class="headerlink" title="源码入口"></a>源码入口</h3><h4 id="React-对象"><a href="#React-对象" class="headerlink" title="React 对象"></a>React 对象</h4><p>实际项目中，可以看到首先需要使用如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br></pre></td></tr></table></figure></p><p>这句代码做的就是引入了React核心源码模块。而我们在源码构建一节讲到 React 的核心入口文件是<code>packages/react/index.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> React = <span class="built_in">require</span>(<span class="string">'./src/React'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> decide on the top-level export form.</span></span><br><span class="line"><span class="comment">// This is hacky but makes it work with both Rollup and Jest.</span></span><br><span class="line"><span class="built_in">module</span>.exports = React.default || React;</span><br></pre></td></tr></table></figure></p><p>上述代码中执行<code>import React from &#39;react&#39;</code>时，其实引入的就是这里提供的对象。</p><p>这里需要说明一点：这里为什么会导出 React.default || React？（以下提到的插件都可以在源码中找到）</p><ol><li><strong>React.default 用于 Jest 测试</strong><br>babel解析器将 es6 的 export、import等模块关键字转换成 commonjs 的规范，babel 转换 es6 的模块输出逻辑非常简单，即将所有输出都赋值给 exports。其中<code>packages/react/src/React.js</code>使用<code>export default</code>导出 React 对象，这里 babel 会将其转化<code>exports.default = React</code>，因此导入的结果其实是一个含 default 属性的对象，因此需要使用 React.default 来获取实际的 React 对象。</li><li><strong>React 用于 Rollup</strong><br>rollup-plugin-node-resolve 插件可以解决 ES6 模块的查找导入，如果npm中的包以CommonJS模块的形式出现的，我们可以使用rollup-plugin-commonjs 将CommonJS模块转换为ES6来为Rollup获得兼容（即令(ES6)import === (CommonJS)require），导入的结果其实是不含 default 属性的对象，因此直接使用 React 来获取实际的 React 对象。</li></ol><p>在这个入口 JS 的上方我们可以找到 React 的来源：<code>const React = require(&#39;./src/React&#39;);</code>，我们来看一下这块儿的实现，它定义在<code>packages/react/src/React.js</code> 中，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactVersion <span class="keyword">from</span> <span class="string">'shared/ReactVersion'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  REACT_ASYNC_MODE_TYPE,</span><br><span class="line">  REACT_FRAGMENT_TYPE,</span><br><span class="line">  REACT_PROFILER_TYPE,</span><br><span class="line">  REACT_STRICT_MODE_TYPE,</span><br><span class="line">  REACT_PLACEHOLDER_TYPE,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'shared/ReactSymbols'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;enableSuspense&#125; <span class="keyword">from</span> <span class="string">'shared/ReactFeatureFlags'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Component, PureComponent&#125; <span class="keyword">from</span> <span class="string">'./ReactBaseClasses'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createRef&#125; <span class="keyword">from</span> <span class="string">'./ReactCreateRef'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;forEach, map, count, toArray, only&#125; <span class="keyword">from</span> <span class="string">'./ReactChildren'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createElement,</span><br><span class="line">  createFactory,</span><br><span class="line">  cloneElement,</span><br><span class="line">  isValidElement,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./ReactElement'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createContext&#125; <span class="keyword">from</span> <span class="string">'./ReactContext'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;lazy&#125; <span class="keyword">from</span> <span class="string">'./ReactLazy'</span>;</span><br><span class="line"><span class="keyword">import</span> forwardRef <span class="keyword">from</span> <span class="string">'./forwardRef'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createElementWithValidation,</span><br><span class="line">  createFactoryWithValidation,</span><br><span class="line">  cloneElementWithValidation,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./ReactElementValidator'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactSharedInternals <span class="keyword">from</span> <span class="string">'./ReactSharedInternals'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> React = &#123;</span><br><span class="line">  Children: &#123;</span><br><span class="line">    map,</span><br><span class="line">    forEach,</span><br><span class="line">    count,</span><br><span class="line">    toArray,</span><br><span class="line">    only,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  createRef,</span><br><span class="line">  Component,</span><br><span class="line">  PureComponent,</span><br><span class="line"></span><br><span class="line">  createContext,</span><br><span class="line">  forwardRef,</span><br><span class="line"></span><br><span class="line">  Fragment: REACT_FRAGMENT_TYPE,</span><br><span class="line">  StrictMode: REACT_STRICT_MODE_TYPE,</span><br><span class="line">  unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,</span><br><span class="line">  unstable_Profiler: REACT_PROFILER_TYPE,</span><br><span class="line"></span><br><span class="line">  createElement: __DEV__ ? createElementWithValidation : createElement,</span><br><span class="line">  cloneElement: __DEV__ ? cloneElementWithValidation : cloneElement,</span><br><span class="line">  createFactory: __DEV__ ? createFactoryWithValidation : createFactory,</span><br><span class="line">  isValidElement: isValidElement,</span><br><span class="line"></span><br><span class="line">  version: ReactVersion,</span><br><span class="line"></span><br><span class="line">  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (enableSuspense) &#123;</span><br><span class="line">  React.Placeholder = REACT_PLACEHOLDER_TYPE;</span><br><span class="line">  React.lazy = lazy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React;</span><br></pre></td></tr></table></figure><p>上述就是我们 React 的庐山真面目，实际上它的内容是一个标准的 JSON 对象，这里 React 对象里面包含什么一目了然，比如我们常用的Component、PureComponent等，由此可以看出React核心内容只包括定义组件相关的内容和API。</p><h4 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h4><p>React 的定位是一个构建用户界面的JavaScript类库，它使用JavaScript语言开发UI组件，可以使用多种方式渲染这些组件，输出用户界面，很大程度上达到了跨平台的能力：</p><blockquote><p>We don’t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code.</p></blockquote><p>现在的 React 在以下几个方面都发挥着很不错的效果：</p><ol><li>React Web应用用户界面开发；</li><li>React Native App用户界面开发；</li><li>Node.js 服务端渲染；</li></ol><p>在这些不同场景，渲染的主体很明显是不一样的，有诸如web应用的DOM渲染，React Native的原生View渲染，服务端字符串渲染等，要做到兼容适应多种不同渲染环境，很显然，React不能局限固定渲染UI的方式。</p><p>上一节我们讲到React核心内容只涉及如何定义组件，并不涉及具体的组件渲染（即输出用户界面），这需要引入额外渲染模块，下面以渲染React定义的组件为例：</p><p><strong>React DOM渲染模块：</strong>React DOM渲染模块：将React组件渲染为DOM，然后可以被浏览器处理呈现给用户，这就是通常在web应用中引入的react-dom模块：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure></p><p>上述代码中，App是使用React核心模块定义的组件，然后使用react-dom渲染模块提供的render方法将其渲染为DOM输出至页面。</p><p><strong>React Native 渲染：</strong>：将React组件渲染为移动端原生View，在React Native应用中引入react-native模块，它提供相应渲染方法可以渲染React组件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AppRegistry &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./src/app.js'</span>;</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'fuc'</span>, () =&gt; App);</span><br></pre></td></tr></table></figure></p><p>上述代码中，App是React根组件，使用react-native渲染器的AppRegistry.registerComponent方法将其渲染为原生View。</p><p><strong>React测试渲染：</strong>将React组件渲染为JSON树，用来完成Jest的快照测试，内容在react-test-renderer模块：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactTestRenderer <span class="keyword">from</span> <span class="string">'react-test-renderer'</span>; </span><br><span class="line"><span class="keyword">const</span> renderer = ReactTestRenderer.create(</span><br><span class="line">  &lt;Link page=<span class="string">"https://www.facebook.com/"</span>&gt;Facebook&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">); </span></span><br><span class="line"><span class="regexp">console.log(renderer.toJSON()); </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &#123; type: 'a',</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   props: &#123; href: 'https:/</span><span class="regexp">/www.facebook.com/</span><span class="string">' &#125;,</span></span><br><span class="line"><span class="string">//   children: [ '</span>Facebook<span class="string">' ] &#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h4><p>那么至此，我们应该对 React 是什么有一个直观的认识，它本质上是含有诸多属性的JavaScript对象，它核心内容只涉及如何定义组件，具体的组件渲染（即输出用户界面），需要引入额外的渲染模块，渲染组件方式由环境决定，定义组件，组件状态管理，生命周期方法管理，组件更新等应该跨平台一致处理，不受渲染环境影响，这部分内容统一由调和器（Reconciler）处理，不同渲染器都会使用该模块。调和器主要作用就是在组件状态变更时，调用组件树各组件的render方法，渲染，卸载组件。至于 React 能做什么，它是怎么做的，我们会在后面的章节一一剖析它们。</p><h2 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h2><h3 id="首次渲染"><a href="#首次渲染" class="headerlink" title="首次渲染"></a>首次渲染</h3><h4 id="渲染入口"><a href="#渲染入口" class="headerlink" title="渲染入口"></a>渲染入口</h4><p>在 Web 项目中，如果我们要将应用渲染至页面，通常会用如下代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>; <span class="comment">// 应用根组件</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App /&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)); <span class="comment">// 应用挂载容器DOM</span></span><br></pre></td></tr></table></figure><p>这里<code>react-dom</code>是浏览器端渲染React应用的模块，通过<code>ReactDOM.render(component, mountNode)</code>可以对<code>自定义组件/原生DOM/字符串</code>进行挂载。在React16中，虽然还是通过JSX编译得到一个虚拟DOM对象，但对这些虚拟DOM对象的再加工则是发生了翻天覆地的变化。我们需要追根溯底，看它是怎么一步步转换的。我们首先找到<code>ReactDOM.render</code>，源码在<code>packages/react-dom/src/client/ReactDOM.js</code>中，有三个类似的方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ReactDOM: <span class="built_in">Object</span> = &#123;</span><br><span class="line">  <span class="comment">// 新API，未来代替render</span></span><br><span class="line">  hydrate(element: React$Node, container: DOMContainer, callback: ?<span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> throw or warn if we couldn't hydrate?</span></span><br><span class="line">    <span class="keyword">return</span> legacyRenderSubtreeIntoContainer(</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      element,</span><br><span class="line">      container,</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">      callback,</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// React15的重要API，逐渐退出舞台</span></span><br><span class="line">  render(</span><br><span class="line">    element: React$Element&lt;<span class="built_in">any</span>&gt;,  <span class="comment">// react组件对象，通常是项目根组件</span></span><br><span class="line">    container: DOMContainer, <span class="comment">// id为root的那个dom</span></span><br><span class="line">    callback: ?<span class="built_in">Function</span>, <span class="comment">// 回调函数</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> legacyRenderSubtreeIntoContainer(</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      element,</span><br><span class="line">      container,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      callback,</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 将组件挂载到传入的 DOM 节点上（不稳定api）</span></span><br><span class="line">  unstable_renderSubtreeIntoContainer(</span><br><span class="line">    parentComponent: React$Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt;,</span><br><span class="line">    element: React$Element&lt;<span class="built_in">any</span>&gt;,</span><br><span class="line">    containerNode: DOMContainer,</span><br><span class="line">    callback: ?<span class="built_in">Function</span>,</span><br><span class="line">  ) &#123;</span><br><span class="line">    invariant(</span><br><span class="line">      parentComponent != <span class="literal">null</span> &amp;&amp; ReactInstanceMap.has(parentComponent),</span><br><span class="line">      <span class="string">'parentComponent must be a valid React Component'</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> legacyRenderSubtreeIntoContainer(</span><br><span class="line">      parentComponent,</span><br><span class="line">      element,</span><br><span class="line">      containerNode,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      callback,</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里<code>ReactDOM.render/hydrate/unstable_renderSubtreeIntoContainer/unmountComponentAtNode</code>都是<code>legacyRenderSubtreeIntoContainer</code>方法的加壳方法。因此<code>ReactDOM.render</code>实际调用了<code>legacyRenderSubtreeIntoContainer</code>，这是一个内部API。</p><h4 id="渲染虚拟dom树"><a href="#渲染虚拟dom树" class="headerlink" title="渲染虚拟dom树"></a>渲染虚拟dom树</h4><p><code>legacyRenderSubtreeIntoContainer</code>从字面可以看出它大致意思就是把虚拟的dom树渲染到真实的dom容器中，我们找到<code>legacyRenderSubtreeIntoContainer</code>方法，源码在<code>packages/react-dom/src/client/ReactDOM.js</code>中：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染组件的子组件树至父容器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">legacyRenderSubtreeIntoContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentComponent: ?React$Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt;, <span class="comment">// 父组件 这里为 null</span></span></span></span><br><span class="line"><span class="function"><span class="params">  children: ReactNodeList, <span class="comment">// element 虚拟dom树</span></span></span></span><br><span class="line"><span class="function"><span class="params">  container: DOMContainer, <span class="comment">// html中的dom根对象</span></span></span></span><br><span class="line"><span class="function"><span class="params">  forceHydrate: <span class="built_in">boolean</span>, <span class="comment">// 服务器端渲染标识 这里为false</span></span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?<span class="built_in">Function</span>, <span class="comment">// 回调函数 这里没有</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对 container 进行校验</span></span><br><span class="line">  invariant(</span><br><span class="line">    isValidContainer(container),</span><br><span class="line">    <span class="string">'Target container is not a DOM element.'</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="comment">// 开发模式render时进行检查并提供许多有用的警告和错误提示信息</span></span><br><span class="line">    topLevelUpdateWarnings(container);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取 root 对象</span></span><br><span class="line">  <span class="keyword">let</span> root: Root = (container._reactRootContainer: <span class="built_in">any</span>);</span><br><span class="line">  <span class="keyword">if</span> (!root) &#123; <span class="comment">// 初次渲染时初始化</span></span><br><span class="line">    <span class="comment">// 创建一个 FiberRoot对象 并将它缓存到DOM容器的_reactRootContainer属性</span></span><br><span class="line">    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(</span><br><span class="line">      container, <span class="comment">// ReactDOM.render(&lt;div/&gt;, container)的第二个参数，也就是一个元素节点</span></span><br><span class="line">      forceHydrate, <span class="comment">// 服务器端渲染标识 这里为false</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> originalCallback = callback;</span><br><span class="line">      callback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> instance = DOMRenderer.getPublicRootInstance(root._internalRoot);</span><br><span class="line">        originalCallback.call(instance);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化容器相关</span></span><br><span class="line">    <span class="comment">// Initial mount should not be batched.</span></span><br><span class="line">    DOMRenderer.unbatchedUpdates(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (parentComponent != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 向真实dom中挂载虚拟dom</span></span><br><span class="line">        root.legacy_renderSubtreeIntoContainer(</span><br><span class="line">          parentComponent, <span class="comment">// 父组件</span></span><br><span class="line">          children, <span class="comment">// 虚拟dom树</span></span><br><span class="line">          callback, <span class="comment">// 回调函数</span></span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root.render(</span><br><span class="line">          children, <span class="comment">// 虚拟dom树</span></span><br><span class="line">          callback <span class="comment">// 回调函数</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> originalCallback = callback;</span><br><span class="line">      callback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> instance = DOMRenderer.getPublicRootInstance(root._internalRoot);</span><br><span class="line">        originalCallback.call(instance);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (parentComponent != <span class="literal">null</span>) &#123;</span><br><span class="line">      root.legacy_renderSubtreeIntoContainer(</span><br><span class="line">        parentComponent, <span class="comment">// 父组件</span></span><br><span class="line">        children, <span class="comment">// 虚拟dom树</span></span><br><span class="line">        callback, <span class="comment">// 回调函数</span></span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      root.render(</span><br><span class="line">        children, <span class="comment">// 虚拟dom树</span></span><br><span class="line">        callback <span class="comment">// 回调函数</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回根容器fiber树的根fiber实例</span></span><br><span class="line">  <span class="keyword">return</span> DOMRenderer.getPublicRootInstance(root._internalRoot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码在 packages/react-reconciler/src/ReactFiberReconciler.js 中</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getPublicRootInstance</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  container: OpaqueRoot,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">React$Component</span>&lt;<span class="title">any</span>, <span class="title">any</span>&gt; | <span class="title">PublicInstance</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取fiber实例</span></span><br><span class="line">  <span class="keyword">const</span> containerFiber = container.current;</span><br><span class="line">  <span class="keyword">if</span> (!containerFiber.child) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (containerFiber.child.tag) &#123;</span><br><span class="line">    <span class="keyword">case</span> HostComponent:</span><br><span class="line">      <span class="keyword">return</span> getPublicInstance(containerFiber.child.stateNode);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> containerFiber.child.stateNode;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由此可见，<code>legacyRenderSubtreeIntoContainer</code>主要执行了以下几个操作：<br><strong>root：</strong>由<code>legacyCreateRootFromDOMContainer</code>生成，该函数会生成一个<code>FiberRoot</code>对象挂载到真实的dom根节点上，有了这个对象，执行该对象上的一些方法可以将虚拟dom变成dom树挂载到根节点上。<br><strong>DOMRenderer.unbatchedUpdates：</strong><code>DOMRenderer.unbatchedUpdates</code>的回调执行<code>root.legacy_renderSubtreeIntoContainer</code>或<code>root.render</code>。<br><strong>root.legacy_renderSubtreeIntoContainer 和 root.render：</strong>如果有<code>parentComponent</code>，就执行<code>root.render</code>否则执行<code>root.legacy_renderSubtreeIntoContainer</code>。</p><h5 id="root"><a href="#root" class="headerlink" title="root"></a>root</h5><p>我们知道<code>root</code>是由<code>legacyCreateRootFromDOMContainer</code>生成的，我们找到<code>legacyCreateRootFromDOMContainer</code>函数，源码在<code>packages/react-dom/src/client/ReactDOM.js</code>中:<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">legacyCreateRootFromDOMContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  container: DOMContainer, <span class="comment">// ReactDOM.render(&lt;div/&gt;, container)的第二个参数，也就是一个元素节点</span></span></span></span><br><span class="line"><span class="function"><span class="params">  forceHydrate: <span class="built_in">boolean</span>,  <span class="comment">// 服务器端渲染标识 这里为false</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Root</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> shouldHydrate =</span><br><span class="line">    forceHydrate || shouldHydrateDueToLegacyHeuristic(container);</span><br><span class="line">  <span class="comment">// 是否需要服务器端渲染</span></span><br><span class="line">  <span class="keyword">if</span> (!shouldHydrate) &#123;</span><br><span class="line">    <span class="keyword">let</span> warned = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> rootSibling;</span><br><span class="line">    <span class="keyword">while</span> ((rootSibling = container.lastChild)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将dom根节点清空</span></span><br><span class="line">      container.removeChild(rootSibling);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Legacy roots are not async by default.</span></span><br><span class="line">  <span class="keyword">const</span> isAsync = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ReactRoot(</span><br><span class="line">    container, <span class="comment">// ReactDOM.render(&lt;div/&gt;, container)的第二个参数，也就是一个元素节点</span></span><br><span class="line">    isAsync, <span class="comment">// 是否异步模式，默认false</span></span><br><span class="line">    shouldHydrate <span class="comment">// 服务器端渲染标识 这里为false</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们发现该函数实际上返回的是由构造函数<code>ReactRoot</code>创建的对象。其中如果在非ssr的情况下，将dom根节点清空。我们找到构造函数<code>ReactRoot</code>，源码在<code>packages\react-dom\src\client\ReactDOM.js</code>中：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReactRoot</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  container: Container, <span class="comment">// ReactDOM.render(&lt;div/&gt;, container)的第二个参数，也就是一个元素节点</span></span></span></span><br><span class="line"><span class="function"><span class="params">  isAsync: <span class="built_in">boolean</span>, <span class="comment">// 是否异步模式，默认false</span></span></span></span><br><span class="line"><span class="function"><span class="params">  hydrate: <span class="built_in">boolean</span> <span class="comment">// 服务器端渲染标识 这里为false</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// FiberRoot 对象</span></span><br><span class="line">  <span class="keyword">const</span> root = DOMRenderer.createContainer(</span><br><span class="line">    container, <span class="comment">// ReactDOM.render(&lt;div/&gt;, container)的第二个参数，也就是一个元素节点</span></span><br><span class="line">    isAsync, <span class="comment">// 是否异步模式，默认false</span></span><br><span class="line">    hydrate <span class="comment">// 服务器端渲染标识 这里为false</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">this</span>._internalRoot = root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下几个是原型方法</span></span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line">ReactRoot.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  children: ReactNodeList, <span class="comment">// 虚拟dom树</span></span></span></span><br><span class="line">  callback: ?() =&gt; mixed, // 回调函数</span><br><span class="line">): Work &#123;</span><br><span class="line">  <span class="keyword">const</span> root = <span class="keyword">this</span>._internalRoot;</span><br><span class="line">  <span class="keyword">const</span> work = <span class="keyword">new</span> ReactWork();</span><br><span class="line">  callback = callback === <span class="literal">undefined</span> ? <span class="literal">null</span> : callback;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    warnOnInvalidCallback(callback, <span class="string">'render'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (callback !== <span class="literal">null</span>) &#123;</span><br><span class="line">    work.then(callback);</span><br><span class="line">  &#125;</span><br><span class="line">  DOMRenderer.updateContainer(</span><br><span class="line">    children, <span class="comment">// 虚拟dom树</span></span><br><span class="line">    root, <span class="comment">// FiberRoot 对象</span></span><br><span class="line">    <span class="literal">null</span>, <span class="comment">// 父组件 这里为 null</span></span><br><span class="line">    work._onCommit</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> work;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁组件</span></span><br><span class="line">ReactRoot.prototype.unmount = function(callback: ?() =&gt; mixed): Work &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line">ReactRoot.prototype.legacy_renderSubtreeIntoContainer = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentComponent: ?React$Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: ReactNodeList,</span></span></span><br><span class="line">  callback: ?() =&gt; mixed,</span><br><span class="line">): Work &#123;</span><br><span class="line">  <span class="keyword">const</span> root = <span class="keyword">this</span>._internalRoot;</span><br><span class="line">  <span class="keyword">const</span> work = <span class="keyword">new</span> ReactWork();</span><br><span class="line">  callback = callback === <span class="literal">undefined</span> ? <span class="literal">null</span> : callback;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    warnOnInvalidCallback(callback, <span class="string">'render'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (callback !== <span class="literal">null</span>) &#123;</span><br><span class="line">    work.then(callback);</span><br><span class="line">  &#125;</span><br><span class="line">  DOMRenderer.updateContainer(</span><br><span class="line">    children, <span class="comment">// 虚拟dom树</span></span><br><span class="line">    root, <span class="comment">// FiberRoot 对象</span></span><br><span class="line">    parentComponent, <span class="comment">// 父组件</span></span><br><span class="line">    work._onCommit</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> work;</span><br><span class="line">&#125;;</span><br><span class="line">ReactRoot.prototype.createBatch = <span class="function"><span class="keyword">function</span>(<span class="params"></span>): <span class="title">Batch</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>可以看出构造函数<code>ReactRoot</code>有render、unmount、legacy_renderSubtreeIntoContainer等原型方法外，同时还声明了一个和fiber相关的<code>_internalRoot</code>属性。其中<code>render</code>和<code>legacy_renderSubtreeIntoContainer</code>原型方法都会去执行<code>DOMRenderer.updateContainer</code>方法更新容器内容，唯一差别就是第三个参数一个传<code>null</code>，一个传<code>parentComponent</code>。<code>_internalRoot</code>是由<code>DOMRenderer.createContainer</code>生成的。我们找到<code>DOMRenderer.createContainer</code>，源码在<code>packages\react-reconciler\src\ReactFiberReconciler.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  containerInfo: Container, <span class="regexp">//</span> ReactDOM.render(&lt;div<span class="regexp">/&gt;, container)的第二个参数，也就是一个元素节点</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  isAsync: boolean, /</span><span class="regexp">/ 是否异步模式，默认false</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  hydrate: boolean, /</span><span class="regexp">/ 服务器端渲染标识 这里为false</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">): OpaqueRoot &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  return createFiberRoot(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    containerInfo, /</span><span class="regexp">/ ReactDOM.render(&lt;div/</span>&gt;, container</span>)的第二个参数，也就是一个元素节点</span></span><br><span class="line"><span class="function">    <span class="title">isAsync</span>, // 是否异步模式，默认<span class="title">false</span></span></span><br><span class="line"><span class="function">    <span class="title">hydrate</span> // 服务器端渲染标识 这里为<span class="title">false</span></span></span><br><span class="line"><span class="function">  );</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>接下来我们看看<code>createFiberRoot</code>是怎么将一个真实DOM变成一个Fiber对象，我们找到<code>createFiberRoot</code>，源码在 packages\react-reconciler\src\ReactFiberReconciler.js 中：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createFiberRoot</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  containerInfo: <span class="built_in">any</span>, <span class="comment">// ReactDOM.render(&lt;div/&gt;, container)的第二个参数，也就是一个元素节点</span></span></span></span><br><span class="line"><span class="function"><span class="params">  isAsync: <span class="built_in">boolean</span>, <span class="comment">// 是否异步模式，默认false</span></span></span></span><br><span class="line"><span class="function"><span class="params">  hydrate: <span class="built_in">boolean</span>, <span class="comment">// 服务器端渲染标识 这里为false</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">FiberRoot</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建初始根组件对应的fiber实例</span></span><br><span class="line">  <span class="keyword">const</span> uninitializedFiber = createHostRootFiber(isAsync);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> root;</span><br><span class="line">  <span class="keyword">if</span> (enableSchedulerTracing) &#123;</span><br><span class="line">    root = (&#123;</span><br><span class="line">      current: uninitializedFiber,</span><br><span class="line">      containerInfo: containerInfo,</span><br><span class="line">      pendingChildren: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">      earliestPendingTime: NoWork,</span><br><span class="line">      latestPendingTime: NoWork,</span><br><span class="line">      earliestSuspendedTime: NoWork,</span><br><span class="line">      latestSuspendedTime: NoWork,</span><br><span class="line">      latestPingedTime: NoWork,</span><br><span class="line"></span><br><span class="line">      didError: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">      pendingCommitExpirationTime: NoWork,</span><br><span class="line">      finishedWork: <span class="literal">null</span>,</span><br><span class="line">      timeoutHandle: noTimeout,</span><br><span class="line">      context: <span class="literal">null</span>,</span><br><span class="line">      pendingContext: <span class="literal">null</span>,</span><br><span class="line">      hydrate,</span><br><span class="line">      nextExpirationTimeToWorkOn: NoWork,</span><br><span class="line">      expirationTime: NoWork,</span><br><span class="line">      firstBatch: <span class="literal">null</span>,</span><br><span class="line">      nextScheduledRoot: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">      interactionThreadID: unstable_getThreadID(),</span><br><span class="line">      memoizedInteractions: <span class="keyword">new</span> Set(),</span><br><span class="line">      pendingInteractionMap: <span class="keyword">new</span> Map(),</span><br><span class="line">    &#125;: FiberRoot);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    root = (&#123;</span><br><span class="line">      current: uninitializedFiber,</span><br><span class="line">      containerInfo: containerInfo,</span><br><span class="line">      pendingChildren: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">      earliestPendingTime: NoWork,</span><br><span class="line">      latestPendingTime: NoWork,</span><br><span class="line">      earliestSuspendedTime: NoWork,</span><br><span class="line">      latestSuspendedTime: NoWork,</span><br><span class="line">      latestPingedTime: NoWork,</span><br><span class="line"></span><br><span class="line">      didError: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">      pendingCommitExpirationTime: NoWork,</span><br><span class="line">      finishedWork: <span class="literal">null</span>,</span><br><span class="line">      timeoutHandle: noTimeout,</span><br><span class="line">      context: <span class="literal">null</span>,</span><br><span class="line">      pendingContext: <span class="literal">null</span>,</span><br><span class="line">      hydrate,</span><br><span class="line">      nextExpirationTimeToWorkOn: NoWork,</span><br><span class="line">      expirationTime: NoWork,</span><br><span class="line">      firstBatch: <span class="literal">null</span>,</span><br><span class="line">      nextScheduledRoot: <span class="literal">null</span>,</span><br><span class="line">    &#125;: BaseFiberRootProperties);</span><br><span class="line">  &#125;</span><br><span class="line">  uninitializedFiber.stateNode = root;</span><br><span class="line">  <span class="keyword">return</span> ((root: <span class="built_in">any</span>): FiberRoot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码在 packages\react-reconciler\src\ReactFiber.js 中</span></span><br><span class="line"><span class="comment">// 返回一个初始根组件对应的fiber实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createHostRootFiber</span>(<span class="params">isAsync: <span class="built_in">boolean</span></span>): <span class="title">Fiber</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> mode = isAsync ? AsyncMode | StrictMode : NoContext;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enableProfilerTimer &amp;&amp; isDevToolsPresent) &#123;</span><br><span class="line">    <span class="comment">// Always collect profile timings when DevTools are present.</span></span><br><span class="line">    <span class="comment">// This enables DevTools to start capturing timing at any point–</span></span><br><span class="line">    <span class="comment">// Without some nodes in the tree having empty base times.</span></span><br><span class="line">    mode |= ProfileMode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建 Fiber 实例</span></span><br><span class="line">  <span class="keyword">return</span> createFiber(</span><br><span class="line">    HostRoot, <span class="comment">// 组件树根组件，可以嵌套</span></span><br><span class="line">    <span class="literal">null</span>, </span><br><span class="line">    <span class="literal">null</span>, </span><br><span class="line">    mode</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码在 packages\react-reconciler\src\ReactFiber.js 中</span></span><br><span class="line"><span class="comment">// 创建 Fiber 实例</span></span><br><span class="line"><span class="keyword">const</span> createFiber = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  tag: WorkTag, <span class="comment">// 标记 fiber 类型</span></span></span></span><br><span class="line"><span class="function"><span class="params">  pendingProps: mixed, <span class="comment">// 当前处理过程中的组件props对象</span></span></span></span><br><span class="line"><span class="function"><span class="params">  key: <span class="literal">null</span> | <span class="built_in">string</span>, <span class="comment">// 调和阶段，标识fiber，以检测是否可重用该fiber实例</span></span></span></span><br><span class="line"><span class="function"><span class="params">  mode: TypeOfMode,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Fiber</span> </span>&#123;</span><br><span class="line">  <span class="comment">// $FlowFixMe: the shapes are exact here but Flow doesn't like constructors</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> FiberNode(tag, pendingProps, key, mode);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码在 packages\react-reconciler\src\ReactFiber.js 中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FiberNode</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  tag: WorkTag,</span></span></span><br><span class="line"><span class="function"><span class="params">  pendingProps: mixed,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: <span class="literal">null</span> | <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  mode: TypeOfMode,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Instance</span></span><br><span class="line">  <span class="keyword">this</span>.tag = tag;</span><br><span class="line">  <span class="keyword">this</span>.key = key;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.stateNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fiber</span></span><br><span class="line">  <span class="keyword">this</span>.return = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.child = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.sibling = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.ref = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.pendingProps = pendingProps;</span><br><span class="line">  <span class="keyword">this</span>.memoizedProps = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.updateQueue = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.memoizedState = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.firstContextDependency = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.mode = mode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Effects</span></span><br><span class="line">  <span class="keyword">this</span>.effectTag = NoEffect;</span><br><span class="line">  <span class="keyword">this</span>.nextEffect = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.firstEffect = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.lastEffect = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.expirationTime = NoWork;</span><br><span class="line">  <span class="keyword">this</span>.childExpirationTime = NoWork;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.alternate = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enableProfilerTimer) &#123;</span><br><span class="line">    <span class="keyword">this</span>.actualDuration = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.actualStartTime = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">this</span>.selfBaseDuration = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.treeBaseDuration = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="keyword">this</span>._debugID = debugCounter++;</span><br><span class="line">    <span class="keyword">this</span>._debugSource = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._debugOwner = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._debugIsCurrentlyTiming = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!hasBadMapPolyfill &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Object</span>.preventExtensions === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.preventExtensions(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由此可知，<code>react-dom</code>渲染模块调用<code>createContainer</code>创建容器、根fiber实例、FiberRoot对象等。所有<code>Fiber</code>对象都是<code>FiberNode</code>的实例，它有许多种类型，通过tag来标识，其中内部有很多方法来生成Fiber对象：</p><ul><li>createFiberFromElement：type为类，无状态函数，元素标签名</li><li>createFiberFromFragment：type为React.Fragment</li><li>createFiberFromText：在JSX中表现为字符串，数字</li><li>createFiberFromPortal：用于 createPortal</li><li>createFiberRoot：用于ReactDOM.render的根节点</li></ul><p>这里<code>createFiberRoot</code>就是创建了一个普通对象，里面<code>current</code>属性引用<code>fiber</code>对象，<code>containerInfo</code>属性引用<code>ReactDOM.render(&lt;div/&gt;, container)</code>的第二个参数，也就是一个元素节点，然后<code>fiber</code>对象的<code>stateNode</code>引用普通对象<code>root</code>。在React15中，<code>stateNode</code>应该是一个组件实例或真实DOM，最后返回普通对象<code>stateNode</code>。现在我们回顾下调用<code>reactDOM.render</code>传入的<code>container</code>，在执行过程中附加了哪些有用的东西：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">container = &#123; <span class="comment">// 就是我们传入的那个真实dom</span></span><br><span class="line">  _reactRootContainer: &#123; <span class="comment">// legacyCreateRootFromDOMContainer</span></span><br><span class="line">    _internalRoot: &#123; <span class="comment">// DOMRenderer.createContainer</span></span><br><span class="line">      current:&#123;&#125;  <span class="comment">// new FiberNode</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="unbatchedUpdates"><a href="#unbatchedUpdates" class="headerlink" title="unbatchedUpdates"></a>unbatchedUpdates</h5><p>我们找到<code>DOMRenderer.unbatchedUpdates</code>，源码在<code>packages\react-reconciler\src\ReactFiberScheduler.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正在批量更新标识</span></span><br><span class="line"><span class="keyword">let</span> isBatchingUpdates: boolean = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 未批量更新标识</span></span><br><span class="line"><span class="keyword">let</span> isUnbatchingUpdates: boolean = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 非批量更新操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unbatchedUpdates</span>&lt;<span class="title">A</span>, <span class="title">R</span>&gt;(<span class="params">fn: (a: A</span>) =&gt; <span class="title">R</span>, <span class="title">a</span>: <span class="title">A</span>): <span class="title">R</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果正在批量更新</span></span><br><span class="line">  <span class="keyword">if</span> (isBatchingUpdates &amp;&amp; !isUnbatchingUpdates) &#123;</span><br><span class="line">    <span class="comment">// 未批量更新设为true</span></span><br><span class="line">    isUnbatchingUpdates = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 运行入参函数且返回执行结果</span></span><br><span class="line">      <span class="keyword">return</span> fn(a);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 仍旧将未批量更新设为false</span></span><br><span class="line">      isUnbatchingUpdates = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 不管是否在批量更新流程中，都执行入参函数</span></span><br><span class="line">  <span class="keyword">return</span> fn(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由此可知<code>unbatchedUpdates</code>无论如何都会执行入参函数，其中<code>isBatchingUpdates</code>和<code>isUnbatchingUpdates</code>初始值都是false。<code>DOMRenderer.unbatchedUpdates</code>的回调执行<code>root.legacy_renderSubtreeIntoContainer</code>或<code>root.render</code>。</p><h4 id="更新容器内容"><a href="#更新容器内容" class="headerlink" title="更新容器内容"></a>更新容器内容</h4><p>从<code>legacyRenderSubtreeIntoContainer</code>函数里可以看出，无论怎样判断，最终都会到<code>root.legacy_renderSubtreeIntoContainer</code>和<code>root.render</code>两个方法，而这两个方法的核心就是<code>DOMRenderer.updateContainer</code>，无非就是传不传父组件这点区别。我们找到<code>DOMRenderer.updateContainer</code>，源码在<code>packages\react-reconciler\src\ReactFiberReconciler.js</code>中：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  element: ReactNodeList, <span class="comment">// ReactDOM.render函数的第一个参数，泛指各种虚拟DOM</span></span></span></span><br><span class="line"><span class="function"><span class="params">  container: OpaqueRoot, <span class="comment">// ReactDOM.render函数的第二个参数，也就是一个元素节点</span></span></span></span><br><span class="line"><span class="function"><span class="params">  parentComponent: ?React$Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt;, <span class="comment">// parentComponent为之前的根组件，现在它为null</span></span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?<span class="built_in">Function</span>, <span class="comment">// 回调函数</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ExpirationTime</span> </span>&#123;</span><br><span class="line">  <span class="comment">// createFiberRoot中创建的fiber对象</span></span><br><span class="line">  <span class="keyword">const</span> current = container.current;</span><br><span class="line">  <span class="keyword">const</span> currentTime = requestCurrentTime();</span><br><span class="line">  <span class="comment">// 获取任务到期时间</span></span><br><span class="line">  <span class="keyword">const</span> expirationTime = computeExpirationForFiber(currentTime, current);</span><br><span class="line">  <span class="keyword">return</span> updateContainerAtExpirationTime(</span><br><span class="line">    element, <span class="comment">// ReactDOM.render函数的第一个参数，泛指各种虚拟DOM</span></span><br><span class="line">    container, <span class="comment">// ReactDOM.render函数的第二个参数，也就是一个元素节点</span></span><br><span class="line">    parentComponent, <span class="comment">// 父组件</span></span><br><span class="line">    expirationTime, <span class="comment">// 任务到期时间</span></span><br><span class="line">    callback, <span class="comment">// 回调函数</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码在 packages\react-reconciler\src\ReactFiberScheduler.js 中</span></span><br><span class="line"><span class="comment">// 计算fiber的到期时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeExpirationForFiber</span>(<span class="params">currentTime: ExpirationTime, fiber: Fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> expirationTime;</span><br><span class="line">  <span class="keyword">if</span> (expirationContext !== NoWork) &#123;</span><br><span class="line">    <span class="comment">// 显示设置过期上下文</span></span><br><span class="line">    expirationTime = expirationContext;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isWorking) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isCommitting) &#123;</span><br><span class="line">      <span class="comment">// 在提交阶段的更新任务</span></span><br><span class="line">      <span class="comment">// 需要明确设置同步优先级（Sync Priority）</span></span><br><span class="line">      expirationTime = Sync;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 在渲染阶段发生的更新任务</span></span><br><span class="line">      <span class="comment">// 需要设置为下一次渲染时间的到期时间优先级</span></span><br><span class="line">      expirationTime = nextRenderExpirationTime;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不在任务执行阶段，需要计算新的过期时间</span></span><br><span class="line">    <span class="keyword">if</span> (fiber.mode &amp; AsyncMode) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isBatchingInteractiveUpdates) &#123;</span><br><span class="line">        <span class="comment">// This is an interactive update</span></span><br><span class="line">        expirationTime = computeInteractiveExpiration(currentTime);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 异步更新</span></span><br><span class="line">        expirationTime = computeAsyncExpiration(currentTime);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果我们正处于渲染树的中间, 请不要在已经呈现的相同过期时间内更新。</span></span><br><span class="line">      <span class="keyword">if</span> (nextRoot !== <span class="literal">null</span> &amp;&amp; expirationTime === nextRenderExpirationTime) &#123;</span><br><span class="line">        expirationTime += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 同步更新</span></span><br><span class="line">      expirationTime = Sync;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isBatchingInteractiveUpdates) &#123;</span><br><span class="line">    <span class="comment">// This is an interactive update. Keep track of the lowest pending</span></span><br><span class="line">    <span class="comment">// interactive expiration time. This allows us to synchronously flush</span></span><br><span class="line">    <span class="comment">// all interactive updates when needed.</span></span><br><span class="line">    <span class="keyword">if</span> (expirationTime &gt; lowestPriorityPendingInteractiveExpirationTime) &#123;</span><br><span class="line">      lowestPriorityPendingInteractiveExpirationTime = expirationTime;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> expirationTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据渲染优先级更新dom</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateContainerAtExpirationTime</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  element: ReactNodeList, <span class="comment">// ReactDOM.render函数的第一个参数，泛指各种虚拟DOM</span></span></span></span><br><span class="line"><span class="function"><span class="params">  container: OpaqueRoot, <span class="comment">// ReactDOM.render函数的第二个参数，也就是一个元素节点</span></span></span></span><br><span class="line"><span class="function"><span class="params">  parentComponent: ?React$Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt;,   <span class="comment">// parentComponent为之前的根组件，现在它为null</span></span></span></span><br><span class="line"><span class="function"><span class="params">  expirationTime: ExpirationTime, <span class="comment">// 期望的任务到期时间</span></span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?<span class="built_in">Function</span>, <span class="comment">// 回调函数</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> If this is a nested container, this won't be the root.</span></span><br><span class="line">  <span class="comment">// 引用fiber对象</span></span><br><span class="line">  <span class="keyword">const</span> current = container.current;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获得上下文对象</span></span><br><span class="line">  <span class="keyword">const</span> context = getContextForSubtree(parentComponent);</span><br><span class="line">  <span class="keyword">if</span> (container.context === <span class="literal">null</span>) &#123;</span><br><span class="line">    container.context = context;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    container.pendingContext = context;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 下一步：schedule:安排, Root: 根, Update:更新</span></span><br><span class="line">  <span class="keyword">return</span> scheduleRootUpdate(</span><br><span class="line">    current, <span class="comment">// fiber对象</span></span><br><span class="line">    element, <span class="comment">// ReactDOM.render函数的第一个参数，泛指各种虚拟DOM</span></span><br><span class="line">    expirationTime, <span class="comment">// 期望的任务到期时间</span></span><br><span class="line">    callback <span class="comment">// 回调函数</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码在 packages\react-reconciler\src\ReactFiberReconciler.js 中</span></span><br><span class="line"><span class="comment">// 获得上下文对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getContextForSubtree</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentComponent: ?React$Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!parentComponent) &#123;</span><br><span class="line">    <span class="keyword">return</span> emptyContextObject;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fiber = ReactInstanceMap.get(parentComponent);</span><br><span class="line">  <span class="keyword">const</span> parentContext = findCurrentUnmaskedContext(fiber);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fiber.tag === ClassComponent) &#123;</span><br><span class="line">    <span class="keyword">const</span> Component = fiber.type;</span><br><span class="line">    <span class="keyword">if</span> (isLegacyContextProvider(Component)) &#123;</span><br><span class="line">      <span class="keyword">return</span> processChildContext(fiber, Component, parentContext);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fiber.tag === ClassComponentLazy) &#123;</span><br><span class="line">    <span class="keyword">const</span> Component = getResultFromResolvedThenable(fiber.type);</span><br><span class="line">    <span class="keyword">if</span> (isLegacyContextProvider(Component)) &#123;</span><br><span class="line">      <span class="keyword">return</span> processChildContext(fiber, Component, parentContext);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> parentContext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>updateContainer</code>的源码很简单，通过<code>computeExpirationForFiber</code>获得计算优先级，然后丢给<code>updateContainerAtExpirationTime</code>，这里<code>updateContainerAtExpirationTime</code>其实相当于什么都没做，通过<code>getContextForSubtree</code>（这里<code>getContextForSubtree</code>因为一开始<code>parentComponent</code>是不存在的，于是返回一个空对象。注意，这个空对象可以重复使用，不用每次返回一个新的空对象，这是一个很好的优化）获得上下文对象，然后分配给<code>container.context</code>或<code>container.pendingContext</code>，最后一起丢给<code>scheduleRootUpdate</code>。</p><h4 id="开始更新"><a href="#开始更新" class="headerlink" title="开始更新"></a>开始更新</h4><p>我们找到<code>scheduleRootUpdate</code>，源码在<code>packages/react-reconciler/src/ReactFiberReconciler.js</code>中：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进行根节点更新</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduleRootUpdate</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  current: Fiber, <span class="comment">// 引用fiber对象</span></span></span></span><br><span class="line"><span class="function"><span class="params">  element: ReactNodeList, <span class="comment">// 虚拟dom树</span></span></span></span><br><span class="line"><span class="function"><span class="params">  expirationTime: ExpirationTime, <span class="comment">// 任务到期时间</span></span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?<span class="built_in">Function</span>, <span class="comment">// 回调函数</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 返回一个包含以上属性的update对象</span></span><br><span class="line">  <span class="keyword">const</span> update = createUpdate(expirationTime);</span><br><span class="line">  <span class="comment">// Caution: React DevTools currently depends on this property</span></span><br><span class="line">  <span class="comment">// being called "element".</span></span><br><span class="line">  <span class="comment">// 将虚拟dom树放入payload </span></span><br><span class="line">  update.payload = &#123;element&#125;;</span><br><span class="line"></span><br><span class="line">  callback = callback === <span class="literal">undefined</span> ? <span class="literal">null</span> : callback;</span><br><span class="line">  <span class="keyword">if</span> (callback !== <span class="literal">null</span>) &#123;</span><br><span class="line">    warningWithoutStack(</span><br><span class="line">      <span class="keyword">typeof</span> callback === <span class="string">'function'</span>,</span><br><span class="line">      <span class="string">'render(...): Expected the last optional `callback` argument to be a '</span> +</span><br><span class="line">        <span class="string">'function. Instead received: %s.'</span>,</span><br><span class="line">      callback,</span><br><span class="line">    );</span><br><span class="line">    update.callback = callback;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 开始队列更新</span></span><br><span class="line">  enqueueUpdate(current, update); </span><br><span class="line">  <span class="comment">// 调用调度器API：scheduleWork(...)来调度fiber任务</span></span><br><span class="line">  scheduleWork(</span><br><span class="line">    current, <span class="comment">// fiber实例</span></span><br><span class="line">    expirationTime <span class="comment">// 任务到期时间</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> expirationTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含以上属性的update对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createUpdate</span>(<span class="params">expirationTime: ExpirationTime</span>): <span class="title">Update</span>&lt;*&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    expirationTime: expirationTime,</span><br><span class="line"></span><br><span class="line">    tag: UpdateState,</span><br><span class="line">    payload: <span class="literal">null</span>,</span><br><span class="line">    callback: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    next: <span class="literal">null</span>,</span><br><span class="line">    nextEffect: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>scheduleRootUpdate</code>是将用户的传参封装成一个<code>update</code>对象, 其中<code>update</code>对象有<code>payload</code>对象，它就是相当于React15中 的setState的第一个state传参，但现在<code>payload</code>中把<code>children</code>也放进去了。然后添加更新任务至fiber：<code>enqueueUpdate(...)</code>，现在我们找到<code>enqueueUpdate</code>，源码在<code>packages/react-reconciler/src/ReactUpdateQueue.js</code>中：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">enqueueUpdate</span>&lt;<span class="title">State</span>&gt;(<span class="params">fiber: Fiber, update: Update&lt;State&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// alternate 主要用来保存更新过程中各版本更新队列，方便崩溃或冲突时回退</span></span><br><span class="line">  <span class="keyword">const</span> alternate = fiber.alternate;</span><br><span class="line">  <span class="comment">// 创建两个独立的更新队列</span></span><br><span class="line">  <span class="keyword">let</span> queue1;</span><br><span class="line">  <span class="keyword">let</span> queue2;</span><br><span class="line">  <span class="keyword">if</span> (alternate === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 只存在一个 fiber</span></span><br><span class="line">    queue1 = fiber.updateQueue;</span><br><span class="line">    queue2 = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (queue1 === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果不存在，则创建一个更新队列</span></span><br><span class="line">      queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 两个所有者</span></span><br><span class="line">    queue1 = fiber.updateQueue;</span><br><span class="line">    queue2 = alternate.updateQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue1 === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (queue2 === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果两个都不存在，则创建两个新的</span></span><br><span class="line">        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);</span><br><span class="line">        queue2 = alternate.updateQueue = createUpdateQueue(</span><br><span class="line">          alternate.memoizedState,</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// queue1 不存在，queue2 存在，queue1 根据 queue2 创建</span></span><br><span class="line">        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (queue2 === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// queue2 不存在，queue1 存在，queue2 根据 queue1 创建</span></span><br><span class="line">        queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 全都有</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (queue2 === <span class="literal">null</span> || queue1 === queue2) &#123;</span><br><span class="line">    <span class="comment">// 只存在一个更新队列</span></span><br><span class="line">    appendUpdateToQueue(queue1, update);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果任意更新队列为空，则需要将更新添加至两个更新队列</span></span><br><span class="line">    <span class="keyword">if</span> (queue1.lastUpdate === <span class="literal">null</span> || queue2.lastUpdate === <span class="literal">null</span>) &#123;</span><br><span class="line">      appendUpdateToQueue(queue1, update);</span><br><span class="line">      appendUpdateToQueue(queue2, update);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果2个更新队列均非空，则添加更新至第一个队列，并更新另一个队列的尾部更新项</span></span><br><span class="line">      appendUpdateToQueue(queue1, update);</span><br><span class="line">      queue2.lastUpdate = update;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy) &amp;&amp;</span><br><span class="line">      (currentlyProcessingQueue === queue1 ||</span><br><span class="line">        (queue2 !== <span class="literal">null</span> &amp;&amp; currentlyProcessingQueue === queue2)) &amp;&amp;</span><br><span class="line">      !didWarnUpdateInsideUpdate</span><br><span class="line">    ) &#123;</span><br><span class="line">      warningWithoutStack(</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="string">'An update (setState, replaceState, or forceUpdate) was scheduled '</span> +</span><br><span class="line">          <span class="string">'from inside an update function. Update functions should be pure, '</span> +</span><br><span class="line">          <span class="string">'with zero side-effects. Consider using componentDidUpdate or a '</span> +</span><br><span class="line">          <span class="string">'callback.'</span>,</span><br><span class="line">      );</span><br><span class="line">      didWarnUpdateInsideUpdate = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个更新队列</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createUpdateQueue</span>&lt;<span class="title">State</span>&gt;(<span class="params">baseState: State</span>): <span class="title">UpdateQueue</span>&lt;<span class="title">State</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> queue: UpdateQueue&lt;State&gt; = &#123;</span><br><span class="line">    baseState,</span><br><span class="line">    firstUpdate: <span class="literal">null</span>,</span><br><span class="line">    lastUpdate: <span class="literal">null</span>,</span><br><span class="line">    firstCapturedUpdate: <span class="literal">null</span>,</span><br><span class="line">    lastCapturedUpdate: <span class="literal">null</span>,</span><br><span class="line">    firstEffect: <span class="literal">null</span>,</span><br><span class="line">    lastEffect: <span class="literal">null</span>,</span><br><span class="line">    firstCapturedEffect: <span class="literal">null</span>,</span><br><span class="line">    lastCapturedEffect: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clone 一个更新队列</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneUpdateQueue</span>&lt;<span class="title">State</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  currentQueue: UpdateQueue&lt;State&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">UpdateQueue</span>&lt;<span class="title">State</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> queue: UpdateQueue&lt;State&gt; = &#123;</span><br><span class="line">    baseState: currentQueue.baseState,</span><br><span class="line">    firstUpdate: currentQueue.firstUpdate,</span><br><span class="line">    lastUpdate: currentQueue.lastUpdate,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> With resuming, if we bail out and resuse the child tree, we should</span></span><br><span class="line">    <span class="comment">// keep these effects.</span></span><br><span class="line">    firstCapturedUpdate: <span class="literal">null</span>,</span><br><span class="line">    lastCapturedUpdate: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    firstEffect: <span class="literal">null</span>,</span><br><span class="line">    lastEffect: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    firstCapturedEffect: <span class="literal">null</span>,</span><br><span class="line">    lastCapturedEffect: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新队列</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendUpdateToQueue</span>&lt;<span class="title">State</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  queue: UpdateQueue&lt;State&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  update: Update&lt;State&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Append the update to the end of the list.</span></span><br><span class="line">  <span class="keyword">if</span> (queue.lastUpdate === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Queue is empty</span></span><br><span class="line">    queue.firstUpdate = queue.lastUpdate = update;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    queue.lastUpdate.next = update;</span><br><span class="line">    queue.lastUpdate = update;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里<code>enqueueUpdate</code>是一个链表，然后根据<code>fiber</code>的状态创建一个或两个列队对象，再接下来调用调度器API：<code>scheduleWork(...)</code>来调度fiber任务，现在我们看一下如何处理更新的。</p><h4 id="处理更新"><a href="#处理更新" class="headerlink" title="处理更新"></a>处理更新</h4><p>我们找到<code>scheduleWork</code>，源码在<code>packages/react-reconciler/src/ReactFiberScheduler.js</code>中：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduleWork</span>(<span class="params">fiber: Fiber, expirationTime: ExpirationTime</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 记录调度器的执行状态</span></span><br><span class="line">  recordScheduleUpdate();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="keyword">if</span> (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy) &#123;</span><br><span class="line">      <span class="keyword">const</span> instance = fiber.stateNode;</span><br><span class="line">      warnAboutInvalidUpdates(instance);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> root = scheduleWorkToRoot(fiber, expirationTime);</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      __DEV__ &amp;&amp;</span><br><span class="line">      (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy)</span><br><span class="line">    ) &#123;</span><br><span class="line">      warnAboutUpdateOnUnmounted(fiber);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enableSchedulerTracing) &#123;</span><br><span class="line">    <span class="keyword">const</span> interactions = __interactionsRef.current;</span><br><span class="line">    <span class="keyword">if</span> (interactions.size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> pendingInteractionMap = root.pendingInteractionMap;</span><br><span class="line">      <span class="keyword">const</span> pendingInteractions = pendingInteractionMap.get(expirationTime);</span><br><span class="line">      <span class="keyword">if</span> (pendingInteractions != <span class="literal">null</span>) &#123;</span><br><span class="line">        interactions.forEach(<span class="function"><span class="params">interaction</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!pendingInteractions.has(interaction)) &#123;</span><br><span class="line">            <span class="comment">// Update the pending async work count for previously unscheduled interaction.</span></span><br><span class="line">            interaction.__count++;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          pendingInteractions.add(interaction);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pendingInteractionMap.set(expirationTime, <span class="keyword">new</span> Set(interactions));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the pending async work count for the current interactions.</span></span><br><span class="line">        interactions.forEach(<span class="function"><span class="params">interaction</span> =&gt;</span> &#123;</span><br><span class="line">          interaction.__count++;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> subscriber = __subscriberRef.current;</span><br><span class="line">      <span class="keyword">if</span> (subscriber !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> threadID = computeThreadID(</span><br><span class="line">          expirationTime,</span><br><span class="line">          root.interactionThreadID,</span><br><span class="line">        );</span><br><span class="line">        subscriber.onWorkScheduled(interactions, threadID);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    !isWorking &amp;&amp;</span><br><span class="line">    nextRenderExpirationTime !== NoWork &amp;&amp;</span><br><span class="line">    expirationTime &lt; nextRenderExpirationTime</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// This is an interruption. (Used for performance tracking.)</span></span><br><span class="line">    interruptedBy = fiber;</span><br><span class="line">    resetStack();</span><br><span class="line">  &#125;</span><br><span class="line">  markPendingPriorityLevel(root, expirationTime);</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="comment">// If we're in the render phase, we don't need to schedule this root</span></span><br><span class="line">    <span class="comment">// for an update, because we'll do it before we exit...</span></span><br><span class="line">    !isWorking ||</span><br><span class="line">    isCommitting ||</span><br><span class="line">    <span class="comment">// ...unless this is a different root than the one we're rendering.</span></span><br><span class="line">    nextRoot !== root</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> rootExpirationTime = root.expirationTime;</span><br><span class="line">    requestWork(root, rootExpirationTime);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (nestedUpdateCount &gt; NESTED_UPDATE_LIMIT) &#123;</span><br><span class="line">    <span class="comment">// Reset this back to zero so subsequent updates don't throw.</span></span><br><span class="line">    nestedUpdateCount = <span class="number">0</span>;</span><br><span class="line">    invariant(</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      <span class="string">'Maximum update depth exceeded. This can happen when a '</span> +</span><br><span class="line">        <span class="string">'component repeatedly calls setState inside '</span> +</span><br><span class="line">        <span class="string">'componentWillUpdate or componentDidUpdate. React limits '</span> +</span><br><span class="line">        <span class="string">'the number of nested updates to prevent infinite loops.'</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduleWorkToRoot</span>(<span class="params">fiber: Fiber, expirationTime</span>): <span class="title">FiberRoot</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 更新 fiber实例的过期时间</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    fiber.expirationTime === NoWork ||</span><br><span class="line">    fiber.expirationTime &gt; expirationTime</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 若fiber实例到期时间大于期望的任务到期时间，则更新fiber到期时间</span></span><br><span class="line">    fiber.expirationTime = expirationTime;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> alternate = fiber.alternate;</span><br><span class="line">  <span class="comment">// 同时更新alternate fiber的到期时间</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    alternate !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    (alternate.expirationTime === NoWork ||</span><br><span class="line">      alternate.expirationTime &gt; expirationTime)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 若alternate fiber到期时间大于期望的任务到期时间，则更新fiber到期时间</span></span><br><span class="line">    alternate.expirationTime = expirationTime;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> node = fiber.return;</span><br><span class="line">  <span class="comment">// fiber.return 为空，说明到达组件树顶部</span></span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span> &amp;&amp; fiber.tag === HostRoot) &#123;</span><br><span class="line">    <span class="comment">// 确保是组件树根组件并获取FiberRoot实例</span></span><br><span class="line">    <span class="keyword">return</span> fiber.stateNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    alternate = node.alternate;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      node.childExpirationTime === NoWork ||</span><br><span class="line">      node.childExpirationTime &gt; expirationTime</span><br><span class="line">    ) &#123;</span><br><span class="line">      node.childExpirationTime = expirationTime;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        alternate !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">        (alternate.childExpirationTime === NoWork ||</span><br><span class="line">          alternate.childExpirationTime &gt; expirationTime)</span><br><span class="line">      ) &#123;</span><br><span class="line">        alternate.childExpirationTime = expirationTime;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      alternate !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      (alternate.childExpirationTime === NoWork ||</span><br><span class="line">        alternate.childExpirationTime &gt; expirationTime)</span><br><span class="line">    ) &#123;</span><br><span class="line">      alternate.childExpirationTime = expirationTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.return === <span class="literal">null</span> &amp;&amp; node.tag === HostRoot) &#123;</span><br><span class="line">      <span class="keyword">return</span> node.stateNode;</span><br><span class="line">    &#125;</span><br><span class="line">    node = node.return;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里<code>scheduleWork</code>主要进行虚拟DOM（fiber树）的更新。<code>scheduleWork</code>的最开头有一个<code>recordScheduleUpdate</code>方法，我们找到<code>recordScheduleUpdate</code>，源码在<code>packages\react-reconciler\src\ReactDebugFiberPerf.js</code>中：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">recordScheduleUpdate</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (enableUserTimingAPI) &#123; <span class="comment">// 全局变量，默认为true</span></span><br><span class="line">    <span class="keyword">if</span> (isCommitting) &#123; <span class="comment">// 全局变量，默认为false, 没有进入分支</span></span><br><span class="line">      hasScheduledUpdateInCurrentCommit = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 全局变量，默认为null，没有没有进入分支</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      currentPhase !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      currentPhase !== <span class="string">'componentWillMount'</span> &amp;&amp;</span><br><span class="line">      currentPhase !== <span class="string">'componentWillReceiveProps'</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      hasScheduledUpdateInCurrentPhase = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>recordScheduleUpdate</code>主要用来记录调度器的执行状态，如注释所示，它现在相当于什么都没有做。</p><h5 id="requestWork"><a href="#requestWork" class="headerlink" title="requestWork"></a>requestWork</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestWork</span>(<span class="params">root: FiberRoot, expirationTime: ExpirationTime</span>) </span>&#123;</span><br><span class="line">  addRootToSchedule(root, expirationTime);</span><br><span class="line">  <span class="keyword">if</span> (isRendering) &#123;</span><br><span class="line">    <span class="comment">// Prevent reentrancy. Remaining work will be scheduled at the end of</span></span><br><span class="line">    <span class="comment">// the currently rendering batch.</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isBatchingUpdates) &#123;</span><br><span class="line">    <span class="comment">// Flush work at the end of the batch.</span></span><br><span class="line">    <span class="keyword">if</span> (isUnbatchingUpdates) &#123;</span><br><span class="line">      <span class="comment">// ...unless we're inside unbatchedUpdates, in which case we should</span></span><br><span class="line">      <span class="comment">// flush it now.</span></span><br><span class="line">      nextFlushedRoot = root;</span><br><span class="line">      nextFlushedExpirationTime = Sync;</span><br><span class="line">      performWorkOnRoot(root, Sync, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Get rid of Sync and use current time?</span></span><br><span class="line">  <span class="keyword">if</span> (expirationTime === Sync) &#123;</span><br><span class="line">    performSyncWork();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    scheduleCallbackWithExpirationTime(root, expirationTime);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="performWork"><a href="#performWork" class="headerlink" title="performWork"></a>performWork</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">performWork</span>(<span class="params">minExpirationTime: ExpirationTime, dl: Deadline | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">  deadline = dl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Keep working on roots until there's no more work, or until we reach</span></span><br><span class="line">  <span class="comment">// the deadline.</span></span><br><span class="line">  findHighestPriorityRoot();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (deadline !== <span class="literal">null</span>) &#123;</span><br><span class="line">    recomputeCurrentRendererTime();</span><br><span class="line">    currentSchedulerTime = currentRendererTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (enableUserTimingAPI) &#123;</span><br><span class="line">      <span class="keyword">const</span> didExpire = nextFlushedExpirationTime &lt; currentRendererTime;</span><br><span class="line">      <span class="keyword">const</span> timeout = expirationTimeToMs(nextFlushedExpirationTime);</span><br><span class="line">      stopRequestCallbackTimer(didExpire, timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (</span><br><span class="line">      nextFlushedRoot !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      nextFlushedExpirationTime !== NoWork &amp;&amp;</span><br><span class="line">      (minExpirationTime === NoWork ||</span><br><span class="line">        minExpirationTime &gt;= nextFlushedExpirationTime) &amp;&amp;</span><br><span class="line">      (!deadlineDidExpire || currentRendererTime &gt;= nextFlushedExpirationTime)</span><br><span class="line">    ) &#123;</span><br><span class="line">      performWorkOnRoot(</span><br><span class="line">        nextFlushedRoot,</span><br><span class="line">        nextFlushedExpirationTime,</span><br><span class="line">        currentRendererTime &gt;= nextFlushedExpirationTime,</span><br><span class="line">      );</span><br><span class="line">      findHighestPriorityRoot();</span><br><span class="line">      recomputeCurrentRendererTime();</span><br><span class="line">      currentSchedulerTime = currentRendererTime;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (</span><br><span class="line">      nextFlushedRoot !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      nextFlushedExpirationTime !== NoWork &amp;&amp;</span><br><span class="line">      (minExpirationTime === NoWork ||</span><br><span class="line">        minExpirationTime &gt;= nextFlushedExpirationTime)</span><br><span class="line">    ) &#123;</span><br><span class="line">      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, <span class="literal">true</span>);</span><br><span class="line">      findHighestPriorityRoot();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We're done flushing work. Either we ran out of time in this callback,</span></span><br><span class="line">  <span class="comment">// or there's no more work left with sufficient priority.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// If we're inside a callback, set this to false since we just completed it.</span></span><br><span class="line">  <span class="keyword">if</span> (deadline !== <span class="literal">null</span>) &#123;</span><br><span class="line">    callbackExpirationTime = NoWork;</span><br><span class="line">    callbackID = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// If there's work left over, schedule a new callback.</span></span><br><span class="line">  <span class="keyword">if</span> (nextFlushedExpirationTime !== NoWork) &#123;</span><br><span class="line">    scheduleCallbackWithExpirationTime(</span><br><span class="line">      ((nextFlushedRoot: <span class="built_in">any</span>): FiberRoot),</span><br><span class="line">      nextFlushedExpirationTime,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Clean-up.</span></span><br><span class="line">  deadline = <span class="literal">null</span>;</span><br><span class="line">  deadlineDidExpire = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  finishRendering();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="performWorkOnRoot"><a href="#performWorkOnRoot" class="headerlink" title="performWorkOnRoot"></a>performWorkOnRoot</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">performWorkOnRoot</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  root: FiberRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  expirationTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params">  isExpired: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  invariant(</span><br><span class="line">    !isRendering,</span><br><span class="line">    <span class="string">'performWorkOnRoot was called recursively. This error is likely caused '</span> +</span><br><span class="line">      <span class="string">'by a bug in React. Please file an issue.'</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  isRendering = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if this is async work or sync/expired work.</span></span><br><span class="line">  <span class="keyword">if</span> (deadline === <span class="literal">null</span> || isExpired) &#123;</span><br><span class="line">    <span class="comment">// Flush work without yielding.</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Non-yieldy work does not necessarily imply expired work. A renderer</span></span><br><span class="line">    <span class="comment">// may want to perform some work without yielding, but also without</span></span><br><span class="line">    <span class="comment">// requiring the root to complete (by triggering placeholders).</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> finishedWork = root.finishedWork;</span><br><span class="line">    <span class="keyword">if</span> (finishedWork !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// This root is already complete. We can commit it.</span></span><br><span class="line">      completeRoot(root, finishedWork, expirationTime);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      root.finishedWork = <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// If this root previously suspended, clear its existing timeout, since</span></span><br><span class="line">      <span class="comment">// we're about to try rendering again.</span></span><br><span class="line">      <span class="keyword">const</span> timeoutHandle = root.timeoutHandle;</span><br><span class="line">      <span class="keyword">if</span> (enableSuspense &amp;&amp; timeoutHandle !== noTimeout) &#123;</span><br><span class="line">        root.timeoutHandle = noTimeout;</span><br><span class="line">        <span class="comment">// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above</span></span><br><span class="line">        cancelTimeout(timeoutHandle);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> isYieldy = <span class="literal">false</span>;</span><br><span class="line">      renderRoot(root, isYieldy, isExpired);</span><br><span class="line">      finishedWork = root.finishedWork;</span><br><span class="line">      <span class="keyword">if</span> (finishedWork !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// We've completed the root. Commit it.</span></span><br><span class="line">        completeRoot(root, finishedWork, expirationTime);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Flush async work.</span></span><br><span class="line">    <span class="keyword">let</span> finishedWork = root.finishedWork;</span><br><span class="line">    <span class="keyword">if</span> (finishedWork !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// This root is already complete. We can commit it.</span></span><br><span class="line">      completeRoot(root, finishedWork, expirationTime);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      root.finishedWork = <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// If this root previously suspended, clear its existing timeout, since</span></span><br><span class="line">      <span class="comment">// we're about to try rendering again.</span></span><br><span class="line">      <span class="keyword">const</span> timeoutHandle = root.timeoutHandle;</span><br><span class="line">      <span class="keyword">if</span> (enableSuspense &amp;&amp; timeoutHandle !== noTimeout) &#123;</span><br><span class="line">        root.timeoutHandle = noTimeout;</span><br><span class="line">        <span class="comment">// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above</span></span><br><span class="line">        cancelTimeout(timeoutHandle);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> isYieldy = <span class="literal">true</span>;</span><br><span class="line">      renderRoot(root, isYieldy, isExpired);</span><br><span class="line">      finishedWork = root.finishedWork;</span><br><span class="line">      <span class="keyword">if</span> (finishedWork !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// We've completed the root. Check the deadline one more time</span></span><br><span class="line">        <span class="comment">// before committing.</span></span><br><span class="line">        <span class="keyword">if</span> (!shouldYield()) &#123;</span><br><span class="line">          <span class="comment">// Still time left. Commit the root.</span></span><br><span class="line">          completeRoot(root, finishedWork, expirationTime);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// There's no time left. Mark this root as complete. We'll come</span></span><br><span class="line">          <span class="comment">// back and commit it later.</span></span><br><span class="line">          root.finishedWork = finishedWork;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isRendering = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="renderRoot"><a href="#renderRoot" class="headerlink" title="renderRoot"></a>renderRoot</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderRoot</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  root: FiberRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  isYieldy: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  isExpired: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  invariant(</span><br><span class="line">    !isWorking,</span><br><span class="line">    <span class="string">'renderRoot was called recursively. This error is likely caused '</span> +</span><br><span class="line">      <span class="string">'by a bug in React. Please file an issue.'</span>,</span><br><span class="line">  );</span><br><span class="line">  isWorking = <span class="literal">true</span>;</span><br><span class="line">  ReactCurrentOwner.currentDispatcher = Dispatcher;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> expirationTime = root.nextExpirationTimeToWorkOn;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if we're starting from a fresh stack, or if we're resuming from</span></span><br><span class="line">  <span class="comment">// previously yielded work.</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    expirationTime !== nextRenderExpirationTime ||</span><br><span class="line">    root !== nextRoot ||</span><br><span class="line">    nextUnitOfWork === <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// Reset the stack and start working from the root.</span></span><br><span class="line">    resetStack();</span><br><span class="line">    nextRoot = root;</span><br><span class="line">    nextRenderExpirationTime = expirationTime;</span><br><span class="line">    nextUnitOfWork = createWorkInProgress(</span><br><span class="line">      nextRoot.current,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      nextRenderExpirationTime,</span><br><span class="line">    );</span><br><span class="line">    root.pendingCommitExpirationTime = NoWork;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (enableSchedulerTracing) &#123;</span><br><span class="line">      <span class="comment">// Reset this flag once we start rendering a new root or at a new priority.</span></span><br><span class="line">      <span class="comment">// This might indicate that suspended work has completed.</span></span><br><span class="line">      <span class="comment">// If not, the flag will be reset.</span></span><br><span class="line">      nextRenderIncludesTimedOutPlaceholder = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Determine which interactions this batch of work currently includes,</span></span><br><span class="line">      <span class="comment">// So that we can accurately attribute time spent working on it,</span></span><br><span class="line">      <span class="comment">// And so that cascading work triggered during the render phase will be associated with it.</span></span><br><span class="line">      <span class="keyword">const</span> interactions: Set&lt;Interaction&gt; = <span class="keyword">new</span> Set();</span><br><span class="line">      root.pendingInteractionMap.forEach(</span><br><span class="line">        (scheduledInteractions, scheduledExpirationTime) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (scheduledExpirationTime &lt;= expirationTime) &#123;</span><br><span class="line">            scheduledInteractions.forEach(<span class="function"><span class="params">interaction</span> =&gt;</span></span><br><span class="line">              interactions.add(interaction),</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Store the current set of interactions on the FiberRoot for a few reasons:</span></span><br><span class="line">      <span class="comment">// We can re-use it in hot functions like renderRoot() without having to recalculate it.</span></span><br><span class="line">      <span class="comment">// We will also use it in commitWork() to pass to any Profiler onRender() hooks.</span></span><br><span class="line">      <span class="comment">// This also provides DevTools with a way to access it when the onCommitRoot() hook is called.</span></span><br><span class="line">      root.memoizedInteractions = interactions;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (interactions.size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> subscriber = __subscriberRef.current;</span><br><span class="line">        <span class="keyword">if</span> (subscriber !== <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> threadID = computeThreadID(</span><br><span class="line">            expirationTime,</span><br><span class="line">            root.interactionThreadID,</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            subscriber.onWorkStarted(interactions, threadID);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="comment">// Work thrown by an interaction tracing subscriber should be rethrown,</span></span><br><span class="line">            <span class="comment">// But only once it's safe (to avoid leaveing the scheduler in an invalid state).</span></span><br><span class="line">            <span class="comment">// Store the error for now and we'll re-throw in finishRendering().</span></span><br><span class="line">            <span class="keyword">if</span> (!hasUnhandledError) &#123;</span><br><span class="line">              hasUnhandledError = <span class="literal">true</span>;</span><br><span class="line">              unhandledError = error;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> prevInteractions: Set&lt;Interaction&gt; = (<span class="literal">null</span>: <span class="built_in">any</span>);</span><br><span class="line">  <span class="keyword">if</span> (enableSchedulerTracing) &#123;</span><br><span class="line">    <span class="comment">// We're about to start new traced work.</span></span><br><span class="line">    <span class="comment">// Restore pending interactions so cascading work triggered during the render phase will be accounted for.</span></span><br><span class="line">    prevInteractions = __interactionsRef.current;</span><br><span class="line">    __interactionsRef.current = root.memoizedInteractions;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> didFatal = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  startWorkLoopTimer(nextUnitOfWork);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      workLoop(isYieldy);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (thrownValue) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nextUnitOfWork === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// This is a fatal error.</span></span><br><span class="line">        didFatal = <span class="literal">true</span>;</span><br><span class="line">        onUncaughtError(thrownValue);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="comment">// Reset global debug state</span></span><br><span class="line">          <span class="comment">// We assume this is defined in DEV</span></span><br><span class="line">          (resetCurrentlyProcessingQueue: <span class="built_in">any</span>)();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> failedUnitOfWork: Fiber = nextUnitOfWork;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__ &amp;&amp; replayFailedUnitOfWorkWithInvokeGuardedCallback) &#123;</span><br><span class="line">          replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> we already know this isn't true in some cases.</span></span><br><span class="line">        <span class="comment">// At least this shows a nicer error message until we figure out the cause.</span></span><br><span class="line">        <span class="comment">// https://github.com/facebook/react/issues/12449#issuecomment-386727431</span></span><br><span class="line">        invariant(</span><br><span class="line">          nextUnitOfWork !== <span class="literal">null</span>,</span><br><span class="line">          <span class="string">'Failed to replay rendering after an error. This '</span> +</span><br><span class="line">            <span class="string">'is likely caused by a bug in React. Please file an issue '</span> +</span><br><span class="line">            <span class="string">'with a reproducing case to help us find it.'</span>,</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> sourceFiber: Fiber = nextUnitOfWork;</span><br><span class="line">        <span class="keyword">let</span> returnFiber = sourceFiber.return;</span><br><span class="line">        <span class="keyword">if</span> (returnFiber === <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">// This is the root. The root could capture its own errors. However,</span></span><br><span class="line">          <span class="comment">// we don't know if it errors before or after we pushed the host</span></span><br><span class="line">          <span class="comment">// context. This information is needed to avoid a stack mismatch.</span></span><br><span class="line">          <span class="comment">// Because we're not sure, treat this as a fatal error. We could track</span></span><br><span class="line">          <span class="comment">// which phase it fails in, but doesn't seem worth it. At least</span></span><br><span class="line">          <span class="comment">// for now.</span></span><br><span class="line">          didFatal = <span class="literal">true</span>;</span><br><span class="line">          onUncaughtError(thrownValue);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          throwException(</span><br><span class="line">            root,</span><br><span class="line">            returnFiber,</span><br><span class="line">            sourceFiber,</span><br><span class="line">            thrownValue,</span><br><span class="line">            nextRenderExpirationTime,</span><br><span class="line">          );</span><br><span class="line">          nextUnitOfWork = completeUnitOfWork(sourceFiber);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enableSchedulerTracing) &#123;</span><br><span class="line">    <span class="comment">// Traced work is done for now; restore the previous interactions.</span></span><br><span class="line">    __interactionsRef.current = prevInteractions;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We're done performing work. Time to clean up.</span></span><br><span class="line">  isWorking = <span class="literal">false</span>;</span><br><span class="line">  ReactCurrentOwner.currentDispatcher = <span class="literal">null</span>;</span><br><span class="line">  resetContextDependences();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Yield back to main thread.</span></span><br><span class="line">  <span class="keyword">if</span> (didFatal) &#123;</span><br><span class="line">    <span class="keyword">const</span> didCompleteRoot = <span class="literal">false</span>;</span><br><span class="line">    stopWorkLoopTimer(interruptedBy, didCompleteRoot);</span><br><span class="line">    interruptedBy = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// There was a fatal error.</span></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      resetStackAfterFatalErrorInDev();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// `nextRoot` points to the in-progress root. A non-null value indicates</span></span><br><span class="line">    <span class="comment">// that we're in the middle of an async render. Set it to null to indicate</span></span><br><span class="line">    <span class="comment">// there's no more work to be done in the current batch.</span></span><br><span class="line">    nextRoot = <span class="literal">null</span>;</span><br><span class="line">    onFatal(root);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nextUnitOfWork !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// There's still remaining async work in this tree, but we ran out of time</span></span><br><span class="line">    <span class="comment">// in the current frame. Yield back to the renderer. Unless we're</span></span><br><span class="line">    <span class="comment">// interrupted by a higher priority update, we'll continue later from where</span></span><br><span class="line">    <span class="comment">// we left off.</span></span><br><span class="line">    <span class="keyword">const</span> didCompleteRoot = <span class="literal">false</span>;</span><br><span class="line">    stopWorkLoopTimer(interruptedBy, didCompleteRoot);</span><br><span class="line">    interruptedBy = <span class="literal">null</span>;</span><br><span class="line">    onYield(root);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We completed the whole tree.</span></span><br><span class="line">  <span class="keyword">const</span> didCompleteRoot = <span class="literal">true</span>;</span><br><span class="line">  stopWorkLoopTimer(interruptedBy, didCompleteRoot);</span><br><span class="line">  <span class="keyword">const</span> rootWorkInProgress = root.current.alternate;</span><br><span class="line">  invariant(</span><br><span class="line">    rootWorkInProgress !== <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'Finished root should have a work-in-progress. This error is likely '</span> +</span><br><span class="line">      <span class="string">'caused by a bug in React. Please file an issue.'</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `nextRoot` points to the in-progress root. A non-null value indicates</span></span><br><span class="line">  <span class="comment">// that we're in the middle of an async render. Set it to null to indicate</span></span><br><span class="line">  <span class="comment">// there's no more work to be done in the current batch.</span></span><br><span class="line">  nextRoot = <span class="literal">null</span>;</span><br><span class="line">  interruptedBy = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nextRenderDidError) &#123;</span><br><span class="line">    <span class="comment">// There was an error</span></span><br><span class="line">    <span class="keyword">if</span> (hasLowerPriorityWork(root, expirationTime)) &#123;</span><br><span class="line">      <span class="comment">// There's lower priority work. If so, it may have the effect of fixing</span></span><br><span class="line">      <span class="comment">// the exception that was just thrown. Exit without committing. This is</span></span><br><span class="line">      <span class="comment">// similar to a suspend, but without a timeout because we're not waiting</span></span><br><span class="line">      <span class="comment">// for a promise to resolve. React will restart at the lower</span></span><br><span class="line">      <span class="comment">// priority level.</span></span><br><span class="line">      markSuspendedPriorityLevel(root, expirationTime);</span><br><span class="line">      <span class="keyword">const</span> suspendedExpirationTime = expirationTime;</span><br><span class="line">      <span class="keyword">const</span> rootExpirationTime = root.expirationTime;</span><br><span class="line">      onSuspend(</span><br><span class="line">        root,</span><br><span class="line">        rootWorkInProgress,</span><br><span class="line">        suspendedExpirationTime,</span><br><span class="line">        rootExpirationTime,</span><br><span class="line">        <span class="number">-1</span>, <span class="comment">// Indicates no timeout</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      <span class="comment">// There's no lower priority work, but we're rendering asynchronously.</span></span><br><span class="line">      <span class="comment">// Synchronsouly attempt to render the same level one more time. This is</span></span><br><span class="line">      <span class="comment">// similar to a suspend, but without a timeout because we're not waiting</span></span><br><span class="line">      <span class="comment">// for a promise to resolve.</span></span><br><span class="line">      !root.didError &amp;&amp;</span><br><span class="line">      !isExpired</span><br><span class="line">    ) &#123;</span><br><span class="line">      root.didError = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">const</span> suspendedExpirationTime = (root.nextExpirationTimeToWorkOn = expirationTime);</span><br><span class="line">      <span class="keyword">const</span> rootExpirationTime = (root.expirationTime = Sync);</span><br><span class="line">      onSuspend(</span><br><span class="line">        root,</span><br><span class="line">        rootWorkInProgress,</span><br><span class="line">        suspendedExpirationTime,</span><br><span class="line">        rootExpirationTime,</span><br><span class="line">        <span class="number">-1</span>, <span class="comment">// Indicates no timeout</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enableSuspense &amp;&amp; !isExpired &amp;&amp; nextLatestAbsoluteTimeoutMs !== <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">// The tree was suspended.</span></span><br><span class="line">    <span class="keyword">if</span> (enableSchedulerTracing) &#123;</span><br><span class="line">      nextRenderIncludesTimedOutPlaceholder = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> suspendedExpirationTime = expirationTime;</span><br><span class="line">    markSuspendedPriorityLevel(root, suspendedExpirationTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the earliest uncommitted expiration time in the tree, including</span></span><br><span class="line">    <span class="comment">// work that is suspended. The timeout threshold cannot be longer than</span></span><br><span class="line">    <span class="comment">// the overall expiration.</span></span><br><span class="line">    <span class="keyword">const</span> earliestExpirationTime = findEarliestOutstandingPriorityLevel(</span><br><span class="line">      root,</span><br><span class="line">      expirationTime,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);</span><br><span class="line">    <span class="keyword">if</span> (earliestExpirationTimeMs &lt; nextLatestAbsoluteTimeoutMs) &#123;</span><br><span class="line">      nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Subtract the current time from the absolute timeout to get the number</span></span><br><span class="line">    <span class="comment">// of milliseconds until the timeout. In other words, convert an absolute</span></span><br><span class="line">    <span class="comment">// timestamp to a relative time. This is the value that is passed</span></span><br><span class="line">    <span class="comment">// to `setTimeout`.</span></span><br><span class="line">    <span class="keyword">const</span> currentTimeMs = expirationTimeToMs(requestCurrentTime());</span><br><span class="line">    <span class="keyword">let</span> msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;</span><br><span class="line">    msUntilTimeout = msUntilTimeout &lt; <span class="number">0</span> ? <span class="number">0</span> : msUntilTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Account for the Just Noticeable Difference</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> rootExpirationTime = root.expirationTime;</span><br><span class="line">    onSuspend(</span><br><span class="line">      root,</span><br><span class="line">      rootWorkInProgress,</span><br><span class="line">      suspendedExpirationTime,</span><br><span class="line">      rootExpirationTime,</span><br><span class="line">      msUntilTimeout,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Ready to commit.</span></span><br><span class="line">  onComplete(root, rootWorkInProgress, expirationTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="completeRoot"><a href="#completeRoot" class="headerlink" title="completeRoot"></a>completeRoot</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">completeRoot</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  root: FiberRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  finishedWork: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">  expirationTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Check if there's a batch that matches this expiration time.</span></span><br><span class="line">  <span class="keyword">const</span> firstBatch = root.firstBatch;</span><br><span class="line">  <span class="keyword">if</span> (firstBatch !== <span class="literal">null</span> &amp;&amp; firstBatch._expirationTime &lt;= expirationTime) &#123;</span><br><span class="line">    <span class="keyword">if</span> (completedBatches === <span class="literal">null</span>) &#123;</span><br><span class="line">      completedBatches = [firstBatch];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      completedBatches.push(firstBatch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (firstBatch._defer) &#123;</span><br><span class="line">      <span class="comment">// This root is blocked from committing by a batch. Unschedule it until</span></span><br><span class="line">      <span class="comment">// we receive another update.</span></span><br><span class="line">      root.finishedWork = finishedWork;</span><br><span class="line">      root.expirationTime = NoWork;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Commit the root.</span></span><br><span class="line">  root.finishedWork = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if this is a nested update (a sync update scheduled during the</span></span><br><span class="line">  <span class="comment">// commit phase).</span></span><br><span class="line">  <span class="keyword">if</span> (root === lastCommittedRootDuringThisBatch) &#123;</span><br><span class="line">    <span class="comment">// If the next root is the same as the previous root, this is a nested</span></span><br><span class="line">    <span class="comment">// update. To prevent an infinite loop, increment the nested update count.</span></span><br><span class="line">    nestedUpdateCount++;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Reset whenever we switch roots.</span></span><br><span class="line">    lastCommittedRootDuringThisBatch = root;</span><br><span class="line">    nestedUpdateCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  commitRoot(root, finishedWork);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h4><p>处理完更新后需要确认提交更新至渲染模块，然后渲染模块才能将更新渲染至DOM。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitRoot</span>(<span class="params">root: FiberRoot, finishedWork: Fiber</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  isWorking = <span class="literal">true</span>;</span><br><span class="line">  isCommitting = <span class="literal">true</span>;</span><br><span class="line">  startCommitTimer();</span><br><span class="line"></span><br><span class="line">  invariant(</span><br><span class="line">    root.current !== finishedWork,</span><br><span class="line">    <span class="string">'Cannot commit the same tree as before. This is probably a bug '</span> +</span><br><span class="line">      <span class="string">'related to the return field. This error is likely caused by a bug '</span> +</span><br><span class="line">      <span class="string">'in React. Please file an issue.'</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> committedExpirationTime = root.pendingCommitExpirationTime;</span><br><span class="line">  invariant(</span><br><span class="line">    committedExpirationTime !== NoWork,</span><br><span class="line">    <span class="string">'Cannot commit an incomplete root. This error is likely caused by a '</span> +</span><br><span class="line">      <span class="string">'bug in React. Please file an issue.'</span>,</span><br><span class="line">  );</span><br><span class="line">  root.pendingCommitExpirationTime = NoWork;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update the pending priority levels to account for the work that we are</span></span><br><span class="line">  <span class="comment">// about to commit. This needs to happen before calling the lifecycles, since</span></span><br><span class="line">  <span class="comment">// they may schedule additional updates.</span></span><br><span class="line">  <span class="keyword">const</span> updateExpirationTimeBeforeCommit = finishedWork.expirationTime;</span><br><span class="line">  <span class="keyword">const</span> childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;</span><br><span class="line">  <span class="keyword">const</span> earliestRemainingTimeBeforeCommit =</span><br><span class="line">    updateExpirationTimeBeforeCommit === NoWork ||</span><br><span class="line">    (childExpirationTimeBeforeCommit !== NoWork &amp;&amp;</span><br><span class="line">      childExpirationTimeBeforeCommit &lt; updateExpirationTimeBeforeCommit)</span><br><span class="line">      ? childExpirationTimeBeforeCommit</span><br><span class="line">      : updateExpirationTimeBeforeCommit;</span><br><span class="line">  markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> prevInteractions: Set&lt;Interaction&gt; = (<span class="literal">null</span>: <span class="built_in">any</span>);</span><br><span class="line">  <span class="keyword">if</span> (enableSchedulerTracing) &#123;</span><br><span class="line">    <span class="comment">// Restore any pending interactions at this point,</span></span><br><span class="line">    <span class="comment">// So that cascading work triggered during the render phase will be accounted for.</span></span><br><span class="line">    prevInteractions = __interactionsRef.current;</span><br><span class="line">    __interactionsRef.current = root.memoizedInteractions;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Reset this to null before calling lifecycles</span></span><br><span class="line">  ReactCurrentOwner.current = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> firstEffect;</span><br><span class="line">  <span class="keyword">if</span> (finishedWork.effectTag &gt; PerformedWork) &#123;</span><br><span class="line">    <span class="comment">// A fiber's effect list consists only of its children, not itself. So if</span></span><br><span class="line">    <span class="comment">// the root has an effect, we need to add it to the end of the list. The</span></span><br><span class="line">    <span class="comment">// resulting list is the set that would belong to the root's parent, if</span></span><br><span class="line">    <span class="comment">// it had one; that is, all the effects in the tree including the root.</span></span><br><span class="line">    <span class="keyword">if</span> (finishedWork.lastEffect !== <span class="literal">null</span>) &#123;</span><br><span class="line">      finishedWork.lastEffect.nextEffect = finishedWork;</span><br><span class="line">      firstEffect = finishedWork.firstEffect;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      firstEffect = finishedWork;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// There is no effect on the root.</span></span><br><span class="line">    firstEffect = finishedWork.firstEffect;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  prepareForCommit(root.containerInfo);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Invoke instances of getSnapshotBeforeUpdate before mutation.</span></span><br><span class="line">  nextEffect = firstEffect;</span><br><span class="line">  startCommitSnapshotEffectsTimer();</span><br><span class="line">  <span class="keyword">while</span> (nextEffect !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> didError = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> error;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      invokeGuardedCallback(<span class="literal">null</span>, commitBeforeMutationLifecycles, <span class="literal">null</span>);</span><br><span class="line">      <span class="keyword">if</span> (hasCaughtError()) &#123;</span><br><span class="line">        didError = <span class="literal">true</span>;</span><br><span class="line">        error = clearCaughtError();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        commitBeforeMutationLifecycles();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        didError = <span class="literal">true</span>;</span><br><span class="line">        error = e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (didError) &#123;</span><br><span class="line">      invariant(</span><br><span class="line">        nextEffect !== <span class="literal">null</span>,</span><br><span class="line">        <span class="string">'Should have next effect. This error is likely caused by a bug '</span> +</span><br><span class="line">          <span class="string">'in React. Please file an issue.'</span>,</span><br><span class="line">      );</span><br><span class="line">      captureCommitPhaseError(nextEffect, error);</span><br><span class="line">      <span class="comment">// Clean-up</span></span><br><span class="line">      <span class="keyword">if</span> (nextEffect !== <span class="literal">null</span>) &#123;</span><br><span class="line">        nextEffect = nextEffect.nextEffect;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  stopCommitSnapshotEffectsTimer();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enableProfilerTimer) &#123;</span><br><span class="line">    <span class="comment">// Mark the current commit time to be shared by all Profilers in this batch.</span></span><br><span class="line">    <span class="comment">// This enables them to be grouped later.</span></span><br><span class="line">    recordCommitTime();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Commit all the side-effects within a tree. We'll do this in two passes.</span></span><br><span class="line">  <span class="comment">// The first pass performs all the host insertions, updates, deletions and</span></span><br><span class="line">  <span class="comment">// ref unmounts.</span></span><br><span class="line">  nextEffect = firstEffect;</span><br><span class="line">  startCommitHostEffectsTimer();</span><br><span class="line">  <span class="keyword">while</span> (nextEffect !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> didError = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> error;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      invokeGuardedCallback(<span class="literal">null</span>, commitAllHostEffects, <span class="literal">null</span>);</span><br><span class="line">      <span class="keyword">if</span> (hasCaughtError()) &#123;</span><br><span class="line">        didError = <span class="literal">true</span>;</span><br><span class="line">        error = clearCaughtError();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        commitAllHostEffects();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        didError = <span class="literal">true</span>;</span><br><span class="line">        error = e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (didError) &#123;</span><br><span class="line">      invariant(</span><br><span class="line">        nextEffect !== <span class="literal">null</span>,</span><br><span class="line">        <span class="string">'Should have next effect. This error is likely caused by a bug '</span> +</span><br><span class="line">          <span class="string">'in React. Please file an issue.'</span>,</span><br><span class="line">      );</span><br><span class="line">      captureCommitPhaseError(nextEffect, error);</span><br><span class="line">      <span class="comment">// Clean-up</span></span><br><span class="line">      <span class="keyword">if</span> (nextEffect !== <span class="literal">null</span>) &#123;</span><br><span class="line">        nextEffect = nextEffect.nextEffect;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  stopCommitHostEffectsTimer();</span><br><span class="line"></span><br><span class="line">  resetAfterCommit(root.containerInfo);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The work-in-progress tree is now the current tree. This must come after</span></span><br><span class="line">  <span class="comment">// the first pass of the commit phase, so that the previous tree is still</span></span><br><span class="line">  <span class="comment">// current during componentWillUnmount, but before the second pass, so that</span></span><br><span class="line">  <span class="comment">// the finished work is current during componentDidMount/Update.</span></span><br><span class="line">  root.current = finishedWork;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// In the second pass we'll perform all life-cycles and ref callbacks.</span></span><br><span class="line">  <span class="comment">// Life-cycles happen as a separate pass so that all placements, updates,</span></span><br><span class="line">  <span class="comment">// and deletions in the entire tree have already been invoked.</span></span><br><span class="line">  <span class="comment">// This pass also triggers any renderer-specific initial effects.</span></span><br><span class="line">  nextEffect = firstEffect;</span><br><span class="line">  startCommitLifeCyclesTimer();</span><br><span class="line">  <span class="keyword">while</span> (nextEffect !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> didError = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> error;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      invokeGuardedCallback(</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        commitAllLifeCycles,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        root,</span><br><span class="line">        committedExpirationTime,</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> (hasCaughtError()) &#123;</span><br><span class="line">        didError = <span class="literal">true</span>;</span><br><span class="line">        error = clearCaughtError();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        commitAllLifeCycles(root, committedExpirationTime);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        didError = <span class="literal">true</span>;</span><br><span class="line">        error = e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (didError) &#123;</span><br><span class="line">      invariant(</span><br><span class="line">        nextEffect !== <span class="literal">null</span>,</span><br><span class="line">        <span class="string">'Should have next effect. This error is likely caused by a bug '</span> +</span><br><span class="line">          <span class="string">'in React. Please file an issue.'</span>,</span><br><span class="line">      );</span><br><span class="line">      captureCommitPhaseError(nextEffect, error);</span><br><span class="line">      <span class="keyword">if</span> (nextEffect !== <span class="literal">null</span>) &#123;</span><br><span class="line">        nextEffect = nextEffect.nextEffect;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isCommitting = <span class="literal">false</span>;</span><br><span class="line">  isWorking = <span class="literal">false</span>;</span><br><span class="line">  stopCommitLifeCyclesTimer();</span><br><span class="line">  stopCommitTimer();</span><br><span class="line">  onCommitRoot(finishedWork.stateNode);</span><br><span class="line">  <span class="keyword">if</span> (__DEV__ &amp;&amp; ReactFiberInstrumentation.debugTool) &#123;</span><br><span class="line">    ReactFiberInstrumentation.debugTool.onCommitWork(finishedWork);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> updateExpirationTimeAfterCommit = finishedWork.expirationTime;</span><br><span class="line">  <span class="keyword">const</span> childExpirationTimeAfterCommit = finishedWork.childExpirationTime;</span><br><span class="line">  <span class="keyword">const</span> earliestRemainingTimeAfterCommit =</span><br><span class="line">    updateExpirationTimeAfterCommit === NoWork ||</span><br><span class="line">    (childExpirationTimeAfterCommit !== NoWork &amp;&amp;</span><br><span class="line">      childExpirationTimeAfterCommit &lt; updateExpirationTimeAfterCommit)</span><br><span class="line">      ? childExpirationTimeAfterCommit</span><br><span class="line">      : updateExpirationTimeAfterCommit;</span><br><span class="line">  <span class="keyword">if</span> (earliestRemainingTimeAfterCommit === NoWork) &#123;</span><br><span class="line">    <span class="comment">// If there's no remaining work, we can clear the set of already failed</span></span><br><span class="line">    <span class="comment">// error boundaries.</span></span><br><span class="line">    legacyErrorBoundariesThatAlreadyFailed = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  onCommit(root, earliestRemainingTimeAfterCommit);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enableSchedulerTracing) &#123;</span><br><span class="line">    __interactionsRef.current = prevInteractions;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> subscriber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      subscriber = __subscriberRef.current;</span><br><span class="line">      <span class="keyword">if</span> (subscriber !== <span class="literal">null</span> &amp;&amp; root.memoizedInteractions.size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> threadID = computeThreadID(</span><br><span class="line">          committedExpirationTime,</span><br><span class="line">          root.interactionThreadID,</span><br><span class="line">        );</span><br><span class="line">        subscriber.onWorkStopped(root.memoizedInteractions, threadID);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// It's not safe for commitRoot() to throw.</span></span><br><span class="line">      <span class="comment">// Store the error for now and we'll re-throw in finishRendering().</span></span><br><span class="line">      <span class="keyword">if</span> (!hasUnhandledError) &#123;</span><br><span class="line">        hasUnhandledError = <span class="literal">true</span>;</span><br><span class="line">        unhandledError = error;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!nextRenderIncludesTimedOutPlaceholder) &#123;</span><br><span class="line">        <span class="comment">// Clear completed interactions from the pending Map.</span></span><br><span class="line">        <span class="comment">// Unless the render was suspended or cascading work was scheduled,</span></span><br><span class="line">        <span class="comment">// In which case– leave pending interactions until the subsequent render.</span></span><br><span class="line">        <span class="keyword">const</span> pendingInteractionMap = root.pendingInteractionMap;</span><br><span class="line">        pendingInteractionMap.forEach(</span><br><span class="line">          (scheduledInteractions, scheduledExpirationTime) =&gt; &#123;</span><br><span class="line">            <span class="comment">// Only decrement the pending interaction count if we're done.</span></span><br><span class="line">            <span class="comment">// If there's still work at the current priority,</span></span><br><span class="line">            <span class="comment">// That indicates that we are waiting for suspense data.</span></span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">              earliestRemainingTimeAfterCommit === NoWork ||</span><br><span class="line">              scheduledExpirationTime &lt; earliestRemainingTimeAfterCommit</span><br><span class="line">            ) &#123;</span><br><span class="line">              pendingInteractionMap.delete(scheduledExpirationTime);</span><br><span class="line"></span><br><span class="line">              scheduledInteractions.forEach(<span class="function"><span class="params">interaction</span> =&gt;</span> &#123;</span><br><span class="line">                interaction.__count--;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (subscriber !== <span class="literal">null</span> &amp;&amp; interaction.__count === <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                    subscriber.onInteractionScheduledWorkCompleted(interaction);</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="comment">// It's not safe for commitRoot() to throw.</span></span><br><span class="line">                    <span class="comment">// Store the error for now and we'll re-throw in finishRendering().</span></span><br><span class="line">                    <span class="keyword">if</span> (!hasUnhandledError) &#123;</span><br><span class="line">                      hasUnhandledError = <span class="literal">true</span>;</span><br><span class="line">                      unhandledError = error;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环执行提交更新</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitAllHostEffects</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (nextEffect !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      ReactCurrentFiber.setCurrentFiber(nextEffect);</span><br><span class="line">    &#125;</span><br><span class="line">    recordEffect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> effectTag = nextEffect.effectTag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (effectTag &amp; ContentReset) &#123;</span><br><span class="line">      commitResetTextContent(nextEffect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (effectTag &amp; Ref) &#123;</span><br><span class="line">      <span class="keyword">const</span> current = nextEffect.alternate;</span><br><span class="line">      <span class="keyword">if</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">        commitDetachRef(current);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The following switch statement is only concerned about placement,</span></span><br><span class="line">    <span class="comment">// updates, and deletions. To avoid needing to add a case for every</span></span><br><span class="line">    <span class="comment">// possible bitmap value, we remove the secondary effects from the</span></span><br><span class="line">    <span class="comment">// effect tag and switch on that value.</span></span><br><span class="line">    <span class="keyword">let</span> primaryEffectTag = effectTag &amp; (Placement | Update | Deletion);</span><br><span class="line">    <span class="keyword">switch</span> (primaryEffectTag) &#123;</span><br><span class="line">      <span class="keyword">case</span> Placement: &#123;</span><br><span class="line">        commitPlacement(nextEffect);</span><br><span class="line">        <span class="comment">// Clear the "placement" from effect tag so that we know that this is inserted, before</span></span><br><span class="line">        <span class="comment">// any life-cycles like componentDidMount gets called.</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> findDOMNode doesn't rely on this any more but isMounted</span></span><br><span class="line">        <span class="comment">// does and isMounted is deprecated anyway so we should be able</span></span><br><span class="line">        <span class="comment">// to kill this.</span></span><br><span class="line">        nextEffect.effectTag &amp;= ~Placement;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> PlacementAndUpdate: &#123;</span><br><span class="line">        <span class="comment">// Placement</span></span><br><span class="line">        commitPlacement(nextEffect);</span><br><span class="line">        <span class="comment">// Clear the "placement" from effect tag so that we know that this is inserted, before</span></span><br><span class="line">        <span class="comment">// any life-cycles like componentDidMount gets called.</span></span><br><span class="line">        nextEffect.effectTag &amp;= ~Placement;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update</span></span><br><span class="line">        <span class="keyword">const</span> current = nextEffect.alternate;</span><br><span class="line">        commitWork(current, nextEffect);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> Update: &#123;</span><br><span class="line">        <span class="keyword">const</span> current = nextEffect.alternate;</span><br><span class="line">        commitWork(current, nextEffect);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> Deletion: &#123;</span><br><span class="line">        commitDeletion(nextEffect);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    nextEffect = nextEffect.nextEffect;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    ReactCurrentFiber.resetCurrentFiber();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>提交更新是最后确认更新组件的阶段，现在我们看一下提交更新的主要逻辑：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitWork</span>(<span class="params">current: Fiber | <span class="literal">null</span>, finishedWork: Fiber</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!supportsMutation) &#123;</span><br><span class="line">    commitContainer(finishedWork);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (finishedWork.tag) &#123;</span><br><span class="line">    <span class="keyword">case</span> ClassComponent:</span><br><span class="line">    <span class="keyword">case</span> ClassComponentLazy: &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> HostComponent: &#123;</span><br><span class="line">      <span class="keyword">const</span> instance: Instance = finishedWork.stateNode;</span><br><span class="line">      <span class="keyword">if</span> (instance != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Commit the work prepared earlier.</span></span><br><span class="line">        <span class="keyword">const</span> newProps = finishedWork.memoizedProps;</span><br><span class="line">        <span class="comment">// For hydration we reuse the update path but we treat the oldProps</span></span><br><span class="line">        <span class="comment">// as the newProps. The updatePayload will contain the real change in</span></span><br><span class="line">        <span class="comment">// this case.</span></span><br><span class="line">        <span class="keyword">const</span> oldProps = current !== <span class="literal">null</span> ? current.memoizedProps : newProps;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">type</span> = finishedWork.type;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Type the updateQueue to be specific to host components.</span></span><br><span class="line">        <span class="keyword">const</span> updatePayload: <span class="literal">null</span> | UpdatePayload = (finishedWork.updateQueue: <span class="built_in">any</span>);</span><br><span class="line">        finishedWork.updateQueue = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (updatePayload !== <span class="literal">null</span>) &#123;</span><br><span class="line">          commitUpdate(</span><br><span class="line">            instance,</span><br><span class="line">            updatePayload,</span><br><span class="line">            <span class="keyword">type</span>,</span><br><span class="line">            oldProps,</span><br><span class="line">            newProps,</span><br><span class="line">            finishedWork,</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> HostText: &#123;</span><br><span class="line">      invariant(</span><br><span class="line">        finishedWork.stateNode !== <span class="literal">null</span>,</span><br><span class="line">        <span class="string">'This should have a text node initialized. This error is likely '</span> +</span><br><span class="line">          <span class="string">'caused by a bug in React. Please file an issue.'</span>,</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">const</span> textInstance: TextInstance = finishedWork.stateNode;</span><br><span class="line">      <span class="keyword">const</span> newText: <span class="built_in">string</span> = finishedWork.memoizedProps;</span><br><span class="line">      <span class="comment">// For hydration we reuse the update path but we treat the oldProps</span></span><br><span class="line">      <span class="comment">// as the newProps. The updatePayload will contain the real change in</span></span><br><span class="line">      <span class="comment">// this case.</span></span><br><span class="line">      <span class="keyword">const</span> oldText: <span class="built_in">string</span> =</span><br><span class="line">        current !== <span class="literal">null</span> ? current.memoizedProps : newText;</span><br><span class="line">      commitTextUpdate(textInstance, oldText, newText);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> HostRoot: &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> Profiler: &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> PlaceholderComponent: &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">      invariant(</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="string">'This unit of work tag should not have side-effects. This error is '</span> +</span><br><span class="line">          <span class="string">'likely caused by a bug in React. Please file an issue.'</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h4><p>至此首次渲染的执行流程为：<br><code>ReactDOM.render</code>（渲染入口） =&gt; <code>legacyRenderSubtreeIntoContainer</code>（把虚拟的dom树渲染到真实的dom容器中） =&gt; <code>DOMRenderer.updateContainer</code>（更新容器内容） =&gt; <code>scheduleRootUpdate</code>（开始更新） =&gt; <code>scheduleWork</code>（处理更新） =&gt; <code>commitWork</code>（提交更新）</p><h2 id="高级指南"><a href="#高级指南" class="headerlink" title="高级指南"></a>高级指南</h2><h3 id="插槽-Portals"><a href="#插槽-Portals" class="headerlink" title="插槽(Portals)"></a>插槽(Portals)</h3><p>Portals 提供了一种很好的方法，将子节点渲染到父组件 DOM 层次结构之外的 DOM 节点。</p><h2 id="React-Fiber"><a href="#React-Fiber" class="headerlink" title="React Fiber"></a>React Fiber</h2><blockquote><p>React Fiber 并不是所谓的纤程（微线程、协程），而是一种基于浏览器的单线程调度算法。</p></blockquote><p>我们都知道浏览器渲染引擎是单线程的，在 React15.x 及之前版本，从 setState 开始到渲染完成整个过程是不受控制且连续不中断完成的，由于该过程将会占用整个线程，则其他任务都会被阻塞，如样式计算、界面布局以及许多情况下的绘制等。如果需要渲染的是一个很大、层级很深的组件，这可能就会使用户感觉明显卡顿，比如更新一个组件需要1毫秒，如果有200个组件要更新，那就需要200毫秒，在这200毫秒的更新过程中，浏览器唯一的主线程在专心运行更新操作，无暇去做其他任何事情。想象一下，在这200毫秒内，用户往一个input元素中输入点什么，敲击键盘也不会立即获得响应，虽然渲染输入按键结果是浏览器主线程的工作，但是浏览器主线程被React占用，抽不出空，最后的结果就是用户敲了按键看不到反应，等React更新过程结束之后，咔咔咔那些按键一下子出现在input元素里了，这个版本的调和器可以称为<strong>栈调和器（Stack Reconciler）</strong>。Stack Reconcilier 的主要缺陷就是<strong>不能暂停渲染任务，也不能切分任务，更无法有效平衡组件更新渲染与动画相关任务间的执行顺序（即不能划分任务优先级），这样就很有可能导致重要任务卡顿，动画掉帧等问题。</strong></p><p>为了解决这个问题，React 团队经过两年多的努力，提出了一个更先进的调和器，它允许渲染过程分段完成，而不必一次性完成，在渲染期间可返回到主线程控制执行其他任务。这是通过计算部分组件树的变更，并暂停渲染更新，询问主线程是否有更高需求的绘制或者更新任务需要执行，这些高需求的任务完成后再重新渲染。这一切的实现是在代码层引入了一个新的数据结构：<strong>Fiber对象</strong>，每一个组件实例对应有一个fiber实例，此fiber实例负责管理组件实例的更新，渲染任务及与其他fiber实例的通信，这个先进的调和器叫做<strong>纤维调和器（Fiber Reconciler）</strong>，它提供的新功能主要有：<br><strong>一：</strong>把可中断的任务拆分成小任务；<br><strong>二：</strong>可重用各分阶段任务，对正在做的工作调整优先次序；<br><strong>三：</strong>可以在父子组件任务间前进后退切换任务，以支持React执行过程中的布局刷新；<br><strong>四：</strong>支持 render 方法返回多个元素；<br><strong>五：</strong>对异常边界处理提供了更好的支持；</p><h3 id="调度任务（scheduleWork）"><a href="#调度任务（scheduleWork）" class="headerlink" title="调度任务（scheduleWork）"></a>调度任务（scheduleWork）</h3><p>前面提到 Fiber 可以异步实现不同优先级任务的协调执行，目前在 JavaScript 中也提供了这种方式，在新版主流浏览器有两个可用API：requestIdleCallback 和 requestAnimationFrame：<br><strong>requestIdleCallback：</strong>在线程空闲时调度执行低优先级函数。<br><strong>requestAnimationFrame：</strong>在下一个动画帧调度执行高优先级函数。</p><p>一般网页线程执行任务时会以帧的形式划分，大部分网页控制在30-60帧是不会影响用户体验的；在两个执行帧之间，主线程通常会有一小段空闲时间，requestIdleCallback可以在这个空闲期（Idle Period）调用空闲期回调（Idle Callback），执行一些任务。<br><img src="/images/react-source-analysis/img2.png" alt="img2.png"></p><p>而 Fiber 所做的就是需要分解渲染任务，根据优先级使用API调度，异步执行指定任务。低优先级任务由 requestIdleCallback 处理；高优先级任务，如动画相关的由 requestAnimationFrame 处理；requestIdleCallback 可以在多个空闲期调用空闲期回调，执行任务；requestIdleCallback 方法提供 deadline，即任务执行限制时间，以切分任务，避免长时间执行，阻塞UI渲染而导致掉帧；</p><p>现在我们来看一下 React 调度任务实现的源码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 目前，只有一个优先级别，Deferred。未来将增加额外的优先级</span></span><br><span class="line"><span class="keyword">var</span> DEFERRED_TIMEOUT = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调被储存为一个双向循环链表</span></span><br><span class="line"><span class="keyword">var</span> firstCallbackNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否在执行工作</span></span><br><span class="line"><span class="keyword">var</span> isPerformingWork = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isHostCallbackScheduled = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasNativePerformanceNow =</span><br><span class="line">  <span class="keyword">typeof</span> performance === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> performance.now === <span class="string">'function'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timeRemaining;</span><br><span class="line"><span class="keyword">if</span> (hasNativePerformanceNow) &#123;</span><br><span class="line">  timeRemaining = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// We assume that if we have a performance timer that the rAF callback</span></span><br><span class="line">    <span class="comment">// gets a performance timer value. Not sure if this is always true.</span></span><br><span class="line">    <span class="keyword">var</span> remaining = getFrameDeadline() - performance.now();</span><br><span class="line">    <span class="comment">// 计算得到当前帧运行剩余时间</span></span><br><span class="line">    <span class="keyword">return</span> remaining &gt; <span class="number">0</span> ? remaining : <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  timeRemaining = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Fallback to Date.now()</span></span><br><span class="line">    <span class="keyword">var</span> remaining = getFrameDeadline() - <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="comment">// 计算得到当前帧运行剩余时间</span></span><br><span class="line">    <span class="keyword">return</span> remaining &gt; <span class="number">0</span> ? remaining : <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deadlineObject = &#123;</span><br><span class="line">  timeRemaining,</span><br><span class="line">  didTimeout: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureHostCallbackIsScheduled</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 正在执行工作</span></span><br><span class="line">  <span class="keyword">if</span> (isPerformingWork) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用列表中最先超时的回调</span></span><br><span class="line">  <span class="keyword">var</span> timesOutAt = firstCallbackNode.timesOutAt;</span><br><span class="line">  <span class="keyword">if</span> (!isHostCallbackScheduled) &#123;</span><br><span class="line">    isHostCallbackScheduled = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 取消回调</span></span><br><span class="line">    cancelCallback();</span><br><span class="line">  &#125;</span><br><span class="line">  requestCallback(flushWork, timesOutAt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新第一次回调</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushFirstCallback</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> flushedNode = firstCallbackNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在调用回调之前从列表中移除该节点。这样，即使回调抛出, 列表也处于一致状态。</span></span><br><span class="line">  <span class="keyword">var</span> next = firstCallbackNode.next;</span><br><span class="line">  <span class="keyword">if</span> (firstCallbackNode === next) &#123;</span><br><span class="line">    <span class="comment">// 这是列表中的最后一个回调。</span></span><br><span class="line">    firstCallbackNode = <span class="literal">null</span>;</span><br><span class="line">    next = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> previous = firstCallbackNode.previous;</span><br><span class="line">    firstCallbackNode = previous.next = next;</span><br><span class="line">    next.previous = previous;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  flushedNode.next = flushedNode.previous = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 现在调用回调是安全的。</span></span><br><span class="line">  <span class="keyword">var</span> callback = flushedNode.callback;</span><br><span class="line">  callback(deadlineObject);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushWork</span>(<span class="params">didTimeout</span>) </span>&#123;</span><br><span class="line">  isPerformingWork = <span class="literal">true</span>;</span><br><span class="line">  deadlineObject.didTimeout = didTimeout;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (didTimeout) &#123;</span><br><span class="line">      <span class="comment">// Flush all the timed out callbacks without yielding.</span></span><br><span class="line">      <span class="keyword">while</span> (firstCallbackNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Read the current time. Flush all the callbacks that expire at or</span></span><br><span class="line">        <span class="comment">// earlier than that time. Then read the current time again and repeat.</span></span><br><span class="line">        <span class="comment">// This optimizes for as few performance.now calls as possible.</span></span><br><span class="line">        <span class="keyword">var</span> currentTime = getCurrentTime();</span><br><span class="line">        <span class="keyword">if</span> (firstCallbackNode.timesOutAt &lt;= currentTime) &#123;</span><br><span class="line">          <span class="keyword">do</span> &#123;</span><br><span class="line">            flushFirstCallback();</span><br><span class="line">          &#125; <span class="keyword">while</span> (</span><br><span class="line">            firstCallbackNode !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">            firstCallbackNode.timesOutAt &lt;= currentTime</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Keep flushing callbacks until we run out of time in the frame.</span></span><br><span class="line">      <span class="keyword">if</span> (firstCallbackNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">          flushFirstCallback();</span><br><span class="line">        &#125; <span class="keyword">while</span> (</span><br><span class="line">          firstCallbackNode !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">          getFrameDeadline() - getCurrentTime() &gt; <span class="number">0</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    isPerformingWork = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (firstCallbackNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// There's still work remaining. Request another callback.</span></span><br><span class="line">      ensureHostCallbackIsScheduled(firstCallbackNode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      isHostCallbackScheduled = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调度任务，这是一个不稳定 api</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unstable_scheduleWork</span>(<span class="params">callback, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> currentTime = getCurrentTime();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> timesOutAt;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    options !== <span class="literal">undefined</span> &amp;&amp;</span><br><span class="line">    options !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    options.timeout !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    options.timeout !== <span class="literal">undefined</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 根据传入的 timeout 计算超时</span></span><br><span class="line">    timesOutAt = currentTime + options.timeout;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 使用默认常量计算超时</span></span><br><span class="line">    timesOutAt = currentTime + DEFERRED_TIMEOUT;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> newNode = &#123;</span><br><span class="line">    callback,</span><br><span class="line">    timesOutAt,</span><br><span class="line">    next: <span class="literal">null</span>,</span><br><span class="line">    previous: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将新回调插入列表中, 并按其超时顺序排序</span></span><br><span class="line">  <span class="keyword">if</span> (firstCallbackNode === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 这是列表中的第一个回调</span></span><br><span class="line">    firstCallbackNode = newNode.next = newNode.previous = newNode;</span><br><span class="line">    ensureHostCallbackIsScheduled(firstCallbackNode);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> node = firstCallbackNode;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.timesOutAt &gt; timesOutAt) &#123;</span><br><span class="line">        <span class="comment">// 在此之前, 新的回调超时</span></span><br><span class="line">        next = node;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      node = node.next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (node !== firstCallbackNode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 找不到稍后超时的回调, 这意味着新的回调在列表中具有最新的超时。</span></span><br><span class="line">      next = firstCallbackNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next === firstCallbackNode) &#123;</span><br><span class="line">      <span class="comment">// 新回调在整个列表中具有最早的超时。</span></span><br><span class="line">      firstCallbackNode = newNode;</span><br><span class="line">      ensureHostCallbackIsScheduled(firstCallbackNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> previous = next.previous;</span><br><span class="line">    previous.next = next.previous = newNode;</span><br><span class="line">    newNode.next = next;</span><br><span class="line">    newNode.previous = previous;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unstable_cancelScheduledWork</span>(<span class="params">callbackNode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> next = callbackNode.next;</span><br><span class="line">  <span class="keyword">if</span> (next === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Already cancelled.</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (next === callbackNode) &#123;</span><br><span class="line">    <span class="comment">// This is the only scheduled callback. Clear the list.</span></span><br><span class="line">    firstCallbackNode = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Remove the callback from its position in the list.</span></span><br><span class="line">    <span class="keyword">if</span> (callbackNode === firstCallbackNode) &#123;</span><br><span class="line">      firstCallbackNode = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> previous = callbackNode.previous;</span><br><span class="line">    previous.next = next;</span><br><span class="line">    next.previous = previous;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  callbackNode.next = callbackNode.previous = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The remaining code is essentially a polyfill for requestIdleCallback. It</span></span><br><span class="line"><span class="comment">// works by scheduling a requestAnimationFrame, storing the time for the start</span></span><br><span class="line"><span class="comment">// of the frame, then scheduling a postMessage which gets scheduled after paint.</span></span><br><span class="line"><span class="comment">// Within the postMessage handler do as much work as possible until time + frame</span></span><br><span class="line"><span class="comment">// rate. By separating the idle call into a separate event tick we ensure that</span></span><br><span class="line"><span class="comment">// layout, paint and other browser work is counted against the available time.</span></span><br><span class="line"><span class="comment">// The frame rate is dynamically adjusted.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We capture a local reference to any global, in case it gets polyfilled after</span></span><br><span class="line"><span class="comment">// this module is initially evaluated. We want to be using a</span></span><br><span class="line"><span class="comment">// consistent implementation.</span></span><br><span class="line"><span class="keyword">var</span> localDate = <span class="built_in">Date</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This initialization code may run even on server environments if a component</span></span><br><span class="line"><span class="comment">// just imports ReactDOM (e.g. for findDOMNode). Some environments might not</span></span><br><span class="line"><span class="comment">// have setTimeout or clearTimeout. However, we always expect them to be defined</span></span><br><span class="line"><span class="comment">// on the client. https://github.com/facebook/react/pull/13088</span></span><br><span class="line"><span class="keyword">var</span> localSetTimeout = <span class="keyword">typeof</span> setTimeout === <span class="string">'function'</span> ? setTimeout : <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> localClearTimeout =</span><br><span class="line">  <span class="keyword">typeof</span> clearTimeout === <span class="string">'function'</span> ? clearTimeout : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We don't expect either of these to necessarily be defined, but we will error</span></span><br><span class="line"><span class="comment">// later if they are missing on the client.</span></span><br><span class="line"><span class="keyword">var</span> localRequestAnimationFrame =</span><br><span class="line">  <span class="keyword">typeof</span> requestAnimationFrame === <span class="string">'function'</span></span><br><span class="line">    ? requestAnimationFrame</span><br><span class="line">    : <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> localCancelAnimationFrame =</span><br><span class="line">  <span class="keyword">typeof</span> cancelAnimationFrame === <span class="string">'function'</span> ? cancelAnimationFrame : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getCurrentTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// requestAnimationFrame does not run when the tab is in the background. If</span></span><br><span class="line"><span class="comment">// we're backgrounded we prefer for that work to happen so that the page</span></span><br><span class="line"><span class="comment">// continues to load in the background. So we also schedule a 'setTimeout' as</span></span><br><span class="line"><span class="comment">// a fallback.</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Need a better heuristic for backgrounded work.</span></span><br><span class="line"><span class="keyword">var</span> ANIMATION_FRAME_TIMEOUT = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> rAFID;</span><br><span class="line"><span class="keyword">var</span> rAFTimeoutID;</span><br><span class="line"><span class="keyword">var</span> requestAnimationFrameWithTimeout = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// schedule rAF and also a setTimeout</span></span><br><span class="line">  rAFID = localRequestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params">timestamp</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// cancel the setTimeout</span></span><br><span class="line">    localClearTimeout(rAFTimeoutID);</span><br><span class="line">    callback(timestamp);</span><br><span class="line">  &#125;);</span><br><span class="line">  rAFTimeoutID = localSetTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// cancel the requestAnimationFrame</span></span><br><span class="line">    localCancelAnimationFrame(rAFID);</span><br><span class="line">    callback(getCurrentTime());</span><br><span class="line">  &#125;, ANIMATION_FRAME_TIMEOUT);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hasNativePerformanceNow) &#123;</span><br><span class="line">  <span class="keyword">var</span> Performance = performance;</span><br><span class="line">  getCurrentTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Performance.now();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  getCurrentTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> localDate.now();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> requestCallback;</span><br><span class="line"><span class="keyword">var</span> cancelCallback;</span><br><span class="line"><span class="keyword">var</span> getFrameDeadline;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'undefined'</span>) &#123; <span class="comment">// 非浏览器环境</span></span><br><span class="line">  <span class="keyword">var</span> timeoutID = <span class="number">-1</span>;</span><br><span class="line">  requestCallback = <span class="function"><span class="keyword">function</span>(<span class="params">callback, absoluteTimeout</span>) </span>&#123;</span><br><span class="line">    timeoutID = setTimeout(callback, <span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  cancelCallback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timeoutID);</span><br><span class="line">  &#125;;</span><br><span class="line">  getFrameDeadline = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>._schedMock) &#123; <span class="comment">// 动态注入, 仅用于测试目的。</span></span><br><span class="line">  <span class="keyword">var</span> impl = <span class="built_in">window</span>._schedMock;</span><br><span class="line">  requestCallback = impl[<span class="number">0</span>];</span><br><span class="line">  cancelCallback = impl[<span class="number">1</span>];</span><br><span class="line">  getFrameDeadline = impl[<span class="number">2</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">console</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> localRequestAnimationFrame !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(</span><br><span class="line">        <span class="string">"This browser doesn't support requestAnimationFrame. "</span> +</span><br><span class="line">          <span class="string">'Make sure that you load a '</span> +</span><br><span class="line">          <span class="string">'polyfill in older browsers. https://fb.me/react-polyfills'</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> localCancelAnimationFrame !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(</span><br><span class="line">        <span class="string">"This browser doesn't support cancelAnimationFrame. "</span> +</span><br><span class="line">          <span class="string">'Make sure that you load a '</span> +</span><br><span class="line">          <span class="string">'polyfill in older browsers. https://fb.me/react-polyfills'</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> scheduledCallback = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 是否在执行空闲期回调</span></span><br><span class="line">  <span class="keyword">var</span> isIdleScheduled = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> timeoutTime = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> isAnimationFrameScheduled = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> isPerformingIdleWork = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> frameDeadline = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用启发式跟踪法，从30fps（即30帧）开始调整得到的更适于当前环境的一帧限制时间；</span></span><br><span class="line">  <span class="keyword">var</span> previousFrameTime = <span class="number">33</span>;</span><br><span class="line">  <span class="keyword">var</span> activeFrameTime = <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line">  getFrameDeadline = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> frameDeadline;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We use the postMessage trick to defer idle work until after the repaint.</span></span><br><span class="line">  <span class="keyword">var</span> messageKey =</span><br><span class="line">    <span class="string">'__reactIdleCallback$'</span> +</span><br><span class="line">    <span class="built_in">Math</span>.random()</span><br><span class="line">      .toString(<span class="number">36</span>)</span><br><span class="line">      .slice(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 空闲期回调</span></span><br><span class="line">  <span class="keyword">var</span> idleTick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.source !== <span class="built_in">window</span> || event.data !== messageKey) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重置为false，表明可以调用空闲期回调</span></span><br><span class="line">    isIdleScheduled = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> currentTime = getCurrentTime();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> didTimeout = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (frameDeadline - currentTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 帧到期时间小于当前时间，说明已过期</span></span><br><span class="line">      <span class="keyword">if</span> (timeoutTime !== <span class="number">-1</span> &amp;&amp; timeoutTime &lt;= currentTime) &#123;</span><br><span class="line">        <span class="comment">// 此帧已过期，且发生任务处理函数（执行具体任务，传入的回调）的超时</span></span><br><span class="line">        <span class="comment">// 需要执行任务处理，下文将调用；</span></span><br><span class="line">        didTimeout = <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 帧已过期，但没有发生任务处理函数的超时，暂时不调用任务处理函数</span></span><br><span class="line">        <span class="keyword">if</span> (!isAnimationFrameScheduled) &#123;</span><br><span class="line">          <span class="comment">// 当前没有调度别的帧回调函数</span></span><br><span class="line">          <span class="comment">// 调度下一帧</span></span><br><span class="line">          isAnimationFrameScheduled = <span class="literal">true</span>;</span><br><span class="line">          requestAnimationFrameWithTimeout(animationTick);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Exit without invoking the callback.</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存的任务处理函数</span></span><br><span class="line">    timeoutTime = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">var</span> callback = scheduledCallback;</span><br><span class="line">    scheduledCallback = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (callback !== <span class="literal">null</span>) &#123;</span><br><span class="line">      isPerformingIdleWork = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行回调</span></span><br><span class="line">        callback(didTimeout);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        isPerformingIdleWork = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// Assumes that we have addEventListener in this environment. Might need</span></span><br><span class="line">  <span class="comment">// something better for old IE.</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, idleTick, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 帧回调</span></span><br><span class="line">  <span class="keyword">var</span> animationTick = <span class="function"><span class="keyword">function</span>(<span class="params">rafTime</span>) </span>&#123;</span><br><span class="line">    isAnimationFrameScheduled = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> nextFrameTime = rafTime - frameDeadline + activeFrameTime;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      nextFrameTime &lt; activeFrameTime &amp;&amp;</span><br><span class="line">      previousFrameTime &lt; activeFrameTime</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nextFrameTime &lt; <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="comment">// Defensive coding. We don't support higher frame rates than 120hz.</span></span><br><span class="line">        <span class="comment">// If we get lower than that, it is probably a bug.</span></span><br><span class="line">        nextFrameTime = <span class="number">8</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// If one frame goes long, then the next one can be short to catch up.</span></span><br><span class="line">      <span class="comment">// If two frames are short in a row, then that's an indication that we</span></span><br><span class="line">      <span class="comment">// actually have a higher frame rate than what we're currently optimizing.</span></span><br><span class="line">      <span class="comment">// We adjust our heuristic dynamically accordingly. For example, if we're</span></span><br><span class="line">      <span class="comment">// running on 120hz display or 90hz VR display.</span></span><br><span class="line">      <span class="comment">// Take the max of the two in case one of them was an anomaly due to</span></span><br><span class="line">      <span class="comment">// missed frame deadlines.</span></span><br><span class="line">      activeFrameTime =</span><br><span class="line">        nextFrameTime &lt; previousFrameTime ? previousFrameTime : nextFrameTime;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      previousFrameTime = nextFrameTime;</span><br><span class="line">    &#125;</span><br><span class="line">    frameDeadline = rafTime + activeFrameTime;</span><br><span class="line">    <span class="keyword">if</span> (!isIdleScheduled) &#123;</span><br><span class="line">      <span class="comment">// 不在执行空闲期回调，表明可以调用空闲期回调</span></span><br><span class="line">      isIdleScheduled = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">window</span>.postMessage(messageKey, <span class="string">'*'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义 模拟requestIdleCallback</span></span><br><span class="line">  requestCallback = <span class="function"><span class="keyword">function</span>(<span class="params">callback, absoluteTimeout</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 回调函数</span></span><br><span class="line">    scheduledCallback = callback;</span><br><span class="line">    timeoutTime = absoluteTimeout;</span><br><span class="line">    <span class="keyword">if</span> (isPerformingIdleWork) &#123;</span><br><span class="line">      <span class="comment">// 如果我们已经在执行空闲工作, 则必须抛出错误。</span></span><br><span class="line">      <span class="comment">// 不要等待下一帧。在新事件中继续尽快工作 ASAP。</span></span><br><span class="line">      <span class="built_in">window</span>.postMessage(messageKey, <span class="string">'*'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isAnimationFrameScheduled) &#123;</span><br><span class="line">      <span class="comment">// 如果当前没有调度帧回调函数，我们需要进行一个调度帧回调函数</span></span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> rAF 仍是 setTimeout</span></span><br><span class="line">      isAnimationFrameScheduled = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 初始开始执行帧回调 </span></span><br><span class="line">      requestAnimationFrameWithTimeout(animationTick);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  cancelCallback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    scheduledCallback = <span class="literal">null</span>;</span><br><span class="line">    isIdleScheduled = <span class="literal">false</span>;</span><br><span class="line">    timeoutTime = <span class="number">-1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  unstable_scheduleWork,</span><br><span class="line">  unstable_cancelScheduledWork,</span><br><span class="line">  getCurrentTime <span class="keyword">as</span> unstable_now,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="Fiber与组件"><a href="#Fiber与组件" class="headerlink" title="Fiber与组件"></a>Fiber与组件</h3><p>我们已经知道了Fiber的功能及其主要特点，那么其如何和组件联系，并且如何实现效果的呢，以下几点可以概括：</p><ol><li>React应用中的基础单元是组件，应用以组件树形式组织，渲染组件；</li><li>Fiber调和器基础单元则是fiber（调和单元），应用以fiber树形式组织，应用Fiber算法；</li><li>组件树和fiber树结构对应，一个组件实例有一个对应的fiber实例；</li><li>Fiber负责整个应用层面的调和，fiber实例负责对应组件的调和；</li></ol><p><strong>注意Fiber与fiber的区别，Fiber是指调和器算法，fiber则是调和器算法组成单元，和组件与应用关系类似，每一个组件实例会有对应的fiber实例负责该组件的调和。</strong></p><h3 id="Fiber数据结构"><a href="#Fiber数据结构" class="headerlink" title="Fiber数据结构"></a>Fiber数据结构</h3><p>截止目前，我们对Fiber应该有了初步的了解，在具体介绍Fiber的实现与架构之前，准备先简单介绍一下Fiber的数据结构，数据结构能一定程度反映其整体工作架构。<br>其实，一个fiber就是一个JavaScript对象，以键值对形式存储了一个关联组件的信息，包括组件接收的props，维护的state，最后需要渲染出的内容等。接下来我们将介Fiber对象的主要属性。</p><h4 id="FiberRoot-对象"><a href="#FiberRoot-对象" class="headerlink" title="FiberRoot 对象"></a>FiberRoot 对象</h4><p>FiberRoot 对象主要用来管理组件树组件的更新进程，同时记录组件树挂载的DOM容器相关信息。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type FiberRoot = &#123;</span><br><span class="line">  <span class="comment">// fiber节点的容器元素相关信息，通常会直接传入容器元素</span></span><br><span class="line">  containerInfo: any,</span><br><span class="line">  <span class="comment">// 仅用于持久更新</span></span><br><span class="line">  pendingChildren: any,</span><br><span class="line">  <span class="comment">// 当前fiber树中激活状态（正在处理）的fiber节点</span></span><br><span class="line">  current: Fiber,</span><br><span class="line">  <span class="comment">// 从提交中暂停的最早和最新的优先级级别</span></span><br><span class="line">  earliestSuspendedTime: ExpirationTime,</span><br><span class="line">  latestSuspendedTime: ExpirationTime,</span><br><span class="line">  <span class="comment">// 不知道要暂停的最早和最新的优先级级别。</span></span><br><span class="line">  earliestPendingTime: ExpirationTime,</span><br><span class="line">  latestPendingTime: ExpirationTime,</span><br><span class="line">  <span class="comment">// 由已解决的承诺 pinged 的最新优先级级别, 并可以重试</span></span><br><span class="line">  latestPingedTime: ExpirationTime,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果引发错误, 并且队列中没有其他更新, 我们尝试在处理前再一次从根中渲染错误。</span></span><br><span class="line">  didError: boolean,</span><br><span class="line"></span><br><span class="line">  pendingCommitExpirationTime: ExpirationTime,</span><br><span class="line">  <span class="comment">// 已完成的工作正在进行的 HostRoot 已准备好提交</span></span><br><span class="line">  finishedWork: Fiber | <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// setTimeout 返回的超时句柄。如果它被一个新的取代了。用于取消挂起的超时, </span></span><br><span class="line">  timeoutHandle: TimeoutHandle | NoTimeout,</span><br><span class="line">  <span class="comment">// 顶部上下文对象, 由 renderSubtreeIntoContainer 使用</span></span><br><span class="line">  context: <span class="built_in">Object</span> | <span class="literal">null</span>,</span><br><span class="line">  pendingContext: <span class="built_in">Object</span> | <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 确定我们是否应该尝试在初始加载使用 hydrate</span></span><br><span class="line">  +hydrate: boolean,</span><br><span class="line">  <span class="comment">// 此节点剩余的任务到期时间</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Lift this into the renderer</span></span><br><span class="line">  nextExpirationTimeToWorkOn: ExpirationTime,</span><br><span class="line">  expirationTime: ExpirationTime,</span><br><span class="line">  <span class="comment">// 顶级批次的列表。此列表指示是否应推迟提交，也包含完成回调。</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Lift this into the renderer</span></span><br><span class="line">  firstBatch: Batch | <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 多组件树FirberRoot对象以单链表存储链接，指向下一个需要调度的FiberRoot</span></span><br><span class="line">  nextScheduledRoot: FiberRoot | <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>创建FiberRoot实例</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createFiberRoot</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  containerInfo: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  isAsync: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrate: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">FiberRoot</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建初始根组件对应的fiber实例</span></span><br><span class="line">  <span class="keyword">const</span> uninitializedFiber = createHostRootFiber(isAsync);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> root;</span><br><span class="line">  <span class="keyword">if</span> (enableSchedulerTracing) &#123;</span><br><span class="line">    root = (&#123;</span><br><span class="line">      <span class="comment">// 根组件对应的fiber实例，一直用它</span></span><br><span class="line">      current: uninitializedFiber,</span><br><span class="line">      containerInfo: containerInfo,</span><br><span class="line">      pendingChildren: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">      earliestPendingTime: NoWork,</span><br><span class="line">      latestPendingTime: NoWork,</span><br><span class="line">      earliestSuspendedTime: NoWork,</span><br><span class="line">      latestSuspendedTime: NoWork,</span><br><span class="line">      latestPingedTime: NoWork,</span><br><span class="line"></span><br><span class="line">      didError: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">      pendingCommitExpirationTime: NoWork,</span><br><span class="line">      finishedWork: <span class="literal">null</span>,</span><br><span class="line">      timeoutHandle: noTimeout,</span><br><span class="line">      context: <span class="literal">null</span>,</span><br><span class="line">      pendingContext: <span class="literal">null</span>,</span><br><span class="line">      hydrate,</span><br><span class="line">      nextExpirationTimeToWorkOn: NoWork,</span><br><span class="line">      expirationTime: NoWork,</span><br><span class="line">      firstBatch: <span class="literal">null</span>,</span><br><span class="line">      nextScheduledRoot: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">      interactionThreadID: unstable_getThreadID(),</span><br><span class="line">      memoizedInteractions: <span class="keyword">new</span> <span class="built_in">Set</span>(),</span><br><span class="line">      pendingInteractionMap: <span class="keyword">new</span> <span class="built_in">Map</span>(),</span><br><span class="line">    &#125;: FiberRoot);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    root = (&#123;</span><br><span class="line">      current: uninitializedFiber,</span><br><span class="line">      containerInfo: containerInfo,</span><br><span class="line">      pendingChildren: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">      earliestPendingTime: NoWork,</span><br><span class="line">      latestPendingTime: NoWork,</span><br><span class="line">      earliestSuspendedTime: NoWork,</span><br><span class="line">      latestSuspendedTime: NoWork,</span><br><span class="line">      latestPingedTime: NoWork,</span><br><span class="line"></span><br><span class="line">      didError: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">      pendingCommitExpirationTime: NoWork,</span><br><span class="line">      finishedWork: <span class="literal">null</span>,</span><br><span class="line">      timeoutHandle: noTimeout,</span><br><span class="line">      context: <span class="literal">null</span>,</span><br><span class="line">      pendingContext: <span class="literal">null</span>,</span><br><span class="line">      hydrate,</span><br><span class="line">      nextExpirationTimeToWorkOn: NoWork,</span><br><span class="line">      expirationTime: NoWork,</span><br><span class="line">      firstBatch: <span class="literal">null</span>,</span><br><span class="line">      nextScheduledRoot: <span class="literal">null</span>,</span><br><span class="line">    &#125;: BaseFiberRootProperties);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 组件树根组件fiber实例的stateNode指向FiberRoot对象</span></span><br><span class="line">  uninitializedFiber.stateNode = root;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((root: any): FiberRoot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建返回一个初始根组件对应的fiber实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createHostRootFiber</span>(<span class="params">isAsync: boolean</span>): <span class="title">Fiber</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> mode = isAsync ? AsyncMode | StrictMode : NoContext;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enableProfilerTimer &amp;&amp; isDevToolsPresent) &#123;</span><br><span class="line">    <span class="comment">// Always collect profile timings when DevTools are present.</span></span><br><span class="line">    <span class="comment">// This enables DevTools to start capturing timing at any point–</span></span><br><span class="line">    <span class="comment">// Without some nodes in the tree having empty base times.</span></span><br><span class="line">    mode |= ProfileMode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建fiber</span></span><br><span class="line">  <span class="keyword">return</span> createFiber(HostRoot, <span class="literal">null</span>, <span class="literal">null</span>, mode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Fiber对象"><a href="#Fiber对象" class="headerlink" title="Fiber对象"></a>Fiber对象</h4><p><a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiber.js" target="_blank" rel="noopener">Fiber对象</a>的定义在<code>packages/react-reconciler/src/ReactFiber.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个Fiber对象作用于一个组件</span></span><br><span class="line"><span class="keyword">export</span> type Fiber = &#123;|</span><br><span class="line">  <span class="comment">// 标记fiber类型tag</span></span><br><span class="line">  tag: TypeOfWork,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 唯一标识</span></span><br><span class="line">  key: <span class="literal">null</span> | string,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fiber对应的function/class/module类型组件名.</span></span><br><span class="line">  type: any,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fiber所在组件树的根组件FiberRoot对象</span></span><br><span class="line">  stateNode: any,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理完当前fiber后返回的fiber，</span></span><br><span class="line">  <span class="comment">// 返回当前fiber所在fiber树的父级fiber实例</span></span><br><span class="line">  <span class="keyword">return</span>: Fiber | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fiber树结构相关链接</span></span><br><span class="line">  child: Fiber | <span class="literal">null</span>,</span><br><span class="line">  sibling: Fiber | <span class="literal">null</span>,</span><br><span class="line">  index: number,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The ref last used to attach this node.</span></span><br><span class="line">  <span class="comment">// I'll avoid adding an owner field for prod and model that as functions.</span></span><br><span class="line">  ref: <span class="literal">null</span> | <span class="function">(<span class="params">((handle: mixed</span>) =&gt;</span> <span class="keyword">void</span>) &amp; &#123;<span class="attr">_stringRef</span>: ?string&#125;) | RefObject,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当前处理过程中的组件props对象</span></span><br><span class="line">  pendingProps: any, <span class="comment">// This type will be more specific once we overload the tag.</span></span><br><span class="line">  <span class="comment">// 缓存的之前组件props对象</span></span><br><span class="line">  memoizedProps: any, <span class="comment">// The props used to create the output.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组件状态更新及对应回调函数的存储队列</span></span><br><span class="line">  updateQueue: UpdateQueue&lt;any&gt; | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The state used to create the output</span></span><br><span class="line">  memoizedState: any,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A linked-list of contexts that this fiber depends on</span></span><br><span class="line">  firstContextDependency: ContextDependency&lt;mixed&gt; | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Bitfield that describes properties about the fiber and its subtree. E.g.</span></span><br><span class="line">  <span class="comment">// the AsyncMode flag indicates whether the subtree should be async-by-</span></span><br><span class="line">  <span class="comment">// default. When a fiber is created, it inherits the mode of its</span></span><br><span class="line">  <span class="comment">// parent. Additional flags can be set at creation time, but after that the</span></span><br><span class="line">  <span class="comment">// value should remain unchanged throughout the fiber's lifetime, particularly</span></span><br><span class="line">  <span class="comment">// before its child fibers are created.</span></span><br><span class="line">  mode: TypeOfMode,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Effect</span></span><br><span class="line">  effectTag: TypeOfSideEffect,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Singly linked list fast path to the next fiber with side-effects.</span></span><br><span class="line">  nextEffect: Fiber | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The first and last fiber with side-effect within this subtree. This allows</span></span><br><span class="line">  <span class="comment">// us to reuse a slice of the linked list when we reuse the work done within</span></span><br><span class="line">  <span class="comment">// this fiber.</span></span><br><span class="line">  firstEffect: Fiber | <span class="literal">null</span>,</span><br><span class="line">  lastEffect: Fiber | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新任务的最晚执行时间</span></span><br><span class="line">  expirationTime: ExpirationTime,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This is used to quickly determine if a subtree has no pending changes.</span></span><br><span class="line">  childExpirationTime: ExpirationTime,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fiber的版本池，即记录fiber更新过程，便于恢复</span></span><br><span class="line">  alternate: Fiber | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Conceptual aliases  </span></span><br><span class="line">  <span class="comment">// workInProgress : Fiber -&gt;  alternate The alternate used for reuse happens  </span></span><br><span class="line">  <span class="comment">// to be the same as work in progress.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Time spent rendering this Fiber and its descendants for the current update.</span></span><br><span class="line">  <span class="comment">// This tells us how well the tree makes use of sCU for memoization.</span></span><br><span class="line">  <span class="comment">// It is reset to 0 each time we render and only updated when we don't bailout.</span></span><br><span class="line">  <span class="comment">// This field is only set when the enableProfilerTimer flag is enabled.</span></span><br><span class="line">  actualDuration?: number,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If the Fiber is currently active in the "render" phase,</span></span><br><span class="line">  <span class="comment">// This marks the time at which the work began.</span></span><br><span class="line">  <span class="comment">// This field is only set when the enableProfilerTimer flag is enabled.</span></span><br><span class="line">  actualStartTime?: number,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Duration of the most recent render time for this Fiber.</span></span><br><span class="line">  <span class="comment">// This value is not updated when we bailout for memoization purposes.</span></span><br><span class="line">  <span class="comment">// This field is only set when the enableProfilerTimer flag is enabled.</span></span><br><span class="line">  selfBaseDuration?: number,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sum of base times for all descedents of this Fiber.</span></span><br><span class="line">  <span class="comment">// This value bubbles up during the "complete" phase.</span></span><br><span class="line">  <span class="comment">// This field is only set when the enableProfilerTimer flag is enabled.</span></span><br><span class="line">  treeBaseDuration?: number,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Conceptual aliases</span></span><br><span class="line">  <span class="comment">// workInProgress : Fiber -&gt;  alternate The alternate used for reuse happens</span></span><br><span class="line">  <span class="comment">// to be the same as work in progress.</span></span><br><span class="line">  <span class="comment">// __DEV__ only</span></span><br><span class="line">  _debugID?: number,</span><br><span class="line">  _debugSource?: Source | <span class="literal">null</span>,</span><br><span class="line">  _debugOwner?: Fiber | <span class="literal">null</span>,</span><br><span class="line">  _debugIsCurrentlyTiming?: boolean,</span><br><span class="line">|&#125;;</span><br></pre></td></tr></table></figure></p><ol><li>type &amp; key：同React元素的值；</li><li>type：描述fiber对应的React组件；<ol><li>对于组合组件：值为function或class组件本身；</li><li>对于原生组件（div等）：值为该元素类型字符串；</li></ol></li><li>key：调和阶段，标识fiber，以检测是否可重用该fiber实例；</li><li>child &amp; sibling：组件树，对应生成fiber树，类比的关系；</li><li>pendingProps &amp; memoizedProps：分别表示组件当前传入的及之前的props；</li><li>return：返回当前fiber所在fiber树的父级fiber实例，即当前组件的父组件对应的fiber；</li><li>alternate：fiber的版本池，即记录fiber更新过程，便于恢复重用；</li><li>workInProgress：正在处理的fiber，概念上叫法，实际上没有此属性；</li></ol><h5 id="alternate-fiber"><a href="#alternate-fiber" class="headerlink" title="alternate fiber"></a>alternate fiber</h5><p>可以理解为一个fiber版本池，用于交替记录组件更新（切分任务后变成多阶段更新）过程中fiber的更新，因为在组件更新的各阶段，更新前及更新过程中fiber状态并不一致，在需要恢复时（如，发生冲突），即可使用另一者直接回退至上一版本fiber。</p><blockquote><ol><li>使用alternate属性双向连接一个当前fiber和其work-in-progress，当前fiber实例的alternate属性指向其work-in-progress，work-in-progress的alternate属性指向当前稳定fiber；</li><li>当前fiber的替换版本是其work-in-progress，work-in-progress的交替版本是当前fiber；</li><li>当work-in-progress更新一次后，将同步至当前fiber，然后继续处理，同步直至任务完成；</li><li>work-in-progress指向处理过程中的fiber，而当前fiber总是维护处理完成的最新版本的fiber。</li></ol></blockquote><h5 id="创建Fiber实例"><a href="#创建Fiber实例" class="headerlink" title="创建Fiber实例"></a>创建Fiber实例</h5><p>创建fiber实例即返回一个带有上一小节描述的诸多属性的JavaScript对象，FiberNode即根据传入的参数构造返回一个初始化的对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createFiber = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  tag: TypeOfWork,</span></span></span><br><span class="line"><span class="function"><span class="params">  pendingProps: mixed,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: null | string,</span></span></span><br><span class="line"><span class="function"><span class="params">  mode: TypeOfMode,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Fiber</span> </span>&#123;</span><br><span class="line">  <span class="comment">// $FlowFixMe: the shapes are exact here but Flow doesn't like constructors</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> FiberNode(tag, pendingProps, key, mode);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>创建alternate fiber以处理任务的实现如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个alternate fiber处理任务</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createWorkInProgress</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  current: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">  pendingProps: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  expirationTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Fiber</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> workInProgress = current.alternate;</span><br><span class="line">  <span class="keyword">if</span> (workInProgress === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// We use a double buffering pooling technique because we know that we'll</span></span><br><span class="line">    <span class="comment">// only ever need at most two versions of a tree. We pool the "other" unused</span></span><br><span class="line">    <span class="comment">// node that we're free to reuse. This is lazily created to avoid allocating</span></span><br><span class="line">    <span class="comment">// extra objects for things that are never updated. It also allow us to</span></span><br><span class="line">    <span class="comment">// reclaim the extra memory if needed.</span></span><br><span class="line">    workInProgress = createFiber(</span><br><span class="line">      current.tag,</span><br><span class="line">      pendingProps,</span><br><span class="line">      current.key,</span><br><span class="line">      current.mode,</span><br><span class="line">    );</span><br><span class="line">    workInProgress.type = current.type;</span><br><span class="line">    workInProgress.stateNode = current.stateNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      <span class="comment">// DEV-only fields</span></span><br><span class="line">      workInProgress._debugID = current._debugID;</span><br><span class="line">      workInProgress._debugSource = current._debugSource;</span><br><span class="line">      workInProgress._debugOwner = current._debugOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    workInProgress.alternate = current;</span><br><span class="line">    current.alternate = workInProgress;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    workInProgress.pendingProps = pendingProps;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We already have an alternate.</span></span><br><span class="line">    <span class="comment">// Reset the effect tag.</span></span><br><span class="line">    workInProgress.effectTag = NoEffect;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The effect list is no longer valid.</span></span><br><span class="line">    workInProgress.nextEffect = <span class="literal">null</span>;</span><br><span class="line">    workInProgress.firstEffect = <span class="literal">null</span>;</span><br><span class="line">    workInProgress.lastEffect = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (enableProfilerTimer) &#123;</span><br><span class="line">      <span class="comment">// We intentionally reset, rather than copy, actualDuration &amp; actualStartTime.</span></span><br><span class="line">      <span class="comment">// This prevents time from endlessly accumulating in new commits.</span></span><br><span class="line">      <span class="comment">// This has the downside of resetting values for different priority renders,</span></span><br><span class="line">      <span class="comment">// But works for yielding (the common case) and should support resuming.</span></span><br><span class="line">      workInProgress.actualDuration = <span class="number">0</span>;</span><br><span class="line">      workInProgress.actualStartTime = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Don't touching the subtree's expiration time, which has not changed.</span></span><br><span class="line">  workInProgress.childExpirationTime = current.childExpirationTime;</span><br><span class="line">  <span class="keyword">if</span> (pendingProps !== current.pendingProps) &#123;</span><br><span class="line">    <span class="comment">// This fiber has new props.</span></span><br><span class="line">    workInProgress.expirationTime = expirationTime;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// This fiber's props have not changed.</span></span><br><span class="line">    workInProgress.expirationTime = current.expirationTime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  workInProgress.child = current.child;</span><br><span class="line">  workInProgress.memoizedProps = current.memoizedProps;</span><br><span class="line">  workInProgress.memoizedState = current.memoizedState;</span><br><span class="line">  workInProgress.updateQueue = current.updateQueue;</span><br><span class="line">  workInProgress.firstContextDependency = current.firstContextDependency;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// These will be overridden during the parent's reconciliation</span></span><br><span class="line">  workInProgress.sibling = current.sibling;</span><br><span class="line">  workInProgress.index = current.index;</span><br><span class="line">  workInProgress.ref = current.ref;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enableProfilerTimer) &#123;</span><br><span class="line">    workInProgress.selfBaseDuration = current.selfBaseDuration;</span><br><span class="line">    workInProgress.treeBaseDuration = current.treeBaseDuration;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> workInProgress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Fiber类型"><a href="#Fiber类型" class="headerlink" title="Fiber类型"></a>Fiber类型</h4><p>上一小节，Fiber对象中有个tag属性，标记fiber类型，而fiber实例是和组件对应的，所以其类型基本上对应于组件类型，在<code>packages/shared/ReactWorkTags.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type TypeOfWork = | <span class="number">0</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">6</span> | <span class="number">7</span> | <span class="number">8</span> | <span class="number">9</span> | <span class="number">10</span> | <span class="number">11</span> | <span class="number">12</span> | <span class="number">13</span> | <span class="number">14</span> | <span class="number">15</span> | <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FunctionalComponent = <span class="number">0</span>; <span class="comment">// 函数式组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FunctionalComponentLazy = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ClassComponent = <span class="number">2</span>; <span class="comment">// Class类组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ClassComponentLazy = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> IndeterminateComponent = <span class="number">4</span>; <span class="comment">// Before we know whether it is functional or class</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> HostRoot = <span class="number">5</span>; <span class="comment">// 组件树根组件，可以嵌套</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> HostPortal = <span class="number">6</span>; <span class="comment">// 子树。可以是一个入口点不同的渲染器。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> HostComponent = <span class="number">7</span>; <span class="comment">// 标准组件，如地div， span等</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> HostText = <span class="number">8</span>; <span class="comment">// 文本</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Fragment = <span class="number">9</span>;  <span class="comment">// 片段</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Mode = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ContextConsumer = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ContextProvider = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ForwardRef = <span class="number">13</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ForwardRefLazy = <span class="number">14</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Profiler = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PlaceholderComponent = <span class="number">16</span>; <span class="comment">// placeholder（占位符）</span></span><br></pre></td></tr></table></figure></p><p>在调度执行任务的时候会根据不同类型fiber，即fiber.tag值进行不同处理。</p><h4 id="FiberRoot对象"><a href="#FiberRoot对象" class="headerlink" title="FiberRoot对象"></a>FiberRoot对象</h4><p>FiberRoot对象，主要用来管理组件树组件的更新进程，同时记录组件树挂载的DOM容器相关信息，在<code>packages/react-reconciler/src/ReactFiberRoot.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type FiberRoot = &#123;</span><br><span class="line">  <span class="comment">// fiber节点的容器元素相关信息，通常会直接传入容器元素</span></span><br><span class="line">  containerInfo: any,</span><br><span class="line">  <span class="comment">// Used only by persistent updates.</span></span><br><span class="line">  pendingChildren: any,</span><br><span class="line">  <span class="comment">// 当前fiber树中激活状态（正在处理）的fiber节点，</span></span><br><span class="line">  current: Fiber,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The following priority levels are used to distinguish between 1)</span></span><br><span class="line">  <span class="comment">// uncommitted work, 2) uncommitted work that is suspended, and 3) uncommitted</span></span><br><span class="line">  <span class="comment">// work that may be unsuspended. We choose not to track each individual</span></span><br><span class="line">  <span class="comment">// pending level, trading granularity for performance.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// The earliest and latest priority levels that are suspended from committing.</span></span><br><span class="line">  earliestSuspendedTime: ExpirationTime,</span><br><span class="line">  latestSuspendedTime: ExpirationTime,</span><br><span class="line">  <span class="comment">// The earliest and latest priority levels that are not known to be suspended.</span></span><br><span class="line">  earliestPendingTime: ExpirationTime,</span><br><span class="line">  latestPendingTime: ExpirationTime,</span><br><span class="line">  <span class="comment">// The latest priority level that was pinged by a resolved promise and can</span></span><br><span class="line">  <span class="comment">// be retried.</span></span><br><span class="line">  latestPingedTime: ExpirationTime,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If an error is thrown, and there are no more updates in the queue, we try</span></span><br><span class="line">  <span class="comment">// rendering from the root one more time, synchronously, before handling</span></span><br><span class="line">  <span class="comment">// the error.</span></span><br><span class="line">  didError: boolean,</span><br><span class="line"></span><br><span class="line">  pendingCommitExpirationTime: ExpirationTime,</span><br><span class="line">  <span class="comment">// 准备好提交的已处理完成的work-in-progress</span></span><br><span class="line">  finishedWork: Fiber | <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// Timeout handle returned by setTimeout. Used to cancel a pending timeout, if</span></span><br><span class="line">  <span class="comment">// it's superseded by a new one.</span></span><br><span class="line">  timeoutHandle: TimeoutHandle | NoTimeout,</span><br><span class="line">  <span class="comment">// Top context object, used by renderSubtreeIntoContainer</span></span><br><span class="line">  context: <span class="built_in">Object</span> | <span class="literal">null</span>,</span><br><span class="line">  pendingContext: <span class="built_in">Object</span> | <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// Determines if we should attempt to hydrate on the initial mount</span></span><br><span class="line">  +hydrate: boolean,</span><br><span class="line">  <span class="comment">// Remaining expiration time on this root.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Lift this into the renderer</span></span><br><span class="line">  nextExpirationTimeToWorkOn: ExpirationTime,</span><br><span class="line">  expirationTime: ExpirationTime,</span><br><span class="line">  <span class="comment">// List of top-level batches. This list indicates whether a commit should be</span></span><br><span class="line">  <span class="comment">// deferred. Also contains completion callbacks.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Lift this into the renderer</span></span><br><span class="line">  firstBatch: Batch | <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 多组件树FirberRoot对象以单链表存储链接，指向下一个需要调度的FiberRoot</span></span><br><span class="line">  nextScheduledRoot: FiberRoot | <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h5 id="创建FiberRoot实例"><a href="#创建FiberRoot实例" class="headerlink" title="创建FiberRoot实例"></a>创建FiberRoot实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ClassComponent,</span><br><span class="line">  HostRoot,</span><br><span class="line">  Mode,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'shared/ReactTypeOfWork'</span>;</span><br><span class="line"><span class="comment">// 创建返回一个初始根组件对应的fiber实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createHostRootFiber</span>(<span class="params">isAsync: boolean</span>): <span class="title">Fiber</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> mode = isAsync ? AsyncMode | StrictMode : NoContext;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enableProfilerTimer &amp;&amp; isDevToolsPresent) &#123;</span><br><span class="line">    <span class="comment">// Always collect profile timings when DevTools are present.</span></span><br><span class="line">    <span class="comment">// This enables DevTools to start capturing timing at any point–</span></span><br><span class="line">    <span class="comment">// Without some nodes in the tree having empty base times.</span></span><br><span class="line">    mode |= ProfileMode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建fiber</span></span><br><span class="line">  <span class="keyword">return</span> createFiber(HostRoot, <span class="literal">null</span>, <span class="literal">null</span>, mode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createFiberRoot</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  containerInfo: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  isAsync: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrate: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">FiberRoot</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建初始根组件对应的fiber实例</span></span><br><span class="line">  <span class="keyword">const</span> uninitializedFiber = createHostRootFiber(isAsync);</span><br><span class="line">  <span class="comment">// 组件树根组件的FiberRoot对象</span></span><br><span class="line">  <span class="keyword">const</span> root = &#123;</span><br><span class="line">    <span class="comment">// 根组件对应的fiber实例</span></span><br><span class="line">    current: uninitializedFiber,</span><br><span class="line">    containerInfo: containerInfo,</span><br><span class="line">    pendingChildren: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    earliestPendingTime: NoWork,</span><br><span class="line">    latestPendingTime: NoWork,</span><br><span class="line">    earliestSuspendedTime: NoWork,</span><br><span class="line">    latestSuspendedTime: NoWork,</span><br><span class="line">    latestPingedTime: NoWork,</span><br><span class="line"></span><br><span class="line">    didError: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    pendingCommitExpirationTime: NoWork,</span><br><span class="line">    finishedWork: <span class="literal">null</span>,</span><br><span class="line">    timeoutHandle: noTimeout,</span><br><span class="line">    context: <span class="literal">null</span>,</span><br><span class="line">    pendingContext: <span class="literal">null</span>,</span><br><span class="line">    hydrate,</span><br><span class="line">    nextExpirationTimeToWorkOn: NoWork,</span><br><span class="line">    expirationTime: NoWork,</span><br><span class="line">    firstBatch: <span class="literal">null</span>,</span><br><span class="line">    nextScheduledRoot: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 组件树根组件fiber实例的stateNode指向FiberRoot对象</span></span><br><span class="line">  uninitializedFiber.stateNode = root;</span><br><span class="line">  <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ReactChildFiber"><a href="#ReactChildFiber" class="headerlink" title="ReactChildFiber"></a>ReactChildFiber</h4><p>在生成组件树的FiberRoot对象后，会为子组件生成各自的fiber实例，这一部分由<a href="">ReactChildFiber模块</a>实现，在<code>packages/react-reconciler/src/ReactChildFiber.js</code>中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调和（处理更新）子fibers</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reconcileChildFibers = ChildReconciler(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 挂载（初始化）子fibers</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mountChildFibers = ChildReconciler(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>而ChildReconciler方法所做的则是根据传入参数判断是调用初始化子组件fibers逻辑还是执行调和已有子组件fibers逻辑。</p><p>ChildReconciler方法，返回reconcileChildFibers方法：</p><ol><li>判断子级传递内容的数据类型，执行不同的处理，这也对应着我们写React组件时传递props.children时，其类型可以是对象或数组，字符串，是数字等；</li><li>然后具体根据子组件类型，调用不同的具体调和处理函数；</li><li>最后返回根据子组件创建或更新得到的fiber实例；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reconcileChildFibers</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    returnFiber: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">    currentFirstChild: Fiber | null,</span></span></span><br><span class="line"><span class="function"><span class="params">    newChild: any,</span></span></span><br><span class="line"><span class="function"><span class="params">    expirationTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">Fiber</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">    <span class="comment">// This function is not recursive.</span></span><br><span class="line">    <span class="comment">// If the top level item is an array, we treat it as a set of children,</span></span><br><span class="line">    <span class="comment">// not as a fragment. Nested arrays on the other hand will be treated as</span></span><br><span class="line">    <span class="comment">// fragment nodes. Recursion happens at the normal flow.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle top level unkeyed fragments as if they were arrays.</span></span><br><span class="line">    <span class="comment">// This leads to an ambiguity between &lt;&gt;&#123;[...]&#125;&lt;/&gt; and &lt;&gt;...&lt;/&gt;.</span></span><br><span class="line">    <span class="comment">// We treat the ambiguous cases above the same.</span></span><br><span class="line">    <span class="keyword">const</span> isUnkeyedTopLevelFragment =</span><br><span class="line">      <span class="keyword">typeof</span> newChild === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">      newChild !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      newChild.type === REACT_FRAGMENT_TYPE &amp;&amp;</span><br><span class="line">      newChild.key === <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (isUnkeyedTopLevelFragment) &#123;</span><br><span class="line">      newChild = newChild.props.children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle object types</span></span><br><span class="line">    <span class="keyword">const</span> isObject = <span class="keyword">typeof</span> newChild === <span class="string">'object'</span> &amp;&amp; newChild !== <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isObject) &#123;</span><br><span class="line">      <span class="comment">// 子组件实例类型，以Symbol符号表示的</span></span><br><span class="line">      <span class="keyword">switch</span> (newChild.$$<span class="keyword">typeof</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> REACT_ELEMENT_TYPE:</span><br><span class="line">          <span class="keyword">return</span> placeSingleChild(</span><br><span class="line">            reconcileSingleElement(</span><br><span class="line">              returnFiber,</span><br><span class="line">              currentFirstChild,</span><br><span class="line">              newChild,</span><br><span class="line">              expirationTime,</span><br><span class="line">            ),</span><br><span class="line">          );</span><br><span class="line">         <span class="comment">// React组件调用</span></span><br><span class="line">        <span class="keyword">case</span> REACT_PORTAL_TYPE:</span><br><span class="line">          <span class="keyword">return</span> placeSingleChild(</span><br><span class="line">            reconcileSinglePortal(</span><br><span class="line">              returnFiber,</span><br><span class="line">              currentFirstChild,</span><br><span class="line">              newChild,</span><br><span class="line">              expirationTime,</span><br><span class="line">            ),</span><br><span class="line">          );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> newChild === <span class="string">'string'</span> || <span class="keyword">typeof</span> newChild === <span class="string">'number'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> placeSingleChild(</span><br><span class="line">        reconcileSingleTextNode(</span><br><span class="line">          returnFiber,</span><br><span class="line">          currentFirstChild,</span><br><span class="line">          <span class="string">''</span> + newChild,</span><br><span class="line">          expirationTime,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isArray(newChild)) &#123;</span><br><span class="line">      <span class="keyword">return</span> reconcileChildrenArray(</span><br><span class="line">        returnFiber,</span><br><span class="line">        currentFirstChild,</span><br><span class="line">        newChild,</span><br><span class="line">        expirationTime,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getIteratorFn(newChild)) &#123;</span><br><span class="line">      <span class="keyword">return</span> reconcileChildrenIterator(</span><br><span class="line">        returnFiber,</span><br><span class="line">        currentFirstChild,</span><br><span class="line">        newChild,</span><br><span class="line">        expirationTime,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isObject) &#123;</span><br><span class="line">      throwOnInvalidObjectType(returnFiber, newChild);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> newChild === <span class="string">'function'</span>) &#123;</span><br><span class="line">        warnOnFunctionType();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> newChild === <span class="string">'undefined'</span> &amp;&amp; !isUnkeyedTopLevelFragment) &#123;</span><br><span class="line">      <span class="comment">// If the new child is undefined, and the return fiber is a composite</span></span><br><span class="line">      <span class="comment">// component, throw an error. If Fiber return types are disabled,</span></span><br><span class="line">      <span class="comment">// we already threw above.</span></span><br><span class="line">      <span class="keyword">switch</span> (returnFiber.tag) &#123;</span><br><span class="line">        <span class="keyword">case</span> ClassComponent:</span><br><span class="line">        <span class="keyword">case</span> ClassComponentLazy: &#123;</span><br><span class="line">          <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">            <span class="keyword">const</span> instance = returnFiber.stateNode;</span><br><span class="line">            <span class="keyword">if</span> (instance.render._isMockFunction) &#123;</span><br><span class="line">              <span class="comment">// We allow auto-mocks to proceed as if they're returning null.</span></span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Intentionally fall through to the next case, which handles both</span></span><br><span class="line">        <span class="comment">// functions and classes</span></span><br><span class="line">        <span class="comment">// eslint-disable-next-lined no-fallthrough</span></span><br><span class="line">        <span class="keyword">case</span> FunctionalComponent: &#123;</span><br><span class="line">          <span class="keyword">const</span> Component = returnFiber.type;</span><br><span class="line">          invariant(</span><br><span class="line">            <span class="literal">false</span>,</span><br><span class="line">            <span class="string">'%s(...): Nothing was returned from render. This usually means a '</span> +</span><br><span class="line">              <span class="string">'return statement is missing. Or, to render nothing, '</span> +</span><br><span class="line">              <span class="string">'return null.'</span>,</span><br><span class="line">            Component.displayName || Component.name || <span class="string">'Component'</span>,</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remaining cases are all treated as empty.</span></span><br><span class="line">    <span class="keyword">return</span> deleteRemainingChildren(returnFiber, currentFirstChild);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> reconcileChildFibers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fiber架构"><a href="#Fiber架构" class="headerlink" title="Fiber架构"></a>Fiber架构</h3><p>在学习Fiber的时候，我尝试去阅读源码，发现通过这种方式很难快速理解，学习Fiber，而先了解调和器是干什么的及调和器在React中的存在形式，然后再学习Fiber的结构及算法实现思路，明白从组件被定义到渲染至页面它需要做什么，这也是本篇文章的组织形式。</p><h4 id="优先级（ExpirationTime-VS-PriorityLevel）"><a href="#优先级（ExpirationTime-VS-PriorityLevel）" class="headerlink" title="优先级（ExpirationTime VS PriorityLevel）"></a>优先级（ExpirationTime VS PriorityLevel）</h4><p>我们已经知道Fiber可以切分任务并设置不同优先级，那么是如何实现划分优先级的呢，其表现形式什么呢？</p><h5 id="ExpirationTime"><a href="#ExpirationTime" class="headerlink" title="ExpirationTime"></a>ExpirationTime</h5><p>Fiber切分任务并调用requestIdleCallback和requestAnimationFrameAPI，保证渲染任务和其他任务，在不影响应用交互，不掉帧的前提下，稳定执行，而实现调度的方式正是给每一个fiber实例设置到期执行时间，不同时间即代表不同优先级，到期时间越短，则代表优先级越高，需要尽早执行。</p><blockquote><p>所谓的到期时间（ExpirationTime），是相对于调度器初始调用的起始时间而言的一个时间段；调度器初始调用后的某一段时间内，需要调度完成这项更新，这个时间段长度值就是到期时间值。</p></blockquote><p>Fiber提供<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberExpirationTime.js" target="_blank" rel="noopener">ReactFiberExpirationTime模块</a>实现到期时间的定义，在<code>packages/react-reconciler/src/ReactFiberExpirationTime.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> NoWork = <span class="number">0</span>; <span class="comment">// 没有任务等待处理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Sync = <span class="number">1</span>; <span class="comment">// 同步模式，立即处理任务</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Never = MAX_SIGNED_31_BIT_INT; <span class="comment">// 1073741823 Max 31: Math.pow(2, 30) - 1 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UNIT_SIZE = <span class="number">10</span>; <span class="comment">// 过期时间单元（ms）</span></span><br><span class="line"><span class="keyword">const</span> MAGIC_NUMBER_OFFSET = <span class="number">2</span>; <span class="comment">// 到期时间偏移量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以ExpirationTime特定单位（1单位=10ms）表示的到期执行时间</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">msToExpirationTime</span>(<span class="params">ms: number</span>): <span class="title">ExpirationTime</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 总是增加一个偏移量，在ms&lt;10时与Nowork模式进行区别</span></span><br><span class="line">  <span class="keyword">return</span> ((ms / UNIT_SIZE) | <span class="number">0</span>) + MAGIC_NUMBER_OFFSET;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以毫秒表示的到期执行时间</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">expirationTimeToMs</span>(<span class="params">expirationTime: ExpirationTime</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向上取整（整数单位到期执行时间）</span></span><br><span class="line"><span class="comment">// precision范围精度：弥补任务执行时间误差</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ceiling</span>(<span class="params">num: number, precision: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (((num / precision) | <span class="number">0</span>) + <span class="number">1</span>) * precision;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算处理误差时间在内的到期时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeExpirationBucket</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  currentTime,</span></span></span><br><span class="line"><span class="function"><span class="params">  expirationInMs,</span></span></span><br><span class="line"><span class="function"><span class="params">  bucketSizeMs,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ExpirationTime</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    MAGIC_NUMBER_OFFSET +</span><br><span class="line">    ceiling(</span><br><span class="line">      currentTime - MAGIC_NUMBER_OFFSET + expirationInMs / UNIT_SIZE,</span><br><span class="line">      bucketSizeMs / UNIT_SIZE,</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> LOW_PRIORITY_EXPIRATION = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> LOW_PRIORITY_BATCH_SIZE = <span class="number">250</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">computeAsyncExpiration</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  currentTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ExpirationTime</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> computeExpirationBucket(</span><br><span class="line">    currentTime,</span><br><span class="line">    LOW_PRIORITY_EXPIRATION,</span><br><span class="line">    LOW_PRIORITY_BATCH_SIZE,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We intentionally set a higher expiration time for interactive updates in</span></span><br><span class="line"><span class="comment">// dev than in production.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If the main thread is being blocked so long that you hit the expiration,</span></span><br><span class="line"><span class="comment">// it's a problem that could be solved with better scheduling.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// People will be more likely to notice this and fix it with the long</span></span><br><span class="line"><span class="comment">// expiration time in development.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// In production we opt for better UX at the risk of masking scheduling</span></span><br><span class="line"><span class="comment">// problems, by expiring fast.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> HIGH_PRIORITY_EXPIRATION = __DEV__ ? <span class="number">500</span> : <span class="number">150</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> HIGH_PRIORITY_BATCH_SIZE = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">computeInteractiveExpiration</span>(<span class="params">currentTime: ExpirationTime</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> computeExpirationBucket(</span><br><span class="line">    currentTime,</span><br><span class="line">    HIGH_PRIORITY_EXPIRATION,</span><br><span class="line">    HIGH_PRIORITY_BATCH_SIZE,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该模块提供的功能主要有：</p><ol><li>Sync：同步模式，在UI线程立即执行此类任务，如动画反馈等；</li><li>异步模式：<ol><li>转换：到期时间特定单位和时间单位（ms）的相互转换；</li><li>计算：计算包含允许误差在内的到期时间；</li></ol></li></ol><h5 id="PriorityLevel"><a href="#PriorityLevel" class="headerlink" title="PriorityLevel"></a>PriorityLevel</h5><p>其实在15.x版本中出现了对于任务的优先层级划分，<a href="https://github.com/facebook/react/blob/15.6-dev/src/renderers/shared/fiber/ReactPriorityLevel.js" target="_blank" rel="noopener">ReactPriorityLevel模块</a>，在<code>/src/renderers/shared/fiber/ReactPriorityLevel.js</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type PriorityLevel = <span class="number">0</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  NoWork: <span class="number">0</span>, <span class="comment">// No work is pending.</span></span><br><span class="line">  SynchronousPriority: <span class="number">1</span>, <span class="comment">// For controlled text inputs. Synchronous side-effects.</span></span><br><span class="line">  AnimationPriority: <span class="number">2</span>, <span class="comment">// Needs to complete before the next frame.</span></span><br><span class="line">  HighPriority: <span class="number">3</span>, <span class="comment">// Interaction that needs to complete pretty soon to feel responsive.</span></span><br><span class="line">  LowPriority: <span class="number">4</span>, <span class="comment">// Data fetching, or result from updating stores.</span></span><br><span class="line">  OffscreenPriority: <span class="number">5</span>, <span class="comment">// Won't be visible but do the work in case it becomes visible.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>相对于PriorityLevel的简单层级划分，在16.x版本中使用的则是ExpirationTime的到期时间方式表示任务的优先级，可以更好的对任务进行切分，调度。</p><h4 id="调度器（Scheduler）"><a href="#调度器（Scheduler）" class="headerlink" title="调度器（Scheduler）"></a>调度器（Scheduler）</h4><p>前面介绍调和器主要作用就是在组件状态变更时，调用组件树各组件的render方法，渲染，卸载组件，而Fiber使得应用可以更好的协调不同任务的执行，调和器内关于高效协调的实现，我们可以称它为调度器（Scheduler）。</p><blockquote><p>顾名思义，调度器即调度资源以执行指定任务，React应用中应用组件的更新与渲染，需要占用系统CPU资源，如果不能很好的进行资源平衡，合理调度，优化任务执行策略，那很容易造成CPU这一紧缺资源的消耗和浪费，容易造成页面卡顿，动画掉帧，组件更新异常等诸多问题，就像城市交通调度一样，如果不能有效调度，交通状况很可能将拥堵不堪。</p></blockquote><p>在React 15.x版本中，组件的状态变更将直接导致其子组件树的重新渲染，新版本Fiber算法将在调度器方面进行全面改进，主要的关注点是：</p><ol><li>合并多次更新：没有必要在组件的每一个状态变更时都立即触发更新任务，有些中间状态变更其实是对更新任务所耗费资源的浪费，就比如用户发现错误点击时快速操作导致组件某状态从A至B再至C，这中间的B状态变更其实对于用户而言并没有意义，那么我们可以直接合并状态变更，直接从A至C只触发一次更新；</li><li>任务优先级：不同类型的更新有不同优先级，例如用户操作引起的交互动画可能需要有更好的体验，其优先级应该比完成数据更新高；</li><li>推拉式调度：基于推送的调度方式更多的需要开发者编码间接决定如何调度任务，而拉取式调度更方便React框架层直接进行全局自主调度；</li></ol><p><a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberScheduler.js" target="_blank" rel="noopener">源码</a>在<code>packages/react-reconciler/src/ReactFiberScheduler.js</code>中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  requestCurrentTime,</span><br><span class="line">  computeExpirationForFiber,</span><br><span class="line">  captureCommitPhaseError,</span><br><span class="line">  onUncaughtError,</span><br><span class="line">  renderDidSuspend,</span><br><span class="line">  renderDidError,</span><br><span class="line">  retrySuspendedRoot,</span><br><span class="line">  markLegacyErrorBoundaryAsFailed,</span><br><span class="line">  isAlreadyFailedLegacyErrorBoundary,</span><br><span class="line">  scheduleWork,</span><br><span class="line">  requestWork,</span><br><span class="line">  flushRoot,</span><br><span class="line">  batchedUpdates,</span><br><span class="line">  unbatchedUpdates,</span><br><span class="line">  flushSync,</span><br><span class="line">  flushControlled,</span><br><span class="line">  deferredUpdates,</span><br><span class="line">  syncUpdates,</span><br><span class="line">  interactiveUpdates,</span><br><span class="line">  flushInteractiveUpdates,</span><br><span class="line">  computeUniqueAsyncExpiration,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如上调度器主要输出API为实现调度任务，拉取更新，延迟更新等功能。</p><h5 id="调度器与优先级"><a href="#调度器与优先级" class="headerlink" title="调度器与优先级"></a>调度器与优先级</h5><p>调度器如何切分任务划分优先级的呢？在React调和算法中，任务由fiber实例描述，所以要划分任务优先级，等效于设置fiber的到期时间（expirationTime），调度器内提供了computeExpirationForFiber方法以计算某一个fiber的到期时间，<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberScheduler.js" target="_blank" rel="noopener">源码</a>在<code>packages/react-reconciler/src/ReactFiberScheduler.js</code>中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  NoWork,</span><br><span class="line">  Sync,</span><br><span class="line">  Never,</span><br><span class="line">  msToExpirationTime,</span><br><span class="line">  expirationTimeToMs,</span><br><span class="line">  computeAsyncExpiration,</span><br><span class="line">  computeInteractiveExpiration,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./ReactFiberExpirationTime'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeExpirationForFiber</span>(<span class="params">currentTime: ExpirationTime, fiber: Fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> expirationTime;</span><br><span class="line">  <span class="keyword">if</span> (expirationContext !== NoWork) &#123;</span><br><span class="line">    <span class="comment">// An explicit expiration context was set;</span></span><br><span class="line">    expirationTime = expirationContext;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isWorking) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isCommitting) &#123;</span><br><span class="line">      <span class="comment">// 在提交阶段的更新任务 需要明确设置同步优先级（Sync Priority）</span></span><br><span class="line">      expirationTime = Sync;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 在渲染阶段发生的更新任务</span></span><br><span class="line">      <span class="comment">// 需要设置为下一次渲染时间的到期时间优先级</span></span><br><span class="line">      expirationTime = nextRenderExpirationTime;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// No explicit expiration context was set, and we're not currently</span></span><br><span class="line">    <span class="comment">// performing work. Calculate a new expiration time.</span></span><br><span class="line">    <span class="keyword">if</span> (fiber.mode &amp; AsyncMode) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isBatchingInteractiveUpdates) &#123;</span><br><span class="line">        <span class="comment">// This is an interactive update</span></span><br><span class="line">        expirationTime = computeInteractiveExpiration(currentTime);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// This is an async update</span></span><br><span class="line">        expirationTime = computeAsyncExpiration(currentTime);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// If we're in the middle of rendering a tree, do not update at the same</span></span><br><span class="line">      <span class="comment">// expiration time that is already rendering.</span></span><br><span class="line">      <span class="keyword">if</span> (nextRoot !== <span class="literal">null</span> &amp;&amp; expirationTime === nextRenderExpirationTime) &#123;</span><br><span class="line">        expirationTime += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 同步更新，设置为同步标记</span></span><br><span class="line">      expirationTime = Sync;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isBatchingInteractiveUpdates) &#123;</span><br><span class="line">    <span class="comment">// This is an interactive update. Keep track of the lowest pending</span></span><br><span class="line">    <span class="comment">// interactive expiration time. This allows us to synchronously flush</span></span><br><span class="line">    <span class="comment">// all interactive updates when needed.</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      lowestPendingInteractiveExpirationTime === NoWork ||</span><br><span class="line">      expirationTime &gt; lowestPendingInteractiveExpirationTime</span><br><span class="line">    ) &#123;</span><br><span class="line">      lowestPendingInteractiveExpirationTime = expirationTime;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> expirationTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>若当前处于任务提交阶段（更新提交至DOM渲染）时，设置当前fiber到期时间为Sync，即同步执行模式；</li><li>若处于DOM渲染阶段时，则需要延迟此fiber任务，将fiber到期时间设置为下一次DOM渲染到期时间；</li><li>若不在任务执行阶段，则需重新设置fiber到期时间：<ol><li>若明确设置useSyncScheduling且fiber.internalContextTag值不等于AsyncUpdates，则表明是同步模式，设置为Sync；</li><li>否则，调用computeAsyncExpiration方法重新计算此fiber的到期时间；</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重新计算当前时间（ExpirationTime单位表示）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recalculateCurrentTime</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">const</span> ms = now() - startTime;  </span><br><span class="line">  <span class="comment">// ExpirationTime单位表示的当前时间  </span></span><br><span class="line">  <span class="comment">// 时间段值为 now() - startTime（起始时间）  </span></span><br><span class="line">  mostRecentCurrentTime = msToExpirationTime(ms);  </span><br><span class="line">  <span class="keyword">return</span> mostRecentCurrentTime;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算异步任务的到期时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeAsyncExpiration</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// 计算得到ExpirationTime单位的当前时间  </span></span><br><span class="line">  <span class="comment">// 聚合相似的更新在一起  </span></span><br><span class="line">  <span class="comment">// 更新应该在 ~1000ms，最多1200ms内完成  </span></span><br><span class="line">  <span class="keyword">const</span> currentTime = recalculateCurrentTime();  </span><br><span class="line">  <span class="comment">// 对于每个fiber的期望到期时间的增值，最大值为1000ms </span></span><br><span class="line">  <span class="keyword">const</span> expirationMs = <span class="number">1000</span>;  </span><br><span class="line">  <span class="comment">// 到期时间的可接受误差时间，200ms </span></span><br><span class="line">  <span class="keyword">const</span> bucketSizeMs = <span class="number">200</span>;  </span><br><span class="line">  <span class="comment">// 返回包含误差时间在内的到期时间  </span></span><br><span class="line">  <span class="keyword">return</span> computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于每一个fiber我们期望的到期时间参数是1000ms，另外由于任务执行时间误差，接受200ms误差，最后计算得到的到期时间默认返回值为ExpirationTime单位。</p><h5 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h5><p>上一节介绍了调度器主要提供computeExpirationForFiber等方法支持计算任务优先级（到期时间），接下来介绍调度器如何调度任务。</p><blockquote><p>React应用更新时，Fiber从当前处理节点，层层遍历至组件树根组件，然后开始处理更新，调用前面的requestIdleCallback等API执行更新处理。</p></blockquote><p>主要调度逻辑实现在scheduleWork：</p><ol><li>通过fiber.return属性，从当前fiber实例层层遍历至组件树根组件；</li><li>依次对每一个fiber实例进行到期时间判断，若大于传入的期望任务到期时间参数，则将其更新为传入的任务到期时间；</li><li>调用requestWork方法开始处理任务，并传入获取的组件树根组件FiberRoot对象和任务到期时间；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="渲染与调和"><a href="#渲染与调和" class="headerlink" title="渲染与调和"></a>渲染与调和</h3><p>在调和阶段，不涉及任何DOM处理，在处理完更新后，需要渲染模块将更新渲染至DOM，这也是React应用中虚拟DOM（Virtual DOM）的概念，即所有的更新计算都基于虚拟DOM，计算完后才将优化后的更新渲染至真实DOM。Fiber使用requestIdleCallbackAPI更高效的执行渲染更新的任务，实现任务的切分。</p><h2 id="本文不断更新中"><a href="#本文不断更新中" class="headerlink" title="本文不断更新中"></a>本文不断更新中</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;版本：v16.5.2&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;当时在各种前端框架或库充斥市场的情况下，出现了大量优秀的框架，比如 Backb
      
    
    </summary>
    
      <category term="react" scheme="http://sosout.com/categories/react/"/>
    
    
      <category term="react" scheme="http://sosout.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS系统使用指南</title>
    <link href="http://sosout.com/2018/08/11/macos-tutorial.html"/>
    <id>http://sosout.com/2018/08/11/macos-tutorial.html</id>
    <published>2018-08-10T23:25:20.000Z</published>
    <updated>2018-09-25T11:39:02.762Z</updated>
    
    <content type="html"><![CDATA[<p>Mac OS是一套运行于苹果Macintosh系列电脑上的操作系统。Mac OS是首个在商用领域成功的图形用户界面操作系统。现行的最新的系统版本是OS X 10.12 ，且网上也有在PC上运行的Mac系统，简称 Mac PC。<br>Mac系统是基于Unix内核的图形化操作系统；一般情况下在普通PC上无法安装的操作系统。由苹果公司自行开发。苹果机的操作系统已经到了OS 10，代号为MAC OS X(X为10的罗马数字写法），这是MAC电脑诞生15年来最大的变化。新系统非常可靠；它的许多特点和服务都体现了苹果公司的理念。<br>另外，疯狂肆虐的电脑病毒几乎都是针对Windows的，由于MAC的架构与Windows不同，所以很少受到病毒的袭击。MAC OSX操作系统界面非常独特，突出了形象的图标和人机对话。苹果公司不仅自己开发系统，也涉及到硬件的开发。<br>接下来，我们就总结下Mac OS常见的使用指南。</p><h3 id="Mac电脑使用：您的安全性偏好设置仅允许安装来自App-Store和被认可的开发者的应用（解决方法）"><a href="#Mac电脑使用：您的安全性偏好设置仅允许安装来自App-Store和被认可的开发者的应用（解决方法）" class="headerlink" title="Mac电脑使用：您的安全性偏好设置仅允许安装来自App Store和被认可的开发者的应用（解决方法）"></a>Mac电脑使用：您的安全性偏好设置仅允许安装来自App Store和被认可的开发者的应用（解决方法）</h3><p><strong>1. 打开dock栏里面的“系统偏好设置”；</strong></p><p><img src="/images/macos-tutorial/img1.png" alt="img1.png"></p><p><strong>2. 在系统偏好设置里面，找到“安全性与隐私”选项；</strong></p><p><img src="/images/macos-tutorial/img2.png" alt="img2.png"></p><p><strong>3. 在安全性与隐私里面，找到左下角的锁型图标，然后点击锁，会弹出输入电脑开机密码的窗口，输入密码之后，点击“解锁”按钮，那个锁型变为开启的锁；</strong></p><p><img src="/images/macos-tutorial/img3.png" alt="img3.png"></p><p><img src="/images/macos-tutorial/img4.png" alt="img4.png"></p><p><strong>4. 解锁后，如果你的电脑里面在允许从以下位置下载应用有三个选项，就在允许从以下位置下载的应用选项中选择“任何来源”，在弹出的确认框里点击“允许来自任何来源”；如果你的电脑里面允许从以下位置下载的应用中只有两个选项，那你就直接去打开你刚才需要安装的那个程序的安装包，双击重新安装，会有一个提示框，也是提示允许来自任何来源安装的，然后就可以安装成功了，最后打开即可。</strong></p><p><img src="/images/macos-tutorial/img5.png" alt="img5.png"></p><h3 id="用终端连接远程服务器"><a href="#用终端连接远程服务器" class="headerlink" title="用终端连接远程服务器"></a>用终端连接远程服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录</span></span><br><span class="line">$ ssh -t root@121.199.61.169 -p 22</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">$ control + d</span><br></pre></td></tr></table></figure><h3 id="隐藏-显示-隐藏文件"><a href="#隐藏-显示-隐藏文件" class="headerlink" title="隐藏/显示 隐藏文件"></a>隐藏/显示 隐藏文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 凡是前面带有小点的隐藏文件，或者是显示淡蓝色的文件都是隐藏文件</span></span><br><span class="line">$ <span class="built_in">shift</span> + cmmand + .</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mac OS是一套运行于苹果Macintosh系列电脑上的操作系统。Mac OS是首个在商用领域成功的图形用户界面操作系统。现行的最新的系统版本是OS X 10.12 ，且网上也有在PC上运行的Mac系统，简称 Mac PC。&lt;br&gt;Mac系统是基于Unix内核的图形化操作
      
    
    </summary>
    
      <category term="mac" scheme="http://sosout.com/categories/mac/"/>
    
    
      <category term="mac" scheme="http://sosout.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式开发指南</title>
    <link href="http://sosout.com/2018/08/10/regular-expression-tutorial.html"/>
    <id>http://sosout.com/2018/08/10/regular-expression-tutorial.html</id>
    <published>2018-08-10T13:30:47.000Z</published>
    <updated>2018-08-24T10:57:06.053Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。<br>许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在Perl中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由Unix中的工具软件（例如sed和grep）普及开的。正则表达式通常缩写成“regex”，单数有regexp、regex，复数有regexps、regexes、regexen。</p><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><h3 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec() 方法"></a>exec() 方法</h3><h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>exec() 方法用于检索字符串中的正则表达式的匹配。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string: 必需。要检索的字符串。</span></span><br><span class="line">RegExpObject.exec(string);</span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>exec() 方法的功能非常强大，它是一个通用的方法，而且使用起来也比 test() 方法以及支持正则表达式的 String 对象的方法更为复杂。</p><p>如果 exec() 找到了匹配的文本，则返回一个结果数组。否则，返回 null。此数组的第 0 个元素是与正则表达式相匹配的文本，第 1 个元素是与 RegExpObject 的第 1 个子表达式相匹配的文本（如果有的话），第 2 个元素是与 RegExpObject 的第 2 个子表达式相匹配的文本（如果有的话），以此类推。除了数组元素和 length 属性之外，exec() 方法还返回两个属性。index 属性声明的是匹配文本的第一个字符的位置。input 属性则存放的是被检索的字符串 string。我们可以看得出，在调用非全局的 RegExp 对象的 exec() 方法时，返回的数组与调用方法 String.match() 返回的数组是相同的。</p><p>但是，当 RegExpObject 是一个全局正则表达式时，exec() 的行为就稍微复杂一些。它会在 RegExpObject 的 lastIndex 属性指定的字符处开始检索字符串 string。当 exec() 找到了与表达式相匹配的文本时，在匹配后，它将把 RegExpObject 的 lastIndex 属性设置为匹配文本的最后一个字符的下一个位置。这就是说，您可以通过反复调用 exec() 方法来遍历字符串中的所有匹配文本。当 exec() 再也找不到匹配的文本时，它将返回 null，并把 lastIndex 属性重置为 0。</p><h4 id="提示和注释"><a href="#提示和注释" class="headerlink" title="提示和注释"></a>提示和注释</h4><p>重要事项：如果在一个字符串中完成了一次模式匹配之后要开始检索新的字符串，就必须手动地把 lastIndex 属性重置为 0。</p><p>提示：请注意，无论 RegExpObject 是否是全局模式，exec() 都会把完整的细节添加到它返回的数组中。这就是 exec() 与 String.match() 的不同之处，后者在全局模式下返回的信息要少得多。因此我们可以这么说，在循环中反复地调用 exec() 方法是唯一一种获得全局模式的完整模式匹配信息的方法。</p><h3 id="和-1…-9的理解和使用"><a href="#和-1…-9的理解和使用" class="headerlink" title="()和$1…$9的理解和使用"></a>()和$1…$9的理解和使用</h3><p>()就是起到一个分组作用，将匹配到的放到mathches集合中，$相当于集合名字，1-9就相当于索引，$1…$9相当于对应索引的值。</p><p><strong>示例一</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将yyyy-MM-dd格式的日期转换为yyyy年MM月dd日</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"2018-07-02"</span>;</span><br><span class="line"><span class="keyword">const</span> reg =<span class="regexp">/(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">const</span> date = str.replace(reg,<span class="string">"$1年$2月$3日"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date); <span class="comment">// "2018年07月02日"</span></span><br></pre></td></tr></table></figure></p><p><strong>示例二</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将yyyy-MM-dd格式的日期转换为yyyy/MM/dd/</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"2018-07-02"</span>;</span><br><span class="line"><span class="keyword">const</span> reg =<span class="regexp">/(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">const</span> date = str.replace(reg,<span class="string">"$1/$2/$3"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date); <span class="comment">// "2018/07/02"</span></span><br></pre></td></tr></table></figure></p><h3 id="在-里面和在-外面如何区分"><a href="#在-里面和在-外面如何区分" class="headerlink" title="^在[]里面和在[]外面如何区分"></a>^在[]里面和在[]外面如何区分</h3><p><strong>^在[]里面</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/[^<span class="number">0</span><span class="number">-9</span>]/.test(<span class="string">'abc'</span>) <span class="comment">// true</span></span><br><span class="line">/[^<span class="number">0</span><span class="number">-9</span>]/.test(<span class="string">'123'</span>) <span class="comment">// false</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">归纳：^在[]里面代表是非数字，所以它代表是非。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**^在[]外面**</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> js</span><br><span class="line">/^[<span class="number">0</span><span class="number">-9</span>]/.test(<span class="string">'abc'</span>) <span class="comment">// false</span></span><br><span class="line">/^[<span class="number">0</span><span class="number">-9</span>]/.test(<span class="string">'1bc'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>归纳：^在[]外面代表是为首的数字，所以它代表头。</p><p>^在[]里面和在[]外面有一个记忆的方法：乌龟把头(^)缩进里面，变为无（非)头乌龟，乌龟把头(^)伸出来，变为头(首）领。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。&lt;br&gt;许多程序设计语言都支持利用正则表达式进行字符串操作。例如，
      
    
    </summary>
    
      <category term="regex" scheme="http://sosout.com/categories/regex/"/>
    
    
      <category term="regex" scheme="http://sosout.com/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发指南</title>
    <link href="http://sosout.com/2018/08/09/wechat-public-development-tutorial.html"/>
    <id>http://sosout.com/2018/08/09/wechat-public-development-tutorial.html</id>
    <published>2018-08-09T15:03:49.000Z</published>
    <updated>2018-08-24T10:57:06.056Z</updated>
    
    <content type="html"><![CDATA[<p>微信浏览器？啊，它是什么，好不好用，能吃不？我记得有个说法是这么评价微信浏览器的，微信浏览器就是移动端IE6。是程序员就知道IE什么样，好不好用。面向IE开发，我们经常会写出稀奇古怪的bug代码，同样的，基于微信浏览器开发也会BUG百出。因此，很有必要整理一些基于微信浏览器的开发技巧和开发问题。</p><h2 id="开发问题"><a href="#开发问题" class="headerlink" title="开发问题"></a>开发问题</h2><h3 id="vue-路由采用-history-模式在IOS中签名失败-Android签名良好"><a href="#vue-路由采用-history-模式在IOS中签名失败-Android签名良好" class="headerlink" title="vue 路由采用 history 模式在IOS中签名失败 Android签名良好"></a>vue 路由采用 history 模式在IOS中签名失败 Android签名良好</h3><p>基于微信公众号开发，我们经常会使用到分享、上传图片等功能，然而这种种功能都需要微信签名。提到签名，我们应该就会遇到签名失败的情况。接下来我们说说 vue 路由采用 history 模式在IOS中签名失败，Android签名良好的情况。</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>history 模式下视图是通过 pushState 来切换的，但IOS手机在微信浏览器中记录的 URL 只会是第一次进入时的URL，所以在IOS中，无论你路由怎么切换。真实的URL都是第一次进入应用时的URL。</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>每次路由变化时都重新请求下签名，同时在路由钩子函数里改写一下路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// beforeRouter</span></span><br><span class="line"><span class="keyword">if</span> (isWeixin() &amp;&amp; to.meta.wxSign &amp;&amp; to.path !== location.pathname) &#123;</span><br><span class="line">    location.assign(<span class="built_in">window</span>.location.protocol + <span class="string">'//'</span> + <span class="built_in">window</span>.location.host + to.fullPath)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两（多）张两张二维码无法在同一屏幕视窗中共存"><a href="#两（多）张两张二维码无法在同一屏幕视窗中共存" class="headerlink" title="两（多）张两张二维码无法在同一屏幕视窗中共存"></a>两（多）张两张二维码无法在同一屏幕视窗中共存</h3><p>同一屏幕视窗”是指微信内置浏览器中在当前的手机屏幕上显示的可见范围，我们发现，当同一同一屏幕视窗中存在两个或以上的二维码的时候，微信客户端就会识别错误，无论你按哪个二维码长按识别，识别出来都是同一个目标。这个问题在 iOS 版（iPhone）微信2.2及安卓版上均有。</p><h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><p>长按的时候相当于将当前手机屏幕截屏，识别截屏后的图片，这样一张图片有两个二维码图的时候当然只会识别出一个。</p><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><p>不要将两个二维码共存在同一个页面中。</p><h3 id="微信只调用相机不使用相册时，安卓会退出并刷新页面"><a href="#微信只调用相机不使用相册时，安卓会退出并刷新页面" class="headerlink" title="微信只调用相机不使用相册时，安卓会退出并刷新页面"></a>微信只调用相机不使用相册时，安卓会退出并刷新页面</h3><h4 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h4><p>相机和相册两者都加上！</p><h2 id="本文持续更新中"><a href="#本文持续更新中" class="headerlink" title="本文持续更新中"></a>本文持续更新中</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微信浏览器？啊，它是什么，好不好用，能吃不？我记得有个说法是这么评价微信浏览器的，微信浏览器就是移动端IE6。是程序员就知道IE什么样，好不好用。面向IE开发，我们经常会写出稀奇古怪的bug代码，同样的，基于微信浏览器开发也会BUG百出。因此，很有必要整理一些基于微信浏览器
      
    
    </summary>
    
      <category term="wechat" scheme="http://sosout.com/categories/wechat/"/>
    
    
      <category term="wechat" scheme="http://sosout.com/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>package.json 文件中的 module 字段</title>
    <link href="http://sosout.com/2018/08/08/package-json-module.html"/>
    <id>http://sosout.com/2018/08/08/package-json-module.html</id>
    <published>2018-08-08T15:47:07.000Z</published>
    <updated>2018-08-31T12:39:45.775Z</updated>
    
    <content type="html"><![CDATA[<p>通常基于 NPM 托管的项目都会有一个 package.json 文件，它是项目的描述文件，它的内容是一个标准的 JSON 对象。相信大家对 package.json 常用配置肯定熟悉的不能再熟悉了，例如项目名称（name）、项目版本号（version）、项目描述 （description）、npm 命令（scripts）等等，而我们今天主要聊聊<code>pkg.module</code>字段的功能以及使用场景。</p><h3 id="pck-module"><a href="#pck-module" class="headerlink" title="pck.module"></a>pck.module</h3><p>之前查阅了package.json的<a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">文档</a>，并没有找到我们想要的 module 字段的定义，无意中看了一个帖子才知道它是 rollup 中最早就提出的概念 — <a href="https://github.com/rollup/rollup/wiki/pkg.module" target="_blank" rel="noopener">pkg.module</a>。在这之前 npm 包大都是基于 CommonJS 规范的。当我们当 require 引入包的时候，就会根据 main 字段去查找入口文件。</p><p>而在 ES6 规范出现后，ES6 定义了一套基于 import、export 操作符的模块规范。它与 CommonJS 规范最大的区别在 ES6 中的 import 和 export 都是静态的。静态意味着一个模块要暴露或引入的所有方法在编译阶段就能全部确定，之后不能再改变。这样做的好处就是打包工具在打包阶段就可以分析出代码中用到了某个模块中的哪几个方法。其它没有用到的方法就可以从最终的 bundle 文件中剔除掉。这样既可以减少 bundle 文件的大小，又可以提高脚本的执行速度。这个机制被称为 Tree Shaking。在这个构建思想的基础上，开发基于 ES Module 规范的包是很有必要的。</p><p>之前我们说过 CommonJS 规范的包都是以 main 字段表示入口文件了，如果 ES Module 的也用 main 字段，就会对使用者造成困扰，如果他的项目不支持打包构建，比如大多数 node 项目(尽管 node9+ 支持 ES Module)，这时库开发者的模块系统跟项目构建的模块系统的冲突，更像是一种规范上的问题。况且目前大部分仍是采用 CommonJS，所以 rollup 便使用了另一个字段：module。如下配置：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"mypck"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="attr">"main"</span>: <span class="string">"dist/index.cjs.js"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"dist/index.esm.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>webpack 从版本 2 开始也可以识别 pkg.module 字段。打包时，如果存在 module 字段，会优先使用，如果没找到对应的文件，则使用 main 字段，并按照 CommonJS 规范打包。所以目前主流的打包工具（webpack, rollup）都是支持 pkg.module 的，鉴于其优点，module 字段很有可能加入 package.json 的规范之中。另外，越来越多的 npm 包已经同时支持两种模块，使用者可以根据情况自行选择，并且实现也比较简单，只是模块导出的方式。</p><p>注意：虽然打包工具支持了 ES Module，但是并不意味着其他的 es6 代码可以正常使用，因为使用者并不会对我们的 npm 包做编译处理，比如 webpack rules 中 exclude: /node_modules/，所以如果不是事先约定好后编译或者没有兼容性的需求，我们仍需要用 babel 处理，从而产出兼容性更好的 npm 包。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通常基于 NPM 托管的项目都会有一个 package.json 文件，它是项目的描述文件，它的内容是一个标准的 JSON 对象。相信大家对 package.json 常用配置肯定熟悉的不能再熟悉了，例如项目名称（name）、项目版本号（version）、项目描述 （des
      
    
    </summary>
    
      <category term="nodejs" scheme="http://sosout.com/categories/nodejs/"/>
    
    
      <category term="npm" scheme="http://sosout.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Commit message 和 Change log 编写指南</title>
    <link href="http://sosout.com/2018/08/07/git-commit-change-writing-guide.html"/>
    <id>http://sosout.com/2018/08/07/git-commit-change-writing-guide.html</id>
    <published>2018-08-07T11:40:44.000Z</published>
    <updated>2018-09-25T11:39:02.757Z</updated>
    
    <content type="html"><![CDATA[<p>Git 每次提交代码，都要编写 Commit message（提交说明），否则就不允许提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><p>上面代码的 -m 参数，就是用来指定 commit mesage 的。如果一行不够，可以只执行 git commit，就会跳出文本编辑器，让你写多行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br></pre></td></tr></table></figure></p><p>基本上，你写什么都行。</p><p><img src="/images/git-commit-change-writing-guide/img1.png" alt="img1.png"></p><p>但是，一般来说，commit message 应该清晰明了，说明本次提交的目的。</p><p><img src="/images/git-commit-change-writing-guide/img2.png" alt="img2.png"></p><p>目前，社区有多种 Commit message 的写法规范。本文介绍 Angular 规范，这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。</p><h3 id="Commit-message-的作用"><a href="#Commit-message-的作用" class="headerlink" title="Commit message 的作用"></a>Commit message 的作用</h3><h4 id="提供更多的历史信息，方便快速浏览。"><a href="#提供更多的历史信息，方便快速浏览。" class="headerlink" title="提供更多的历史信息，方便快速浏览。"></a>提供更多的历史信息，方便快速浏览。</h4><p>比如，下面的命令显示上次发布后的变动，每个 commit 占据一行。你只看行首，就知道某次 commit 的目的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> &lt;last tag&gt; HEAD --pretty=format:%s</span><br></pre></td></tr></table></figure></p><h4 id="可以过滤某些commit（比如文档改动），便于快速查找信息。"><a href="#可以过滤某些commit（比如文档改动），便于快速查找信息。" class="headerlink" title="可以过滤某些commit（比如文档改动），便于快速查找信息。"></a>可以过滤某些commit（比如文档改动），便于快速查找信息。</h4><p>比如，下面的命令仅仅显示本次发布新增加的功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> &lt;last release&gt; HEAD --grep feature</span><br></pre></td></tr></table></figure><h4 id="可以直接从commit生成Change-log。"><a href="#可以直接从commit生成Change-log。" class="headerlink" title="可以直接从commit生成Change log。"></a>可以直接从commit生成Change log。</h4><h3 id="Commitizen：撰写合格-Commit-message-的工具"><a href="#Commitizen：撰写合格-Commit-message-的工具" class="headerlink" title="Commitizen：撰写合格 Commit message 的工具"></a>Commitizen：撰写合格 Commit message 的工具</h3><p>Commitizen 是一个撰写合格 Commit message 的工具。使用之前，我们先安装它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g commitizen</span><br></pre></td></tr></table></figure><p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure><p>以后，凡是用到 git commit 命令，一律改为使用 git cz。这时，就会出现选项，用来生成符合格式的 Commit message。</p><h3 id="commitlint"><a href="#commitlint" class="headerlink" title="commitlint"></a>commitlint</h3><p><a href="https://github.com/marionebl/commitlint" target="_blank" rel="noopener">commitlint</a> 用于检查 Node 项目的 Commit message 是否符合格式。使用前，我们先安装它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install commitlint cli and angular config</span></span><br><span class="line">$ npm install --save-dev @commitlint/&#123;config-conventional,cli&#125;</span><br><span class="line"><span class="comment"># For Windows:</span></span><br><span class="line">$ npm install --save-dev @commitlint/config-conventional @commitlint/cli</span><br></pre></td></tr></table></figure><p>接着，把这个脚本加入 Git 的 hook。下面是在package.json里面使用 ghooks，把这个脚本加为 commit-msg 时运行。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"husky"</span>: &#123;</span><br><span class="line">        <span class="attr">"hooks"</span>: &#123;</span><br><span class="line">        <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span>,</span><br><span class="line">            <span class="attr">"commit-msg"</span>: <span class="string">"commitlint -E HUSKY_GIT_PARAMS"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后，每次 git commit 的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。这里面有使用 husky，所以我们还要安装 <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> 才能使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install husky@next --save-dev</span><br></pre></td></tr></table></figure><h3 id="Change-log"><a href="#Change-log" class="headerlink" title="Change log"></a>Change log</h3><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成。生成的文档包括以下三个部分：</p><ul><li>New features</li><li>Bug fixes</li><li>Breaking changes.</li></ul><p><a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noopener">conventional-changelog</a> 就是生成 Change log 的工具，运行下面的命令即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g conventional-changelog-cli</span><br><span class="line">$ conventional-changelog -p angular -i CHANGELOG.md -s -w -r 0</span><br></pre></td></tr></table></figure></p><p>为了方便使用，可以将其写入 package.json 的 scripts 字段：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"changelog"</span>: <span class="string">"conventional-changelog -p angular -i CHANGELOG.md -s -w -r 0"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以后，直接运行下面的命令即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run changelog</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Git 每次提交代码，都要编写 Commit message（提交说明），否则就不允许提交。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
      <category term="git" scheme="http://sosout.com/categories/git/"/>
    
    
      <category term="git" scheme="http://sosout.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用git修复线上指定版本的问题</title>
    <link href="http://sosout.com/2018/08/05/git-assign-version-fix.html"/>
    <id>http://sosout.com/2018/08/05/git-assign-version-fix.html</id>
    <published>2018-08-05T12:28:38.000Z</published>
    <updated>2018-09-25T11:39:02.756Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个码农，bug 就像家常便饭一样。有了 bug 就需要修复，在 git 中，由于分支是如此的强大，所以，每个 bug 都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。<br>今天我们就来聊聊如何使用<strong>git修复线上指定版本的问题</strong>？<br><strong>第一步：查看远程分支，并确定要修复的分支，如图，远程分支为origin/V1.2.0.</strong><br><img src="/images/git-assign-version-fix/img1.png" alt="img1.png"></p><p>如果没有远程分支或不清楚是哪个分支，那我相信在您每开发完一个版本发布生产时都会打包一个标签，就比如我们团队用的 gitlab 管理的项目：<br><img src="/images/git-assign-version-fix/img2.png" alt="img2.png"></p><p>这边很清楚的能够看到我们有 3 个远程分支，59 个标签，找到对应的标签生成对应的分支即可。如果您们目前尚未使用 gitlab，那只能用 git 命令了，不懂的伙伴，强烈推荐去看<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖大神git教程</a>。</p><p><strong>第二步：创建本地分支V1.2.0，并拉取远程分支代码，同时切换到本地分支，如图</strong><br><img src="/images/git-assign-version-fix/img3.png" alt="img3.png"></p><p><strong>第三步：开发新代码，比如我这边测试代码空格，如图</strong><br><img src="/images/git-assign-version-fix/img4.png" alt="img4.png"></p><p><strong>第四步：开发完成，正常提交流程：git status、git add -A、git commit -m “修复某某问题”，如图</strong><br><img src="/images/git-assign-version-fix/img5.png" alt="img5.png"></p><p><strong>第五步：提交完成，把本地分支推送到远程分支git push origin V1.2.0:V1.2.0</strong></p><p><strong>第六步：切换到开发分支：git checkout dev，然后合并刚才修改的代码：git merge V1.2.0</strong> </p><p><strong>最后：删除新创建的分支：git branch -D V1.2.0</strong> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个码农，bug 就像家常便饭一样。有了 bug 就需要修复，在 git 中，由于分支是如此的强大，所以，每个 bug 都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。&lt;br&gt;今天我们就来聊聊如何使用&lt;strong&gt;git修复线上指定版本的问题&lt;
      
    
    </summary>
    
      <category term="git" scheme="http://sosout.com/categories/git/"/>
    
    
      <category term="git" scheme="http://sosout.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript模块打包工具Rollup——完全入门指南</title>
    <link href="http://sosout.com/2018/08/04/rollup-tutorial.html"/>
    <id>http://sosout.com/2018/08/04/rollup-tutorial.html</id>
    <published>2018-08-04T15:04:53.000Z</published>
    <updated>2018-08-24T10:57:06.054Z</updated>
    
    <content type="html"><![CDATA[<p><code>版本：v0.63.5。</code></p><p>Rollup 是前端模块化的一个打包工具，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。简单地说，它可以从一个入口文件开始，将所有使用的模块根据命令或者根据 Rollup 配置文件打包成一个目标文件，并且 Rollup 会自动过滤掉那些没有被使用过的函数或变量，从而使代码最小化，如果想使用直接导入这一个目标文件即可，因此 Rollup 极其适合构建一个工具库。</p><p>这里提到 Rollup 的两个特别重要的特性，第一个就是它使用了 ES2015 的模板标准，这意味着你可以直接使用 import 和 export 而不需要引入 babel。另一个重要特性叫做 tree-shaking，这个特性可以帮助你将无用代码（即没有使用的代码）从最终的目标文件中过滤掉。举个简单的例子，我们在 foo.js 文件定义了 f1 和 f2 两个方法，然后在入口文件 index.js 只引入了 foo.js 文件中的 f1 方法，那么在最后打包 index.js 文件时，Rollup 就不会将 f2 方法打包到最终文件中。（这个特性是基于 ES6 模块的静态分析的，也就是说，只有 export 而没有 import 的变量是不会被打包到最终代码中的）。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="创建第一个-bundle"><a href="#创建第一个-bundle" class="headerlink" title="创建第一个 bundle"></a>创建第一个 bundle</h3><p>开始前，需要安装<a href="https://nodejs.org" target="_blank" rel="noopener">Node.js</a>，这样才可以使用<a href="https://npmjs.com" target="_blank" rel="noopener">npm</a>；还需要了解如何使用<a href="https://www.codecademy.com/learn/learn-the-command-line" target="_blank" rel="noopener">command line</a>。</p><p>使用 Rollup 最简单的方法是通过 Command Line Interface （或 CLI）。先全局安装 Rollup （之后会介绍如何在项目中进行安装，更便于打包，但现在不用担心这个问题）。在命令行中输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install rollup --global</span><br></pre></td></tr></table></figure><p>现在可以运行 rollup 命令了。试试吧~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rollup</span><br></pre></td></tr></table></figure><p>由于没有传递参数，所以 Rollup 打印出了使用说明。这和运行 rollup –help 或 rollup -h 的效果一样。</p><p>我们来创建一个简单的项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p my-rollup-project/src</span><br><span class="line">$ <span class="built_in">cd</span> my-rollup-project</span><br></pre></td></tr></table></figure><p>首先，我们需要个入口文件。将以下代码粘贴到新建的文件 src/main.js 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo1 &#125; <span class="keyword">from</span> <span class="string">'./foo.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  foo1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后创建入口文件引用的 foo.js 模块:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/foo.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'function foo1'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'function foo2'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在可以创建 bundle 了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rollup src/main.js -o bundle.js -f cjs</span><br></pre></td></tr></table></figure></p><p>-o 表示打包后输出的文件路径，在 -o 后面的 bundle.js 就是我们最终生成的打包文件了（其实这里我们省略了参数 -i，用来表示入口文件的路径， Rollup 是会把没有加参数的文件默认是入口文件）；-f 选项（–output.format 的缩写）指定了所创建 bundle 的类型（默认使用 es 模块标准来对文件进行打包）——这里是 CommonJS（在 Node.js 中运行）。现在我们看一下输出文件 bundle.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'function foo1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  foo1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = main;</span><br></pre></td></tr></table></figure></p><p>恭喜，你已经用 Rollup 完成了第一个 bundle。</p><h3 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h3><p>在项目中创建一个名为 rollup.config.js 的文件，增加如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. output 为对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  input: <span class="string">'src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: <span class="string">'bundle.js'</span>,</span><br><span class="line">    format: <span class="string">'cjs'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. output 为数组</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'src/main.js'</span>,</span><br><span class="line">    output: [&#123;</span><br><span class="line">      file: <span class="string">'dist/bundle.cjs.js'</span>,</span><br><span class="line">      format: <span class="string">'cjs'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      file: <span class="string">'dist/bundle.umd.js'</span>,</span><br><span class="line">      name: <span class="string">'moduleName'</span>,</span><br><span class="line">      format: <span class="string">'umd'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      file: <span class="string">'dist/bundle.es.js'</span>,</span><br><span class="line">      format: <span class="string">'es'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整个配置为数组</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [&#123;</span><br><span class="line">  input: <span class="string">'src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: <span class="string">'dist/bundle.cjs1.js'</span>,</span><br><span class="line">    format: <span class="string">'cjs'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  input: <span class="string">'src/main.js'</span>,</span><br><span class="line">  output: [&#123;</span><br><span class="line">    file: <span class="string">'dist/bundle.cjs2.js'</span>,</span><br><span class="line">    format: <span class="string">'cjs'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    file: <span class="string">'dist/bundle.umd2.js'</span>,</span><br><span class="line">    name: <span class="string">'moduleName'</span>,</span><br><span class="line">    format: <span class="string">'umd'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    file: <span class="string">'dist/bundle.es2.js'</span>,</span><br><span class="line">    format: <span class="string">'es'</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><p>input 表示打包的入口文件，output 表示打包输出文件的配置（如果要输出多个，可以是一个数组，如果是数组，Rollup 会把每一个数组元素当成一个配置输出结果，因此可以在一个配置文件内设置多种输出配置），file 表示输出文件的名称路径，format 表示要打包成的模块类型。若使用 iife 或 umd 模块类型打包，需要添加属性moduleName，用来表示模块的名称；若用 amd 模块打包，可以配置 amd 相关的参数（使用 umd 模块模式时，也会使用到 amd 相关配置参数）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">amd: &#123;</span><br><span class="line">    id: <span class="string">'amd-name'</span>,   <span class="comment">// amd具名函数名称</span></span><br><span class="line">    define: <span class="string">'def'</span>     <span class="comment">// 用来代替define函数的函数名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们用 –config 或 -c 来使用配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rollup -c</span><br></pre></td></tr></table></figure><p>同样的命令行选项将会覆盖配置文件中的选项：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rollup -c -o bundle-2.js</span><br></pre></td></tr></table></figure></p><p>在这里我们发现配置文件使用了 ES6 语法，这是因为 Rollup 本身会处理配置文件 ，所以可以使用 export default 语法——代码不会经过 Babel 等类似工具编译，所以只能使用所用 Node.js 版本支持的 ES2015 语法。</p><p>如果愿意的话，也可以指定与默认 rollup.config.js 文件不同的配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rollup --config rollup.config.dev.js</span><br><span class="line">$ rollup --config rollup.config.prod.js</span><br></pre></td></tr></table></figure></p><p>当然，我们也可以在 package.json 文件中编写 npm scripts 命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"build"</span>: <span class="string">"rollup -c"</span></span><br></pre></td></tr></table></figure><p>针对不同模板类型我们简单编写几个命令：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"build:amd"</span>: <span class="string">"rollup index.js -f amd -o ./dist/dist.amd.js"</span>,</span><br><span class="line"><span class="string">"build:cjs"</span>: <span class="string">"rollup index.js -f cjs -o ./dist/dist.cjs.js"</span>,</span><br><span class="line"><span class="string">"build:es"</span>: <span class="string">"rollup index.js -f es -o ./dist/dist.es.js"</span>,</span><br><span class="line"><span class="string">"build:iife"</span>: <span class="string">"rollup index.js -f iife -n result -o ./dist/dist.iife.js"</span>,</span><br><span class="line"><span class="string">"build:umd"</span>: <span class="string">"rollup index.js -f umd -n result -o ./dist/dist.umd.js"</span>,</span><br><span class="line"><span class="string">"build"</span>: <span class="string">"npm run build:amd &amp;&amp; npm run build:cjs &amp;&amp; npm run build:es &amp;&amp; npm run build:iife &amp;&amp; npm run build:umd"</span></span><br></pre></td></tr></table></figure></p><p>在这里我们发现在设置模块为 iife（立即执行函数）和 umd 时，还加上了一个参数 -n，这是为了事先设定模块的名称，才能让其他人通过这个模块名称引用。</p><h3 id="使用ES6编写代码"><a href="#使用ES6编写代码" class="headerlink" title="使用ES6编写代码"></a>使用ES6编写代码</h3><p>许多开发人员在他们的项目中使用<a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a>，以便他们可以使用未被浏览器和 Node.js 支持的将来版本的 JavaScript 特性。Rollup 虽然支持了解析 import 和 export 两种语法，但是不会解析其他不被支持 JavaScript 特性，使用 Babel 和 Rollup 的最简单方法是使用<a href="https://github.com/rollup/rollup-plugin-babel" target="_blank" rel="noopener">rollup-plugin-babel</a>。 安装它：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D babel-core rollup-plugin-babel rollup-plugin-node-resolve</span><br></pre></td></tr></table></figure></p><p>编写 Rollup 配置文件 rollup.config.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      file: <span class="string">'dist/bundle.js'</span>,</span><br><span class="line">      format: <span class="string">'cjs'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      json(),</span><br><span class="line">      resolve(),</span><br><span class="line">      babel(&#123;</span><br><span class="line">        exclude: <span class="string">'node_modules/**'</span> <span class="comment">// 只编译我们的源代码</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这里有几个特别注意的地方。首先，我们设置 “modules”: false，否则 Babel 会在 Rollup 有机会做处理之前，将我们的模块转成 CommonJS，导致 Rollup 的一些处理失败。</p><p>其次，我们使用 external-helpers 插件，它允许 Rollup 在包的顶部只引用一次 “helpers”，而不是每个使用它们的模块中都引用一遍（这是默认行为）。</p><p>第三，我们将 .babelrc 文件放在 src 中，而不是根目录下。 这允许我们对于不同的任务有不同的 .babelrc 配置，比如像测试，如果我们以后需要的话 - 通常为单独的任务单独配置会更好。</p><p>现在，在我们运行 rollup 之前，我们需要安装 latest preset 和 external-helpers 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D babel-preset-latest babel-plugin-external-helpers</span><br></pre></td></tr></table></figure><p>现在我们用 es6 编辑 src / main.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; version &#125; <span class="keyword">from</span> <span class="string">'../package.json'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'version：'</span> + version);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 Rollup npm run build，检查打包后的 bundle：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="string">"0.0.1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> main$<span class="number">1</span> = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'version：'</span> + version);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = main$<span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><h4 id="external：为rollup设置外部模块和全局变量"><a href="#external：为rollup设置外部模块和全局变量" class="headerlink" title="external：为rollup设置外部模块和全局变量"></a>external：为rollup设置外部模块和全局变量</h4><p>平时开发中，我们经常会引入一些第三方模块，但是在使用的时候，我们又不想把它们打包到一个文件里，想让它们作为单独的模块（或文件）来使用，方便浏览器进行缓存，这个时候就需要使用配置文件中的 external 属性了。</p><p>我们这边以 jquery 为例，在开始使用之前，我们先安装它：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i jquery --save-dev</span><br></pre></td></tr></table></figure></p><p>编写 Rollup 配置文件 rollup.config.js，加入external配置:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">'rollup-plugin-commonjs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      file: <span class="string">'dist/bundle.js'</span>,</span><br><span class="line">      format: <span class="string">'cjs'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      json(),</span><br><span class="line">      resolve(),</span><br><span class="line">      commonjs(),</span><br><span class="line">      babel(&#123;</span><br><span class="line">        exclude: <span class="string">'node_modules/**'</span> <span class="comment">// 只编译我们的源代码</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    external: [<span class="string">'jquery'</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>external 用来表示一个模块是否要被当成外部模块使用，属性的值可以是一个字符串数组或一个方法，当传入的是一个字符串数组时，所有数组内的模块名称都会被当成是外部模块，不会被打包到最终文件中。当传入的是一个方法时，方法有一个参数 id，表示解析的模块的名称，我们可以自定义解析方式，若是要当做外部模块不打包到最终文件中，则返回 true，若要一起打包到最终文件中，则返回 false。</p><h4 id="globals"><a href="#globals" class="headerlink" title="globals"></a>globals</h4><p>globals 的值是一个对象，key表示使用的模块名称（npm 模块名），value 表示在打包文件中引用的全局变量名，在这里我们就是把jquery模块的全局变量名设置为jQuery，重新打包。</p><p>编写 Rollup 配置文件 rollup.config.js，加入globals配置:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">'rollup-plugin-commonjs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        file: <span class="string">'dist/bundle.js'</span>,</span><br><span class="line">        name: <span class="string">'result'</span>,</span><br><span class="line">        format: <span class="string">'iife'</span>,</span><br><span class="line">        globals: &#123;</span><br><span class="line">            jquery: <span class="string">'jQuery'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      json(),</span><br><span class="line">      resolve(),</span><br><span class="line">      commonjs(),</span><br><span class="line">      babel(&#123;</span><br><span class="line">        exclude: <span class="string">'node_modules/**'</span> <span class="comment">// 只编译我们的源代码</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    external: [<span class="string">'jquery'</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>运行 Rollup npm run build，检查打包后的 bundle：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = (<span class="function"><span class="keyword">function</span> (<span class="params">jQuery</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line"></span><br><span class="line">  jQuery = jQuery &amp;&amp; jQuery.hasOwnProperty(<span class="string">'default'</span>) ? jQuery[<span class="string">'default'</span>] : jQuery;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> version = <span class="string">"0.0.1"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// src/main.js</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> main$<span class="number">1</span> = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(jQuery);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'version：'</span> + version);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> main$<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;(jQuery));</span><br></pre></td></tr></table></figure><p>在重新打包出来的文件中，我们发现最后传入的参数已经由 $ 变为了 jQuery，而且 Rollup 也没有输出提示信息。</p><h4 id="paths"><a href="#paths" class="headerlink" title="paths"></a>paths</h4><p>有时候我们可能会使用 CDN 上的 js 文件，但是又不想在本地安装一个相同的模块（也有可能没有对应的模块），可能在版本升级的时候会产生一些问题，这个时候我们就需要使用 Rollup 的 paths 属性了，这个属性可以帮你把依赖的文件地址注入到打包后的文件里。</p><p>编写 Rollup 配置文件 rollup.config.js，加入 paths 配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">'rollup-plugin-commonjs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        file: <span class="string">'dist/bundle.js'</span>,</span><br><span class="line">        name: <span class="string">'result'</span>,</span><br><span class="line">        format: <span class="string">'amd'</span>,</span><br><span class="line">        globals: &#123;</span><br><span class="line">            jquery: <span class="string">'jQuery'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        paths: &#123;</span><br><span class="line">            jquery: <span class="string">'https://cdn.bootcss.com/jquery/3.2.1/jquery.js'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      json(),</span><br><span class="line">      resolve(),</span><br><span class="line">      commonjs(),</span><br><span class="line">      babel(&#123;</span><br><span class="line">        exclude: <span class="string">'node_modules/**'</span> <span class="comment">// 只编译我们的源代码</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    external: [<span class="string">'jquery'</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行 Rollup npm run build，检查打包后的 bundle：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'https://cdn.bootcss.com/jquery/3.2.1/jquery.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">jQuery</span>) </span>&#123; <span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">  jQuery = jQuery &amp;&amp; jQuery.hasOwnProperty(<span class="string">'default'</span>) ? jQuery[<span class="string">'default'</span>] : jQuery;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> version = <span class="string">"0.0.1"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// src/main.js</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> main$<span class="number">1</span> = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(jQuery);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'version：'</span> + version);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> main$<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到 Rollup 已经把我们需要的 CDN 地址作为依赖加入到了打包文件中。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>随着构建更复杂的 bundle，通常需要更大的灵活性——引入 npm 安装的模块、通过 Babel 编译代码、和 JSON 文件打交道等。为此，我们可以用 插件(plugins) 在打包的关键过程中更改 Rollup 的行为。<a href="https://github.com/rollup/rollup/wiki/Plugins" target="_blank" rel="noopener">the Rollup wiki</a>维护了可用的插件列表。</p><p>我们这边将以<a href="https://github.com/rollup/rollup-plugin-json" target="_blank" rel="noopener">rollup-plugin-json</a>的使用为例，它的作用是令 Rollup 从 JSON 文件中读取数据。</p><p>将 rollup-plugin-json 安装为开发依赖：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev rollup-plugin-json</span><br></pre></td></tr></table></figure></p><p>我们用的是 –save-dev 而不是 –save，因为实际执行的代码并不依赖这个插件——只是在打包时使用。</p><p>更新 src/main.js 文件，从 package.json 而非 src/foo.js 中读取数据：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; version &#125; <span class="keyword">from</span> <span class="string">'../package.json'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'version：'</span> + version);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写 Rollup 配置文件 rollup.config.js，加入 JSON 插件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      file: <span class="string">'dist/bundle.js'</span>,</span><br><span class="line">      format: <span class="string">'cjs'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [ json() ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>npm run build 执行 Rollup。结果如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="string">"0.0.1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main$1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'version：'</span> + version);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = main$<span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><h3 id="插件列表"><a href="#插件列表" class="headerlink" title="插件列表"></a>插件列表</h3><h4 id="rollup-plugin-commonjs"><a href="#rollup-plugin-commonjs" class="headerlink" title="rollup-plugin-commonjs"></a>rollup-plugin-commonjs</h4><p>有时候我们会引入一些其他模块的文件（第三方的或是自己编写的），但是目前，npm 中的大多数包都是以 CommonJS 模块的形式出现的。在它们更改之前，我们需要将CommonJS模块转换为 ES2015 供 Rollup 解析。这个<a href="https://github.com/rollup/rollup-plugin-commonjs" target="_blank" rel="noopener">rollup-plugin-commonjs</a>插件就是用来将 CommonJS 转换成 ES2015 模块的。请注意，rollup-plugin-commonjs 应该用在其他插件转换你的模块之前 - 这是为了防止其他插件的改变破坏 CommonJS 的检测。</p><p>在我们使用之前，需要先安装它：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i rollup-plugin-commonjs --save-dev</span><br></pre></td></tr></table></figure></p><p>编写 Rollup 配置文件 rollup.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">'rollup-plugin-commonjs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      file: <span class="string">'dist/bundle.js'</span>,</span><br><span class="line">      format: <span class="string">'cjs'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      json(),</span><br><span class="line">      resolve(),</span><br><span class="line">      commonjs(),</span><br><span class="line">      babel(&#123;</span><br><span class="line">        exclude: <span class="string">'node_modules/**'</span> <span class="comment">// 只编译我们的源代码</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编写 cjs 模块的文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports.foo1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'function foo1'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.foo2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'function foo2'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>npm run build 执行 Rollup。结果如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="string">"0.0.1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> main$<span class="number">1</span> = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'version：'</span> + version);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = main$<span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><h4 id="rollup-plugin-uglify"><a href="#rollup-plugin-uglify" class="headerlink" title="rollup-plugin-uglify"></a>rollup-plugin-uglify</h4><p>代码发布时，我们经常会把自己的代码压缩到最小，以减少网络请求中的传输文件大小。Rollup rollup-plugin-uglify 就是来帮你压缩代码的，在使用之前，我们先安装它：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i rollup-plugin-uglify --save-dev</span><br></pre></td></tr></table></figure></p><p>编写 Rollup 配置文件 rollup.config.js，加入 uglify 插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">'rollup-plugin-commonjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; uglify &#125; <span class="keyword">from</span> <span class="string">'rollup-plugin-uglify'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        file: <span class="string">'dist/bundle.js'</span>,</span><br><span class="line">        name: <span class="string">'result'</span>,</span><br><span class="line">        format: <span class="string">'amd'</span>,</span><br><span class="line">        globals: &#123;</span><br><span class="line">            jquery: <span class="string">'jQuery'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        paths: &#123;</span><br><span class="line">            jquery: <span class="string">'https://cdn.bootcss.com/jquery/3.2.1/jquery.js'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      json(),</span><br><span class="line">      resolve(),</span><br><span class="line">      commonjs(),</span><br><span class="line">      babel(&#123;</span><br><span class="line">        exclude: <span class="string">'node_modules/**'</span> <span class="comment">// 只编译我们的源代码</span></span><br><span class="line">      &#125;),</span><br><span class="line">      uglify()</span><br><span class="line">    ],</span><br><span class="line">    external: [<span class="string">'jquery'</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行打包命令，查看打包后的目标文件，发现代码已经被压缩了。但是，压缩过的代码在 debug 时会带来很大的不便，因此我们需要在压缩代码的同时生成一个 sourceMap 文件。幸运的是，Rollup 自己就支持 sourceMap 文件的生成，不需要我们去引入其他插件，只需要在配置文件中 output 选项加上以下代码即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line">sourcemap: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>若是将 sourceMap 属性的值设置为 inline，则会将 sourceMap 的内容添加到打包文件的最后。</p><h4 id="rollup-plugin-eslint"><a href="#rollup-plugin-eslint" class="headerlink" title="rollup-plugin-eslint"></a>rollup-plugin-eslint</h4><p>在大型工程的团队开发中，我们需要保证团队代码风格的一致性，因此需要引入 eslint，而且在打包时需要检测源文件是否符合 eslint 设置的规范，若是不符合则抛出异常并停止打包。Rollup rollup-plugin-eslint 就是用于设置代码规范，使用之前我们先安装它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i eslint rollup-plugin-eslint --save-dev</span><br></pre></td></tr></table></figure><p>编写 eslint 配置文件 .eslintrc：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"env"</span>: &#123;</span><br><span class="line">        <span class="attr">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"commonjs"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"node"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"parserOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"ecmaFeatures"</span>: &#123;</span><br><span class="line">            <span class="attr">"jsx"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sourceType"</span>: <span class="string">"module"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"rules"</span>: &#123;</span><br><span class="line">        <span class="attr">"semi"</span>: [<span class="string">"error"</span>,<span class="string">"never"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写 Rollup 配置文件 rollup.config.js，加入 eslint 插件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">'rollup-plugin-commonjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; uglify &#125; <span class="keyword">from</span> <span class="string">'rollup-plugin-uglify'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; eslint &#125; <span class="keyword">from</span> <span class="string">'rollup-plugin-eslint'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        file: <span class="string">'dist/bundle.js'</span>,</span><br><span class="line">        name: <span class="string">'result'</span>,</span><br><span class="line">        format: <span class="string">'amd'</span>,</span><br><span class="line">        globals: &#123;</span><br><span class="line">            jquery: <span class="string">'jQuery'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        paths: &#123;</span><br><span class="line">            jquery: <span class="string">'https://cdn.bootcss.com/jquery/3.2.1/jquery.js'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        sourcemap: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        eslint(&#123;</span><br><span class="line">            throwOnError: <span class="literal">true</span>,</span><br><span class="line">            throwOnWarning: <span class="literal">true</span>,</span><br><span class="line">            include: [<span class="string">'src/**'</span>],</span><br><span class="line">            exclude: [<span class="string">'node_modules/**'</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">        json(),</span><br><span class="line">        resolve(),</span><br><span class="line">        commonjs(),</span><br><span class="line">        babel(&#123;</span><br><span class="line">            exclude: <span class="string">'node_modules/**'</span> <span class="comment">// 只编译我们的源代码</span></span><br><span class="line">        &#125;),</span><br><span class="line">        uglify()</span><br><span class="line">    ],</span><br><span class="line">    external: [<span class="string">'jquery'</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这里有两个属性需要特别说明下：throwOnError 和 throwOnWarning 设置为 true 时，如果在 eslint 的检查过程中发现了 error 或 warning，就会抛出异常，阻止打包继续执行（如果设置为 false，就只会输出 eslint 检测结果，而不会停止打包）。</p><p>如果我们使用IDE或编辑器的 eslint 插件，有时候这些插件会去检查打包完的文件，导致你的提示框里一直会有 eslint 检测到错误的消息，我们现在有两种解决方案，第一种是创建一个 .eslintignore 文件，将打包文件加进去，让 eslint 忽略这个文件，还有一种就是让 Rollup 在打包文件的开始和最后自动生成注释来阻止 eslint 检测代码，使用这种方法时，需要使用   Rollup 配置文件的两个属性：banner和footer，这两个属性会在生成文件的开头和结尾插入一段你自定义的字符串。我们利用这个属性，在打包文件的开头添加<code>/*eslint-disable */</code>注释，让 eslint 不检测这个文件。</p><p>添加banner和footer属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">banner: <span class="string">'/*eslint-disable */'</span></span><br></pre></td></tr></table></figure><p>如果说 banner 和 footer 是在文件开始和结尾添加字符串，那么 intro 和 outro 就是在被打包的代码开头和结尾添加字符串了，以 iife 模式来举例，如果我们配置了这四个属性，那么输出结果就会是：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// banner字符串</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// intro字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 被打包的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// outro字符串</span></span><br><span class="line">&#125;());</span><br><span class="line"><span class="comment">// footer字符串</span></span><br></pre></td></tr></table></figure></p><h4 id="rollup-plugin-replace"><a href="#rollup-plugin-replace" class="headerlink" title="rollup-plugin-replace"></a>rollup-plugin-replace</h4><p>有时候我们会把开发/生产环境的信息直接写在源文件里面，这个时候用 intro/outro 来注入代码的方式就不适合了。这个时候我们就需要使用 rollup-plugin-replace 插件来对源代码的变量值进行替换，在使用之前，我们先安装它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i rollup-plugin-replace --save-dev</span><br></pre></td></tr></table></figure><p>编写 Rollup 配置文件 rollup.config.js，加入 replace 插件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">'rollup-plugin-commonjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; uglify &#125; <span class="keyword">from</span> <span class="string">'rollup-plugin-uglify'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; eslint &#125; <span class="keyword">from</span> <span class="string">'rollup-plugin-eslint'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; version &#125; <span class="keyword">from</span> <span class="string">'../package.json'</span>;</span><br><span class="line"><span class="keyword">import</span> replace  <span class="keyword">from</span> <span class="string">'rollup-plugin-replace'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> VERSION = process.env.VERSION || version;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> copyright = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() &gt; <span class="number">2018</span> ? <span class="string">'2018-'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() : <span class="number">2018</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> banner =</span><br><span class="line">  <span class="string">'/*!\n'</span> +</span><br><span class="line">  <span class="string">' * idebug v'</span> + VERSION + <span class="string">'\n'</span> +</span><br><span class="line">  <span class="string">' * (c) '</span> + copyright + <span class="string">' Weich\n'</span> +</span><br><span class="line">  <span class="string">' * Released under the MIT License.\n'</span> +</span><br><span class="line">  <span class="string">' */'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const weexFactoryPlugin = &#123;</span></span><br><span class="line"><span class="comment">//     intro () &#123;</span></span><br><span class="line"><span class="comment">//         return 'module.exports = function weexFactory (exports, document) &#123;'</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">//     outro () &#123;</span></span><br><span class="line"><span class="comment">//         return '&#125;'</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        banner: banner,</span><br><span class="line">        footer: <span class="string">'/* my-library version '</span> + VERSION + <span class="string">' */'</span>,</span><br><span class="line">        file: <span class="string">'dist/bundle.js'</span>,</span><br><span class="line">        name: <span class="string">'result'</span>,</span><br><span class="line">        format: <span class="string">'iife'</span>,</span><br><span class="line">        globals: &#123;</span><br><span class="line">            jquery: <span class="string">'jQuery'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        paths: &#123;</span><br><span class="line">            jquery: <span class="string">'https://cdn.bootcss.com/jquery/3.2.1/jquery.js'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        sourcemap: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// weexFactoryPlugin,</span></span><br><span class="line">        replace(&#123;</span><br><span class="line">            __VERSION__: VERSION</span><br><span class="line">        &#125;),</span><br><span class="line">        eslint(&#123;</span><br><span class="line">            throwOnError: <span class="literal">true</span>,</span><br><span class="line">            throwOnWarning: <span class="literal">true</span>,</span><br><span class="line">            include: [<span class="string">'src/**'</span>],</span><br><span class="line">            exclude: [<span class="string">'node_modules/**'</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">        json(),</span><br><span class="line">        resolve(),</span><br><span class="line">        commonjs(),</span><br><span class="line">        babel(&#123;</span><br><span class="line">            exclude: <span class="string">'node_modules/**'</span> <span class="comment">// 只编译我们的源代码</span></span><br><span class="line">        &#125;),</span><br><span class="line">        uglify(&#123;</span><br><span class="line">            output: &#123;</span><br><span class="line">              comments: <span class="function"><span class="keyword">function</span>(<span class="params">node, comment</span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">var</span> text = comment.value;</span><br><span class="line">                  <span class="keyword">var</span> type = comment.type;</span><br><span class="line">                  <span class="keyword">if</span> (type == <span class="string">"comment2"</span>) &#123;</span><br><span class="line">                      <span class="comment">// multiline comment</span></span><br><span class="line">                      <span class="keyword">return</span> <span class="regexp">/idebug|ENVIRONMENT/i</span>.test(text);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">    ],</span><br><span class="line">    external: [<span class="string">'jquery'</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接下来就可以直接在源码中使用 <code>__VERSION__</code> 了，编写入口文件 index.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> jQuery <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(jQuery)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'version：__VERSION__'</span> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行打包命令，并检查源文件里有没有被替换。</p><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><h3 id="命令行的参数"><a href="#命令行的参数" class="headerlink" title="命令行的参数"></a>命令行的参数</h3><p><code>-v/--version</code>：打印已安装的Rollup版本号。</p><p><code>-w/--watch</code>：我们在开发过程中，需要频繁对源文件进行修改，如果每次都自己手动输一遍打包命令，那真的是要烦死，因此，我们在 rollup 命令后面加上 -w/–watch 参数，就能让 rollup 监听文件变化，即时打包。</p><h2 id="本文持续更新中"><a href="#本文持续更新中" class="headerlink" title="本文持续更新中"></a>本文持续更新中</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;版本：v0.63.5。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Rollup 是前端模块化的一个打包工具，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。简单地说，它可以从一个入口文件开始，将所有使用的模块根据命令或者根据 Rollup 配置文件打包成
      
    
    </summary>
    
      <category term="rollup" scheme="http://sosout.com/categories/rollup/"/>
    
    
      <category term="rollup" scheme="http://sosout.com/tags/rollup/"/>
    
  </entry>
  
  <entry>
    <title>移动端(手机端)页面自适应解决方案—rem布局篇</title>
    <link href="http://sosout.com/2018/08/03/mobile-rem-layout.html"/>
    <id>http://sosout.com/2018/08/03/mobile-rem-layout.html</id>
    <published>2018-08-03T14:01:33.000Z</published>
    <updated>2018-08-24T10:57:06.049Z</updated>
    
    <content type="html"><![CDATA[<p>假设设计妹妹给我们的设计稿尺寸为750 * 1340。结合网易、淘宝移动端首页html元素上的动态font-size属性、设计稿尺寸、前端与设计之间协作流程一般分为下面两种：</p><h3 id="一、网易做法："><a href="#一、网易做法：" class="headerlink" title="一、网易做法："></a>一、网易做法：</h3><p>引入：页面开头处引入下面这段代码，用于动态计算font-size</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">    isIOS = navigator.userAgent.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>),</span><br><span class="line">    dpr = isIOS ? <span class="built_in">Math</span>.min(win.devicePixelRatio, <span class="number">3</span>) : <span class="number">1</span>,</span><br><span class="line">    dpr = <span class="built_in">window</span>.top === <span class="built_in">window</span>.self ? dpr : <span class="number">1</span>, <span class="comment">//被iframe引用时，禁止缩放</span></span><br><span class="line">    dpr = <span class="number">1</span>,</span><br><span class="line">    scale = <span class="number">1</span> / dpr,</span><br><span class="line">    resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>;</span><br><span class="line">docEl.dataset.dpr = dpr;</span><br><span class="line"><span class="keyword">var</span> metaEl = doc.createElement(<span class="string">'meta'</span>);</span><br><span class="line">metaEl.name = <span class="string">'viewport'</span>;</span><br><span class="line">metaEl.content = <span class="string">'initial-scale='</span> + scale + <span class="string">',maximum-scale='</span> + scale + <span class="string">', minimum-scale='</span> + scale;</span><br><span class="line">docEl.firstElementChild.appendChild(metaEl);</span><br><span class="line"><span class="keyword">var</span> recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = docEl.clientWidth;</span><br><span class="line">    <span class="keyword">if</span> (width / dpr &gt; <span class="number">750</span>) &#123;</span><br><span class="line">        width = <span class="number">750</span> * dpr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 乘以100，px : rem = 100 : 1</span></span><br><span class="line">    docEl.style.fontSize = <span class="number">100</span> * (width / <span class="number">750</span>) + <span class="string">'px'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">recalc()</span><br><span class="line"><span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><p><strong>使用：</strong><br>未引入前：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">750px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">640px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>引入后：除以100并将px换成rem</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">7.5rem</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">6.4rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换算的依据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 乘以100，px : rem = 100 : 1</span></span><br><span class="line"><span class="keyword">var</span> recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = docEl.clientWidth;</span><br><span class="line"><span class="keyword">if</span> (width / dpr &gt; <span class="number">750</span>) &#123;</span><br><span class="line">    width = <span class="number">750</span> * dpr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 乘以100，px : rem = 100 : 1</span></span><br><span class="line">docEl.style.fontSize = <span class="number">100</span> * (width / <span class="number">750</span>) + <span class="string">'px'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二、淘宝做法（推荐做法，尤其是app内嵌页面）："><a href="#二、淘宝做法（推荐做法，尤其是app内嵌页面）：" class="headerlink" title="二、淘宝做法（推荐做法，尤其是app内嵌页面）："></a>二、淘宝做法（推荐做法，尤其是app内嵌页面）：</h3><p>引入：页面开头处引入下面这段代码，用于动态计算font-size，或者单独放入一个文件，引入文件也可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win, lib</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> doc = win.document;</span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement;</span><br><span class="line">    <span class="keyword">var</span> metaEl = doc.querySelector(<span class="string">'meta[name="viewport"]'</span>);</span><br><span class="line">    <span class="keyword">var</span> flexibleEl = doc.querySelector(<span class="string">'meta[name="flexible"]'</span>);</span><br><span class="line">    <span class="keyword">var</span> dpr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> scale = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> tid;</span><br><span class="line">    <span class="keyword">var</span> flexible = lib.flexible || (lib.flexible = &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (metaEl) &#123;</span><br><span class="line">        <span class="keyword">var</span> match = metaEl.getAttribute(<span class="string">'content'</span>).match(<span class="regexp">/initial\-scale=([\d\.]+)/</span>);</span><br><span class="line">        <span class="keyword">if</span> (match) &#123;</span><br><span class="line">            scale = <span class="built_in">parseFloat</span>(match[<span class="number">1</span>]);</span><br><span class="line">            dpr = <span class="built_in">parseInt</span>(<span class="number">1</span> / scale);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flexibleEl) &#123;</span><br><span class="line">        <span class="keyword">var</span> content = flexibleEl.getAttribute(<span class="string">'content'</span>);</span><br><span class="line">        <span class="keyword">if</span> (content) &#123;</span><br><span class="line">            <span class="keyword">var</span> initialDpr = content.match(<span class="regexp">/initial\-dpr=([\d\.]+)/</span>);</span><br><span class="line">            <span class="keyword">var</span> maximumDpr = content.match(<span class="regexp">/maximum\-dpr=([\d\.]+)/</span>);</span><br><span class="line">            <span class="keyword">if</span> (initialDpr) &#123;</span><br><span class="line">                dpr = <span class="built_in">parseFloat</span>(initialDpr[<span class="number">1</span>]);</span><br><span class="line">                scale = <span class="built_in">parseFloat</span>((<span class="number">1</span> / dpr).toFixed(<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maximumDpr) &#123;</span><br><span class="line">                dpr = <span class="built_in">parseFloat</span>(maximumDpr[<span class="number">1</span>]);</span><br><span class="line">                scale = <span class="built_in">parseFloat</span>((<span class="number">1</span> / dpr).toFixed(<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!dpr &amp;&amp; !scale) &#123;</span><br><span class="line">        <span class="keyword">var</span> isAndroid = win.navigator.appVersion.match(<span class="regexp">/android/gi</span>);</span><br><span class="line">        <span class="keyword">var</span> isIPhone = win.navigator.appVersion.match(<span class="regexp">/iphone/gi</span>);</span><br><span class="line">        <span class="keyword">var</span> devicePixelRatio = win.devicePixelRatio;</span><br><span class="line">        <span class="keyword">if</span> (isIPhone) &#123;</span><br><span class="line">            <span class="comment">// iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案</span></span><br><span class="line">            <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">3</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">3</span>)) &#123;</span><br><span class="line">                dpr = <span class="number">3</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">2</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">2</span>)) &#123;</span><br><span class="line">                dpr = <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dpr = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其他设备下，仍旧使用1倍的方案</span></span><br><span class="line">            dpr = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        scale = <span class="number">1</span> / dpr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    docEl.setAttribute(<span class="string">'data-dpr'</span>, dpr);</span><br><span class="line">    <span class="keyword">if</span> (!metaEl) &#123;</span><br><span class="line">        metaEl = doc.createElement(<span class="string">'meta'</span>);</span><br><span class="line">        metaEl.setAttribute(<span class="string">'name'</span>, <span class="string">'viewport'</span>);</span><br><span class="line">        metaEl.setAttribute(<span class="string">'content'</span>, <span class="string">'initial-scale='</span> + scale + <span class="string">', maximum-scale='</span> + scale + <span class="string">', minimum-scale='</span> + scale + <span class="string">', user-scalable=no'</span>);</span><br><span class="line">        <span class="keyword">if</span> (docEl.firstElementChild) &#123;</span><br><span class="line">            docEl.firstElementChild.appendChild(metaEl);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> wrap = doc.createElement(<span class="string">'div'</span>);</span><br><span class="line">            wrap.appendChild(metaEl);</span><br><span class="line">            doc.write(wrap.innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">refreshRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> width = docEl.getBoundingClientRect().width;</span><br><span class="line">        <span class="comment">// 适配平板</span></span><br><span class="line">        <span class="keyword">if</span> (width / dpr &gt; <span class="number">540</span>) &#123;</span><br><span class="line">            width = <span class="number">540</span> * dpr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> rem = width / <span class="number">10</span>;</span><br><span class="line">        docEl.style.fontSize = rem + <span class="string">'px'</span>;</span><br><span class="line">        flexible.rem = win.rem = rem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    win.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(tid);</span><br><span class="line">        tid = setTimeout(refreshRem, <span class="number">300</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    win.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">            clearTimeout(tid);</span><br><span class="line">            tid = setTimeout(refreshRem, <span class="number">300</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (doc.readyState === <span class="string">'complete'</span>) &#123;</span><br><span class="line">        doc.body.style.fontSize = <span class="number">12</span> * dpr + <span class="string">'px'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            doc.body.style.fontSize = <span class="number">12</span> * dpr + <span class="string">'px'</span>;</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    refreshRem();</span><br><span class="line"></span><br><span class="line">    flexible.dpr = win.dpr = dpr;</span><br><span class="line">    flexible.refreshRem = refreshRem;</span><br><span class="line">    flexible.rem2px = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> val = <span class="built_in">parseFloat</span>(d) * <span class="keyword">this</span>.rem;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> d === <span class="string">'string'</span> &amp;&amp; d.match(<span class="regexp">/rem$/</span>)) &#123;</span><br><span class="line">            val += <span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">    flexible.px2rem = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> val = <span class="built_in">parseFloat</span>(d) / <span class="keyword">this</span>.rem;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> d === <span class="string">'string'</span> &amp;&amp; d.match(<span class="regexp">/px$/</span>)) &#123;</span><br><span class="line">            val += <span class="string">'rem'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">window</span>[<span class="string">'lib'</span>] || (<span class="built_in">window</span>[<span class="string">'lib'</span>] = &#123;&#125;));</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><p>未引入前：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">750px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">640px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入后：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@font-size-base:</span> <span class="number">75</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">750rem</span>/<span class="variable">@font-size-base</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">640rem</span>/<span class="variable">@font-size-base</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换算依据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refreshRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = docEl.getBoundingClientRect().width;</span><br><span class="line">    <span class="comment">// 适配平板</span></span><br><span class="line">    <span class="keyword">if</span> (width / dpr &gt; <span class="number">540</span>) &#123;</span><br><span class="line">        width = <span class="number">540</span> * dpr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> rem = width / <span class="number">10</span>;</span><br><span class="line">    docEl.style.fontSize = rem + <span class="string">'px'</span>;</span><br><span class="line">    flexible.rem = win.rem = rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这边是用的less，如果您没有用less，就需要手动计算，当然也可以转化为px : rem = 100 : 1。<br>如果想转化为px : rem = 100 : 1，可以修改上面的refreshRem函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refreshRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = docEl.getBoundingClientRect().width</span><br><span class="line">    <span class="comment">// 适配平板</span></span><br><span class="line">    <span class="keyword">if</span> (width / dpr &gt; <span class="number">750</span>) &#123;</span><br><span class="line">      width = <span class="number">750</span> * dpr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> rem = <span class="number">100</span> * (width / <span class="number">750</span>)</span><br><span class="line">    docEl.style.fontSize = rem + <span class="string">'px'</span></span><br><span class="line">    flexible.rem = win.rem = rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><p>未引入前：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">750px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">640px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入后：除以100并将px换成rem</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">7.5rem</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">6.4rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换算依据就是上面修改的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refreshRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = docEl.getBoundingClientRect().width</span><br><span class="line">    <span class="comment">// 适配平板</span></span><br><span class="line">    <span class="keyword">if</span> (width / dpr &gt; <span class="number">750</span>) &#123;</span><br><span class="line">      width = <span class="number">750</span> * dpr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> rem = <span class="number">100</span> * (width / <span class="number">750</span>)</span><br><span class="line">    docEl.style.fontSize = rem + <span class="string">'px'</span></span><br><span class="line">    flexible.rem = win.rem = rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假设设计妹妹给我们的设计稿尺寸为750 * 1340。结合网易、淘宝移动端首页html元素上的动态font-size属性、设计稿尺寸、前端与设计之间协作流程一般分为下面两种：&lt;/p&gt;
&lt;h3 id=&quot;一、网易做法：&quot;&gt;&lt;a href=&quot;#一、网易做法：&quot; class=&quot;he
      
    
    </summary>
    
      <category term="css" scheme="http://sosout.com/categories/css/"/>
    
    
      <category term="rem" scheme="http://sosout.com/tags/rem/"/>
    
  </entry>
  
  <entry>
    <title>next、nuxt等服务端渲染框架如何在服务器部署，并用PM2守护程序</title>
    <link href="http://sosout.com/2018/08/03/linux-nginx-ssr-deploy.html"/>
    <id>http://sosout.com/2018/08/03/linux-nginx-ssr-deploy.html</id>
    <published>2018-08-03T12:31:37.000Z</published>
    <updated>2018-09-25T11:39:02.762Z</updated>
    
    <content type="html"><![CDATA[<p>貌似从前几年，前后端分离逐渐就开始流行起来，把一些渲染计算的工作抛向前端以便减轻服务端的压力，但为啥现在又开始流行在服务端渲染了呢？如vue全家桶或者react全家桶，都推荐通过服务端渲染来实现路由。搞得我们慌得不行，不禁让我想起一句话：<code>从来没有任何一门语言的技术栈像Javascript一样，学习者拼尽全力也不让精通。</code>没办法，流行，咱们就得学！</p><p>前断时间写了一篇<a href="http://www.sosout.com/2018/08/02/linux-nginx-spa-deploy.html" target="_blank" rel="noopener">vuejs、react如何在服务器部署？</a>，结果反响不错！最近好多朋友私信或邀请问很多关于next.js和nuxt.js的问题，比如<code>关于nextjs 和 nuxtjs如何部署</code>，<code>pm2如何配合</code>…在这里我们就一起讨论下在服务器上使用PM2守护next.js、nuxt.js等服务端渲染框架构建的项目！该篇我们只讨论<code>服务端渲染应用部署</code>，<code>静态应用部署</code>就是我前段时间写的<a href="http://www.sosout.com/2018/08/02/linux-nginx-spa-deploy.html" target="_blank" rel="noopener">vuejs、react如何在服务器部署？</a>。</p><h4 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h4><p>既然是应用，我们就应该有域名，在这里我们以<code>nginx配置</code>为例，简单配置如下：<br><strong>Next域名：</strong><a href="http://next.sosout.com/" target="_blank" rel="noopener">http://next.sosout.com/</a><br><strong>Nuxt域名：</strong><a href="http://nuxt.sosout.com/" target="_blank" rel="noopener">http://nuxt.sosout.com/</a><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    ....  # 省略其他配置</span><br><span class="line">   </span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  <span class="regexp">*.sosout.com</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$host</span> <span class="regexp">~* "^(.*?)\.sosout\.com$")</span> &#123;</span><br><span class="line">            <span class="attribute">set</span> <span class="variable">$domain</span> <span class="variable">$1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$domain</span> <span class="regexp">~* "next")</span> &#123;</span><br><span class="line">                <span class="attribute">root</span> /mnt/html/next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$domain</span> <span class="regexp">~* "nuxt")</span> &#123;</span><br><span class="line">                <span class="attribute">root</span> /mnt/html/nuxt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Forwarded-Proto  <span class="variable">$scheme</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">access_log</span>  /mnt/logs/nginx/access.log  main;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h4><p>由于服务端渲染的各个应用端口号各不相同，因此这个时候我们就需要反向代理了，配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过upstream nodejs 可以配置多台nodejs节点，做负载均衡</span></span><br><span class="line"><span class="comment">#keepalive 设置存活时间。如果不设置可能会产生大量的timewait</span></span><br><span class="line"><span class="comment">#proxy_pass 反向代理转发 http://nodejs</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">upstream</span> nodenext &#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:3001</span>; <span class="comment">#next项目 监听端口</span></span><br><span class="line"><span class="attribute">keepalive</span> <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> next.sosout.com;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;  </span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line">        <span class="attribute">proxy_cache_bypass</span> <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://nodenext; <span class="comment">#反向代理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">upstream</span> nodenuxt &#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:3002</span>; <span class="comment">#nuxt项目 监听端口</span></span><br><span class="line"><span class="attribute">keepalive</span> <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> nuxt.sosout.com;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;  </span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line">        <span class="attribute">proxy_cache_bypass</span> <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://nodenuxt; <span class="comment">#反向代理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>服务器的准备工作已完成，接下来我们就分别看看Next.js和Nuxt.js服务端渲染应用如何部署？</code></p><h4 id="Next-js服务端渲染应用部署"><a href="#Next-js服务端渲染应用部署" class="headerlink" title="Next.js服务端渲染应用部署"></a>Next.js服务端渲染应用部署</h4><p>部署 Next.js 服务端渲染的应用不能直接使用<code>next</code>命令，而应该先进行编译构建，然后再启动 Next 服务，官方通过以下两个命令来完成：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ next build</span><br><span class="line">$ next start</span><br></pre></td></tr></table></figure></p><p>官方推荐的 package.json 配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"my-app"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"next"</span>: <span class="string">"latest"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"next"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"next build"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"next start"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而我更推荐如下配置，稍后你会发现这样和<code>pm2</code>一起使用更方便，自动化部署也方便:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"my-app"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"next"</span>: <span class="string">"latest"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"next"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"next start -p $PORT"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"next build &amp;&amp; PORT=3001 npm start"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>next.js服务端渲染应用部署这样就完成了，官方先后执行<code>npm run build 、npm start</code>即可完成部署。而我这边只要执行<code>npm run build</code>，其实我只是把两个合并成一个，并设置了端口以便区别其他应用，避免端口占用！</p><p><strong>接下来简单的说一下next这几个命令：</strong><br><code>next:</code>启动一个热加载的Web服务器（开发模式）<br><code>next build:</code>利用webpack编译应用，压缩JS和CSS资源（发布用）。<br><code>next start:</code>以生成模式启动一个Web服务器 (<code>next build</code> 会先被执行)。</p><h4 id="Nuxt-js服务端渲染应用部署"><a href="#Nuxt-js服务端渲染应用部署" class="headerlink" title="Nuxt.js服务端渲染应用部署"></a>Nuxt.js服务端渲染应用部署</h4><p><strong>其实部署 Nuxt.js 服务端渲染的应用和<code>Next.js</code>极其相似！在这里我就把代码粘粘贴贴，复复制制，改改写写。。。。</strong><br>Nuxt.js 服务端渲染的应用不能直接使用<code>nuxt</code>命令，而应该先进行编译构建，然后再启动 Nuxt 服务，官方通过以下两个命令来完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nuxt build</span><br><span class="line">$ nuxt start</span><br></pre></td></tr></table></figure><p>官方推荐的 package.json 配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"my-app"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"nuxt"</span>: <span class="string">"latest"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"nuxt"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"nuxt build"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"nuxt start"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而我更推荐如下配置，稍后你会发现这样和<code>pm2</code>一起使用更方便，自动化部署也方便:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"my-app"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"nuxt"</span>: <span class="string">"latest"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"nuxt"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"PORT=3002 nuxt start"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"nuxt build &amp;&amp; npm start"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nuxt.js服务端渲染应用部署这样就完成了，官方先后执行<code>npm run build 、npm start</code>即可完成部署。而我这边只要执行<code>npm run build</code>，其实我只是把两个合并成一个，并设置了端口以便区别其他应用，避免端口占用！</p><p><strong>接下来简单的说一下nuxt这几个命令：</strong><br><code>nuxt:</code>启动一个热加载的Web服务器（开发模式）<br><code>nuxt build:</code>利用webpack编译应用，压缩JS和CSS资源（发布用）。<br><code>nuxt start:</code>以生成模式启动一个Web服务器 (<code>nuxt build</code> 会先被执行)。</p><h4 id="PM2守护程序"><a href="#PM2守护程序" class="headerlink" title="PM2守护程序"></a>PM2守护程序</h4><p><strong>Next.js使用pm2，进入对应的应用目录，执行以下命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start npm --name <span class="string">"my-next"</span> -- run build</span><br></pre></td></tr></table></figure><p><strong>Nuxt.js使用pm2，进入对应的应用目录，执行以下命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start npm --name <span class="string">"my-nuxt"</span> -- run build</span><br></pre></td></tr></table></figure><p><code>使用pm2时，把两个部署命令合成一个更方便！</code>执行完pm2的启动命令后，我们用<code>pm2 list</code>查看一下进程列表，我截一下我个人服务器的pm2列表：</p><p><img src="/images/linux-nginx-ssr-deploy/img1.png" alt="img1.png"></p><p>以后您就可以用pm2进行维护了，比如我们的next应用更改了代码，因为当时创建时给next应用命名的进程名称为<code>my-next</code>，因此我们可以直接使用<code>pm2 reload my-next</code>进行重载。接下来我就简单介绍一下pm2，如果有需要，我可以另写一篇关于pm2的文章！</p><h4 id="pm2-简单介绍"><a href="#pm2-简单介绍" class="headerlink" title="pm2 简单介绍"></a>pm2 简单介绍</h4><p>pm2是nodejs的一个带有负载均衡功能的应用进程管理器的模块，类似有Supervisor，forever，用来进行进程管理。</p><h5 id="一、安装："><a href="#一、安装：" class="headerlink" title="一、安装："></a>一、安装：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install pm2 -g</span><br></pre></td></tr></table></figure><h5 id="二、启动："><a href="#二、启动：" class="headerlink" title="二、启动："></a>二、启动：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start app.js</span><br><span class="line">$ pm2 start app.js --name my-api       <span class="comment">#my-api为PM2进程名称</span></span><br><span class="line">$ pm2 start app.js -i 0                <span class="comment">#根据CPU核数启动进程个数</span></span><br><span class="line">$ pm2 start app.js --watch             <span class="comment">#实时监控app.js的方式启动，当app.js文件有变动时，pm2会自动reload</span></span><br></pre></td></tr></table></figure><h5 id="三、查看进程："><a href="#三、查看进程：" class="headerlink" title="三、查看进程："></a>三、查看进程：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 list</span><br><span class="line">$ pm2 show 0 或者 <span class="comment"># pm2 info 0         #查看进程详细信息，0为PM2进程id</span></span><br></pre></td></tr></table></figure><h5 id="四、监控："><a href="#四、监控：" class="headerlink" title="四、监控："></a>四、监控：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 monit</span><br></pre></td></tr></table></figure><h5 id="五、停止："><a href="#五、停止：" class="headerlink" title="五、停止："></a>五、停止：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 stop all                         <span class="comment">#停止PM2列表中所有的进程</span></span><br><span class="line">$ pm2 stop 0                           <span class="comment">#停止PM2列表中进程为0的进程</span></span><br></pre></td></tr></table></figure><h5 id="六、重载："><a href="#六、重载：" class="headerlink" title="六、重载："></a>六、重载：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 reload all                       <span class="comment">#重载PM2列表中所有的进程</span></span><br><span class="line">$ pm2 reload 0                         <span class="comment">#重载PM2列表中进程为0的进程</span></span><br></pre></td></tr></table></figure><h5 id="七、重启："><a href="#七、重启：" class="headerlink" title="七、重启："></a>七、重启：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 restart all                      <span class="comment">#重启PM2列表中所有的进程</span></span><br><span class="line">$ pm2 restart 0                        <span class="comment">#重启PM2列表中进程为0的进程</span></span><br></pre></td></tr></table></figure><h5 id="八、删除PM2进程："><a href="#八、删除PM2进程：" class="headerlink" title="八、删除PM2进程："></a>八、删除PM2进程：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 delete 0                         <span class="comment">#删除PM2列表中进程为0的进程</span></span><br><span class="line">$ pm2 delete all                       <span class="comment">#删除PM2列表中所有的进程</span></span><br></pre></td></tr></table></figure><h5 id="九、日志操作："><a href="#九、日志操作：" class="headerlink" title="九、日志操作："></a>九、日志操作：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 logs [--raw]                     <span class="comment">#Display all processes logs in streaming</span></span><br><span class="line">$ pm2 flush                            <span class="comment">#Empty all log file</span></span><br><span class="line">$ pm2 reloadLogs                       <span class="comment">#Reload all logs</span></span><br></pre></td></tr></table></figure><h5 id="十、升级PM2："><a href="#十、升级PM2：" class="headerlink" title="十、升级PM2："></a>十、升级PM2：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install pm2@lastest -g           <span class="comment">#安装最新的PM2版本</span></span><br><span class="line">$ pm2 updatePM2                        <span class="comment">#升级pm2</span></span><br></pre></td></tr></table></figure><h5 id="十一、更多命令参数请查看帮助："><a href="#十一、更多命令参数请查看帮助：" class="headerlink" title="十一、更多命令参数请查看帮助："></a>十一、更多命令参数请查看帮助：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h5 id="十二、PM2目录结构："><a href="#十二、PM2目录结构：" class="headerlink" title="十二、PM2目录结构："></a>十二、PM2目录结构：</h5><ul><li>1、默认的目录是：当前用于的家目录下的.pm2目录（此目录可以自定义，请参考：十三、自定义启动文件），详细信息如下：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$HOME/.pm2                   #will contain all PM2 related files</span><br><span class="line">$HOME/.pm2/logs              #will contain all applications logs</span><br><span class="line">$HOME/.pm2/pids              #will contain all applications pids</span><br><span class="line">$HOME/.pm2/pm2.log           #PM2 logs</span><br><span class="line">$HOME/.pm2/pm2.pid           #PM2 pid</span><br><span class="line">$HOME/.pm2/rpc.sock          #Socket file for remote commands</span><br><span class="line">$HOME/.pm2/pub.sock          #Socket file for publishable events</span><br><span class="line">$HOME/.pm2/conf.js           #PM2 Configuration</span><br></pre></td></tr></table></figure></li></ul><h5 id="十三、自定义启动文件："><a href="#十三、自定义启动文件：" class="headerlink" title="十三、自定义启动文件："></a>十三、自定义启动文件：</h5><ul><li><p>1、创建一个test.json的示例文件，格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"apps"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"test"</span>,</span><br><span class="line">      <span class="attr">"cwd"</span>: <span class="string">"/data/wwwroot/nodejs"</span>,</span><br><span class="line">      <span class="attr">"script"</span>: <span class="string">"./test.sh"</span>,</span><br><span class="line">      <span class="attr">"exec_interpreter"</span>: <span class="string">"bash"</span>,</span><br><span class="line">      <span class="attr">"min_uptime"</span>: <span class="string">"60s"</span>,</span><br><span class="line">      <span class="attr">"max_restarts"</span>: <span class="number">30</span>,</span><br><span class="line">      <span class="attr">"exec_mode"</span> : <span class="string">"cluster_mode"</span>,</span><br><span class="line">      <span class="attr">"error_file"</span> : <span class="string">"./test-err.log"</span>,</span><br><span class="line">      <span class="attr">"out_file"</span>: <span class="string">"./test-out.log"</span>,</span><br><span class="line">      <span class="attr">"pid_file"</span>: <span class="string">"./test.pid"</span></span><br><span class="line">      <span class="string">"watch"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2、参数说明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apps：json结构，apps是一个数组，每一个数组成员就是对应一个pm2中运行的应用</span><br><span class="line">name：应用程序的名称</span><br><span class="line">cwd：应用程序所在的目录</span><br><span class="line">script：应用程序的脚本路径</span><br><span class="line">exec_interpreter：应用程序的脚本类型，这里使用的shell，默认是nodejs</span><br><span class="line">min_uptime：最小运行时间，这里设置的是<span class="number">60</span>s即如果应用程序在<span class="number">60</span>s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量</span><br><span class="line">max_restarts：设置应用程序异常退出重启的次数，默认<span class="number">15</span>次（从<span class="number">0</span>开始计数）</span><br><span class="line">exec_mode：应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork</span><br><span class="line">error_file：自定义应用程序的错误日志文件</span><br><span class="line">out_file：自定义应用程序日志文件</span><br><span class="line">pid_file：自定义应用程序的pid文件</span><br><span class="line">watch：是否启用监控模式，默认是<span class="literal">false</span>。如果设置成<span class="literal">true</span>，当应用程序变动时，pm2会自动重载。这里也可以设置你要监控的文件。</span><br></pre></td></tr></table></figure></li></ul><h4 id="部署（以nuxt为例）"><a href="#部署（以nuxt为例）" class="headerlink" title="部署（以nuxt为例）"></a>部署（以nuxt为例）</h4><h4 id="基础模板的部署方式"><a href="#基础模板的部署方式" class="headerlink" title="基础模板的部署方式"></a>基础模板的部署方式</h4><p>何为基础模板？使用了<code>vue init nuxt-community/starter-template &lt;project-name&gt;</code>进行搭建的！</p><h5 id="第一步，打包"><a href="#第一步，打包" class="headerlink" title="第一步，打包"></a><strong>第一步，打包</strong></h5><p>在执行<code>npm run build</code>的时候，<code>nuxt</code>会自动打包。</p><h5 id="第二步，选择要部署的文件（社友最关心的步骤）："><a href="#第二步，选择要部署的文件（社友最关心的步骤）：" class="headerlink" title="第二步，选择要部署的文件（社友最关心的步骤）："></a><strong>第二步，选择要部署的文件（社友最关心的步骤）：</strong></h5><ul><li><code>.nuxt/</code>文件夹</li><li><code>package.json</code>文件</li><li><code>nuxt.config.js</code>文件(如果你配置proxy等，则需要上传这个文件，建议把它传上去)</li></ul><h5 id="第三步，启动你的nuxt："><a href="#第三步，启动你的nuxt：" class="headerlink" title="第三步，启动你的nuxt："></a><strong>第三步，启动你的nuxt：</strong></h5><p>使用pm2启动你的nuxt.js：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install // or yarn install 如果未安装依赖或依赖有更改</span><br><span class="line">$ pm2 start npm --name <span class="string">"my-nuxt"</span> -- run start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;貌似从前几年，前后端分离逐渐就开始流行起来，把一些渲染计算的工作抛向前端以便减轻服务端的压力，但为啥现在又开始流行在服务端渲染了呢？如vue全家桶或者react全家桶，都推荐通过服务端渲染来实现路由。搞得我们慌得不行，不禁让我想起一句话：&lt;code&gt;从来没有任何一门语言的技
      
    
    </summary>
    
      <category term="nginx" scheme="http://sosout.com/categories/nginx/"/>
    
    
      <category term="spa" scheme="http://sosout.com/tags/spa/"/>
    
      <category term="pm2" scheme="http://sosout.com/tags/pm2/"/>
    
      <category term="ssr" scheme="http://sosout.com/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>vuejs、react如何在服务器部署？</title>
    <link href="http://sosout.com/2018/08/02/linux-nginx-spa-deploy.html"/>
    <id>http://sosout.com/2018/08/02/linux-nginx-spa-deploy.html</id>
    <published>2018-08-02T00:03:57.000Z</published>
    <updated>2018-09-25T11:39:02.761Z</updated>
    
    <content type="html"><![CDATA[<p>最近好多伙伴说，我用vue做的项目本地是可以的，但部署到服务器遇到好多问题：<code>资源找不到</code>，<code>直接访问index.html页面空白</code>，<code>刷新当前路由404</code>。。。用react做的项目也同样遇到类似问题。现在我们一起讨论下单页面如何部署到服务器？</p><p>由于前端路由缘故，单页面应用应该放到<code>nginx或者apache、tomcat等web代理服务器中，千万不要直接访问index.html，同时要根据自己服务器的项目路径更改react或vue的路由地址</code>。</p><p>如果说项目是直接跟在域名后面的，比如:<code>http://www.sosout.com</code>，根路由就是<code>/</code>。如果说项目是直接跟在域名后面的一个子目录中的，比如:<code>http://www.sosout.com/children</code> ，根路由就是<code>/children</code>，不能直接访问<code>index.html</code>。</p><p><strong>以配置<code>nginx</code>为例，配置过程大致如下：</strong></p><p>我们首先假设以下两条规则：<br><code>1. 项目文件目录： /mnt/html/spa（spa目录下的文件就是执行了npm run dist 后生成的dist目录下的文件）</code><br><code>2. 访问域名：spa.sosout.com</code> </p><p>进入<code>nginx.conf</code>新增如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  spa.sosout.com;</span><br><span class="line">    <span class="attribute">root</span> /mnt/html/spa;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/favicon\.ico$</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> /mnt/html/spa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Forwarded-Proto  <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">access_log</span>  /mnt/logs/nginx/access.log  main;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：<br><code>1、配置域名的话，需要80端口，成功后，只要访问域名即可访问的项目</code><br><code>2、如果你使用了react-router的 browserHistory 模式或 vue-router的 history 模式，在nginx配置还需要重写路由：</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  spa.sosout.com;</span><br><span class="line">    <span class="attribute">root</span> /mnt/html/spa;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/favicon\.ico$</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> /mnt/html/spa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ <span class="variable">@fallback</span>;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Forwarded-Proto  <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> <span class="variable">@fallback</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^.*$</span> /index.html <span class="literal">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">access_log</span>  /mnt/logs/nginx/access.log  main;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么要重写路由？</strong><code>因为我们的项目只有一个根入口，当输入类似/home的url时，如果找不到对应的页面，nginx会尝试加载index.html，这是通过react-router或vue-router就能正确的匹配我们输入的/home路由，从而显示正确的home页面，如果browserHistory模式或history模式的项目没有配置上述内容，会出现404的情况。</code></p><p>简单举两个例子，一个<code>vue</code>项目一个<code>react</code>项目：</p><p><strong>vue项目：</strong></p><p>域名：<code>http://tb.sosout.com</code><br><img src="/images/linux-nginx-spa-deploy/img1.png" alt="img1.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'../App'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首页</span></span><br><span class="line"><span class="keyword">const</span> home = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'../page/home/index'</span>)), <span class="string">'home'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物流</span></span><br><span class="line"><span class="keyword">const</span> logistics = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'../page/logistics/index'</span>)), <span class="string">'logistics'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 购物车</span></span><br><span class="line"><span class="keyword">const</span> cart = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'../page/cart/index'</span>)), <span class="string">'cart'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我的</span></span><br><span class="line"><span class="keyword">const</span> profile = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'../page/profile/index'</span>)), <span class="string">'profile'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录界面</span></span><br><span class="line"><span class="keyword">const</span> login = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'../page/user/login'</span>)), <span class="string">'login'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [&#123;</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  component: App, <span class="comment">// 顶层路由，对应index.html</span></span><br><span class="line">  children: [&#123;</span><br><span class="line">    path: <span class="string">'/home'</span>, <span class="comment">// 首页</span></span><br><span class="line">    component: home</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/logistics'</span>, <span class="comment">// 物流</span></span><br><span class="line">    component: logistics,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      login: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/cart'</span>, <span class="comment">// 购物车</span></span><br><span class="line">    component: cart,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      login: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/profile'</span>, <span class="comment">// 我的</span></span><br><span class="line">    component: profile</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/login'</span>, <span class="comment">// 登录界面</span></span><br><span class="line">    component: login</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'*'</span>,</span><br><span class="line">    redirect: <span class="string">'/home'</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p><img src="/images/linux-nginx-spa-deploy/img2.png" alt="img2.png"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############</span></span><br><span class="line"><span class="comment"># 其他配置</span></span><br><span class="line"><span class="comment">############</span></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment">############</span></span><br><span class="line">    <span class="comment"># 其他配置</span></span><br><span class="line">    <span class="comment">############</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  tb.sosout.com;</span><br><span class="line">        <span class="attribute">root</span> /mnt/html/tb;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ ^/favicon\.ico$</span> &#123;</span><br><span class="line">            <span class="attribute">root</span> /mnt/html/tb;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ <span class="variable">@fallback</span>;</span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Forwarded-Proto  <span class="variable">$scheme</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="variable">@fallback</span> &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^.*$</span> /index.html <span class="literal">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">access_log</span>  /mnt/logs/nginx/access.log  main;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">############</span></span><br><span class="line">    <span class="comment"># 其他配置</span></span><br><span class="line">    <span class="comment">############   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>react项目：</strong></p><p>域名：<code>http://antd.sosout.com</code></p><p><img src="/images/linux-nginx-spa-deploy/img3.png" alt="img3.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 疑惑一：</span></span><br><span class="line"><span class="comment">* React createClass 和 extends React.Component 有什么区别?</span></span><br><span class="line"><span class="comment">* 之前写法：</span></span><br><span class="line"><span class="comment">* let app = React.createClass(&#123;</span></span><br><span class="line"><span class="comment">*  getInitialState: function()&#123;</span></span><br><span class="line"><span class="comment">*    // some thing</span></span><br><span class="line"><span class="comment">*  &#125;</span></span><br><span class="line"><span class="comment">*  &#125;)</span></span><br><span class="line"><span class="comment">* ES6写法(通过es6类的继承实现时state的初始化要在constructor中声明)：</span></span><br><span class="line"><span class="comment">* class exampleComponent extends React.Component &#123;</span></span><br><span class="line"><span class="comment">*    constructor(props) &#123;</span></span><br><span class="line"><span class="comment">*        super(props);</span></span><br><span class="line"><span class="comment">*        this.state = &#123;example: 'example'&#125;</span></span><br><span class="line"><span class="comment">*    &#125;</span></span><br><span class="line"><span class="comment">* &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component, PropTypes&#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">// react核心</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, Redirect, IndexRoute, browserHistory, hashHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>; <span class="comment">// 创建route所需</span></span><br><span class="line"><span class="keyword">import</span> Config <span class="keyword">from</span> <span class="string">'../config/index'</span>;</span><br><span class="line"><span class="keyword">import</span> layout <span class="keyword">from</span> <span class="string">'../component/layout/layout'</span>; <span class="comment">// 布局界面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">'../containers/login/login'</span>; <span class="comment">// 登录界面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (路由根目录组件，显示当前符合条件的组件)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @class Roots</span></span><br><span class="line"><span class="comment"> * @extends &#123;Component&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Roots</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="comment">// 这个组件是一个包裹组件，所有的路由跳转的页面都会以this.props.children的形式加载到本组件下</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;&#123;<span class="keyword">this</span>.props.children&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ const history = process.env.NODE_ENV !== 'production' ? browserHistory : hashHistory;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 快速入门</span></span><br><span class="line"><span class="regexp">const home = (location, cb) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    require.ensure([], require =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        cb(null, require('../</span>containers/home/homeIndex<span class="string">').default)</span></span><br><span class="line"><span class="string">    &#125;, '</span>home<span class="string">');</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 百度图表-折线图</span></span><br><span class="line"><span class="string">const chartLine = (location, cb) =&gt; &#123;</span></span><br><span class="line"><span class="string">    require.ensure([], require =&gt; &#123;</span></span><br><span class="line"><span class="string">        cb(null, require('</span>../containers/charts/lines<span class="string">').default)</span></span><br><span class="line"><span class="string">    &#125;, '</span>chartLine<span class="string">');</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 基础组件-按钮</span></span><br><span class="line"><span class="string">const button = (location, cb) =&gt; &#123;</span></span><br><span class="line"><span class="string">    require.ensure([], require =&gt; &#123;</span></span><br><span class="line"><span class="string">        cb(null, require('</span>../containers/general/buttonIndex<span class="string">').default)</span></span><br><span class="line"><span class="string">    &#125;, '</span>button<span class="string">');</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 基础组件-图标</span></span><br><span class="line"><span class="string">const icon = (location, cb) =&gt; &#123;</span></span><br><span class="line"><span class="string">    require.ensure([], require =&gt; &#123;</span></span><br><span class="line"><span class="string">        cb(null, require('</span>../containers/general/iconIndex<span class="string">').default)</span></span><br><span class="line"><span class="string">    &#125;, '</span>icon<span class="string">');</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 用户管理</span></span><br><span class="line"><span class="string">const user = (location, cb) =&gt; &#123;</span></span><br><span class="line"><span class="string">    require.ensure([], require =&gt; &#123;</span></span><br><span class="line"><span class="string">        cb(null, require('</span>../containers/user/userIndex<span class="string">').default)</span></span><br><span class="line"><span class="string">    &#125;, '</span>user<span class="string">');</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 系统设置</span></span><br><span class="line"><span class="string">const setting = (location, cb) =&gt; &#123;</span></span><br><span class="line"><span class="string">    require.ensure([], require =&gt; &#123;</span></span><br><span class="line"><span class="string">        cb(null, require('</span>../containers/setting/settingIndex<span class="string">').default)</span></span><br><span class="line"><span class="string">    &#125;, '</span>setting<span class="string">');</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 广告管理</span></span><br><span class="line"><span class="string">const adver = (location, cb) =&gt; &#123;</span></span><br><span class="line"><span class="string">    require.ensure([], require =&gt; &#123;</span></span><br><span class="line"><span class="string">        cb(null, require('</span>../containers/adver/adverIndex<span class="string">').default)</span></span><br><span class="line"><span class="string">    &#125;, '</span>adver<span class="string">');</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 组件一</span></span><br><span class="line"><span class="string">const oneui = (location, cb) =&gt; &#123;</span></span><br><span class="line"><span class="string">    require.ensure([], require =&gt; &#123;</span></span><br><span class="line"><span class="string">        cb(null, require('</span>../containers/ui/oneIndex<span class="string">').default)</span></span><br><span class="line"><span class="string">    &#125;, '</span>oneui<span class="string">');</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 组件二</span></span><br><span class="line"><span class="string">const twoui = (location, cb) =&gt; &#123;</span></span><br><span class="line"><span class="string">    require.ensure([], require =&gt; &#123;</span></span><br><span class="line"><span class="string">        cb(null, require('</span>../containers/ui/twoIndex<span class="string">').default)</span></span><br><span class="line"><span class="string">    &#125;, '</span>twoui<span class="string">');</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 登录验证</span></span><br><span class="line"><span class="string">const requireAuth = (nextState, replace) =&gt; &#123;</span></span><br><span class="line"><span class="string">let token = (new Date()).getTime() - Config.localItem('</span>USER_AUTHORIZATION<span class="string">');</span></span><br><span class="line"><span class="string">if(token &gt; 7200000) &#123; // 模拟Token保存2个小时</span></span><br><span class="line"><span class="string">replace(&#123;</span></span><br><span class="line"><span class="string">pathname: '</span>/login<span class="string">',</span></span><br><span class="line"><span class="string">state: &#123; nextPathname: nextState.location.pathname &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const RouteConfig = (</span></span><br><span class="line"><span class="string">&lt;Router history=&#123;browserHistory&#125;&gt;</span></span><br><span class="line"><span class="string">&lt;Route path="/home" component=&#123;layout&#125; onEnter=&#123;requireAuth&#125;&gt;</span></span><br><span class="line"><span class="string">&lt;IndexRoute getComponent=&#123;home&#125; onEnter=&#123;requireAuth&#125; /&gt; // 默认加载的组件，比如访问www.test.com,会自动跳转到www.test.com/home</span></span><br><span class="line"><span class="string">&lt;Route path="/home" getComponent=&#123;home&#125; onEnter=&#123;requireAuth&#125; /&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path="/chart/line" getComponent=&#123;chartLine&#125; onEnter=&#123;requireAuth&#125; /&gt;</span></span><br><span class="line"><span class="string">&lt;Route path="/general/button" getComponent=&#123;button&#125; onEnter=&#123;requireAuth&#125; /&gt;</span></span><br><span class="line"><span class="string">&lt;Route path="/general/icon" getComponent=&#123;icon&#125; onEnter=&#123;requireAuth&#125; /&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path="/user" getComponent=&#123;user&#125; onEnter=&#123;requireAuth&#125; /&gt;</span></span><br><span class="line"><span class="string">&lt;Route path="/setting" getComponent=&#123;setting&#125; onEnter=&#123;requireAuth&#125; /&gt;</span></span><br><span class="line"><span class="string">&lt;Route path="/adver" getComponent=&#123;adver&#125; onEnter=&#123;requireAuth&#125; /&gt;</span></span><br><span class="line"><span class="string">&lt;Route path="/ui/oneui" getComponent=&#123;oneui&#125; onEnter=&#123;requireAuth&#125; /&gt;</span></span><br><span class="line"><span class="string">&lt;Route path="/ui/twoui" getComponent=&#123;twoui&#125; onEnter=&#123;requireAuth&#125; /&gt;</span></span><br><span class="line"><span class="string">&lt;/Route&gt;</span></span><br><span class="line"><span class="string">&lt;Route path="/login" component=&#123;Roots&#125;&gt; // 所有的访问，都跳转到Roots</span></span><br><span class="line"><span class="string">&lt;IndexRoute component=&#123;login&#125; /&gt; // 默认加载的组件，比如访问www.test.com,会自动跳转到www.test.com/home</span></span><br><span class="line"><span class="string">&lt;/Route&gt;</span></span><br><span class="line"><span class="string">&lt;Redirect from="*" to="/home" /&gt;</span></span><br><span class="line"><span class="string">&lt;/Router&gt;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default RouteConfig;</span></span><br></pre></td></tr></table></figure><p><img src="/images/linux-nginx-spa-deploy/img4.png" alt="img4.png"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############</span></span><br><span class="line"><span class="comment"># 其他配置</span></span><br><span class="line"><span class="comment">############</span></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment">############</span></span><br><span class="line">    <span class="comment"># 其他配置</span></span><br><span class="line">    <span class="comment">############</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  antd.sosout.com;</span><br><span class="line">        <span class="attribute">root</span> /mnt/html/reactAntd;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ ^/favicon\.ico$</span> &#123;</span><br><span class="line">            <span class="attribute">root</span> /mnt/html/reactAntd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ <span class="variable">@router</span>;</span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Forwarded-Proto  <span class="variable">$scheme</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="variable">@router</span> &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^.*$</span> /index.html <span class="literal">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">access_log</span>  /mnt/logs/nginx/access.log  main;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">############</span></span><br><span class="line">    <span class="comment"># 其他配置</span></span><br><span class="line">    <span class="comment">############   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近好多伙伴说，我用vue做的项目本地是可以的，但部署到服务器遇到好多问题：&lt;code&gt;资源找不到&lt;/code&gt;，&lt;code&gt;直接访问index.html页面空白&lt;/code&gt;，&lt;code&gt;刷新当前路由404&lt;/code&gt;。。。用react做的项目也同样遇到类似问题。现在我
      
    
    </summary>
    
      <category term="nginx" scheme="http://sosout.com/categories/nginx/"/>
    
    
      <category term="spa" scheme="http://sosout.com/tags/spa/"/>
    
  </entry>
  
  <entry>
    <title>CSS 选择器</title>
    <link href="http://sosout.com/2018/08/01/css-selector.html"/>
    <id>http://sosout.com/2018/08/01/css-selector.html</id>
    <published>2018-08-01T15:05:21.000Z</published>
    <updated>2018-09-25T11:39:02.754Z</updated>
    
    <content type="html"><![CDATA[<p>今天团队中一个正在交接的小弟出去面试，气冲冲的回来吐槽面试官不会面试，竟然会问CSS选择器，在我苦口婆心的劝说下，小弟终于意识到CSS选择器的重要性，为了让他能够找到一个好工作，我便写了这篇文章供他学习。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>我们都知道一条CSS样式定义有两部分组成，形式如下：<code>选择器 {}</code>，在<code>{}</code>之前的部分就是选择器。选择器指明了<code>{}</code>中的样式的作用对象，也就是样式作用于网页中的哪些元素。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>CSS选择器用于定位我们想要给予样式的 HTML 元素，但不只是在 CSS 中，JavaScript 对 CSS 的选择器也是支持的，比如<code>document.querySelector</code>、<code>document.querySelectorAll</code>。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><table><thead><tr><th>选择器</th><th>名称</th><th>描述</th><th>版本</th></tr></thead><tbody><tr><td>*</td><td>通配选择器</td><td>选择所有的元素</td><td>CSS2</td></tr><tr><td>element</td><td>元素选择器</td><td>选择指定的元素</td><td>CSS1</td></tr><tr><td>#idName</td><td>id选择器</td><td>选择id属性等于idName的元素</td><td>CSS1</td></tr><tr><td>.className</td><td>类选择器</td><td>选择class属性包含className的元素</td><td>CSS1</td></tr></tbody></table><h4 id="通配符选择器「-」"><a href="#通配符选择器「-」" class="headerlink" title="通配符选择器「 * 」"></a>通配符选择器「 * 」</h4><p>这个选择器是匹配页面中所有的元素，选择器也能选取另一个元素中的所有元素，不过这个选择器的效率比较低，一般用来清除浏览器的默认样式。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 清楚浏览器默认样式 */</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>; </span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> * &#123; </span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>span，p 都变红。</p><h4 id="元素选择器「-element-」"><a href="#元素选择器「-element-」" class="headerlink" title="元素选择器「 element 」"></a>元素选择器「 element 」</h4><p>通过标签名来选择元素。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>div1，div2，div3 都变红</p><h4 id="id选择器「-idName-」"><a href="#id选择器「-idName-」" class="headerlink" title="id选择器「 #idName 」"></a>id选择器「 #idName 」</h4><p>以id属性来命名，在页面中只能出现一次，具有唯一性，并且权重值最高，相当于一个人的身份证。注意：应用于多个元素，样式同样生效。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>div，p都变红。</p><h4 id="类选择器-「-className-」"><a href="#类选择器-「-className-」" class="headerlink" title="类选择器 「 .className 」"></a>类选择器 「 .className 」</h4><p>class选择器/类选择器/用class属性给元素命名，在页面中可以出现很多次，相当于人的名字。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>div，p 都变红。</p><h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><table><thead><tr><th>选择器</th><th>名称</th><th>描述</th><th>版本</th></tr></thead><tbody><tr><td>E,F</td><td>多元素选择器</td><td>同时匹配元素E或元素F</td><td>CSS1</td></tr><tr><td>E F</td><td>后代选择器</td><td>匹配E元素所有的后代（不只是子元素、子元素向下递归）元素F</td><td>CSS1</td></tr><tr><td>E &gt; F</td><td>子元素选择器</td><td>匹配E元素的所有直接子元素F</td><td>CSS2</td></tr><tr><td>E + F</td><td>相邻兄弟选择器</td><td>匹配E元素之后的相邻的同级元素F</td><td>CSS2</td></tr><tr><td>E ~ F</td><td>普通兄弟选择器</td><td>匹配E元素之后的同级元素F（无论直接相邻与否）</td><td>CSS3</td></tr></tbody></table><h4 id="多元素选择器-「-E-F-」"><a href="#多元素选择器-「-E-F-」" class="headerlink" title="多元素选择器 「 E,F 」"></a>多元素选择器 「 E,F 」</h4><p>选择所有的E元素和F元素，中间用逗号隔开。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 同时匹配div标签和p标签</span><br><span class="line"><span class="selector-tag">div</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>div，p 都变红。</p><h4 id="后代选择器-「-E-F-」"><a href="#后代选择器-「-E-F-」" class="headerlink" title="后代选择器 「 E F 」"></a>后代选择器 「 E F 」</h4><p>选择所有被E元素包含的所有的F元素（包括子、孙），中间用空格隔开。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>span1，span2，span3 都变红。</p><h4 id="子元素选择器-「-E-gt-F-」"><a href="#子元素选择器-「-E-gt-F-」" class="headerlink" title="子元素选择器 「 E &gt; F 」"></a>子元素选择器 「 E &gt; F 」</h4><p>选择所有作为E元素的直接子元素F，对更深一层的元素不起作用，用 &gt; 表示。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>span1，span3 变红。</p><h4 id="相邻兄弟选择器-「-E-F-」"><a href="#相邻兄弟选择器-「-E-F-」" class="headerlink" title="相邻兄弟选择器 「 E + F 」"></a>相邻兄弟选择器 「 E + F 」</h4><p>选择紧跟E元素后的F元素，用 + 表示，选择相邻的第一个兄弟元素。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> + <span class="selector-tag">p</span> &#123; </span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p3 变红。</p><h4 id="普通兄弟选择器-「-E-F-」"><a href="#普通兄弟选择器-「-E-F-」" class="headerlink" title="普通兄弟选择器 「 E ~ F 」"></a>普通兄弟选择器 「 E ~ F 」</h4><p>选择E元素之后的所有同级元素F（无论直接相邻与否），作用于多个元素，用 ~ 隔开。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> ~ <span class="selector-tag">p</span> &#123; </span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p3，p4 变红。</p><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><table><thead><tr><th>选择器</th><th>例子</th><th>例子描述</th><th>版本</th></tr></thead><tbody><tr><td>[attribute]</td><td>[target]</td><td>选择所有带有target属性元素。</td><td>CSS2</td></tr><tr><td>[attribute=value]</td><td>[target=_blank]</td><td>选择 target=”_blank” 的所有元素。</td><td>CSS2</td></tr><tr><td>[attribute~=value]</td><td>[title~=flower]</td><td>选择 title 属性包含单词 “flower” 的所有元素。</td><td>CSS2</td></tr><tr><td>[attribute&#124;=value]</td><td>[lang&#124;=en]</td><td>选择 lang 属性值以 “en” 开头的所有元素。</td><td>CSS2</td></tr><tr><td>[attribute^=value]]</td><td>a[src^=”https”]</td><td>选择其 src 属性值以 “https” 开头的每个 a 元素。</td><td>CSS3</td></tr><tr><td>[attribute$=value]</td><td>a[src$=”.pdf”]</td><td>选择其 src 属性以 “.pdf” 结尾的所有 a 元素。</td><td>CSS3</td></tr><tr><td>[attribute*=value]</td><td>a[src*=”abc”]</td><td>选择其 src 属性中包含 “abc” 子串的每个 a 元素。</td><td>CSS3</td></tr></tbody></table><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><table><thead><tr><th>选择器</th><th>例子</th><th>例子描述</th><th>版本</th></tr></thead><tbody><tr><td>:link</td><td>a:link</td><td>选择所有未被访问的链接。</td><td>CSS1</td></tr><tr><td>:visited</td><td>a:visited</td><td>选择所有已被访问的链接。</td><td>CSS1</td></tr><tr><td>:active</td><td>a:active</td><td>选择活动链接。</td><td>CSS1</td></tr><tr><td>:hover</td><td>a:hover</td><td>选择鼠标指针位于其上的链接。</td><td>CSS1</td></tr><tr><td>:focus</td><td>input:focus</td><td>选择获得焦点的 input 元素。</td><td>CSS2</td></tr></tbody></table><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><table><thead><tr><th>选择器</th><th>例子</th><th>例子描述</th><th>版本</th></tr></thead><tbody><tr><td>:first-letter</td><td>p:first-letter</td><td>选择每个 p 元素的首字母。</td><td>CSS1</td></tr><tr><td>:first-line</td><td>p:first-line</td><td>选择每个 p 元素的首行。</td><td>CSS1</td></tr><tr><td>:first-child</td><td>p:first-child</td><td>选择属于父元素的第一个子元素的每个 p 元素。</td><td>CSS2</td></tr><tr><td>:before</td><td>p:before</td><td>在每个 p 元素的内容之前插入内容。</td><td>CSS2</td></tr><tr><td>:after</td><td>p:after</td><td>在每个 p 元素的内容之后插入内容。</td><td>CSS2</td></tr><tr><td>:lang(language)</td><td>p:lang(it)</td><td>选择带有以 “it” 开头的 lang 属性值的每个 p 元素。</td><td>CSS2</td></tr></tbody></table><h3 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h3><p>更多伪类、伪元素选择器，见如下截图：</p><p><img src="/images/css-selector/img1.png" alt="css-selector1.png"></p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>当创建的样式表越来越复杂时，一个标签的样式将会受到越来越多的影响，用户看到的其实是通过<strong>层叠计算</strong>得来的，通俗点讲就是先计算再重叠得来的。</p><blockquote><p><strong>计算</strong>指的是用户代理（浏览器只是用户代理的一种“实例”）在渲染HTML的时候，对CSS进行层叠计算的过程。</p></blockquote><blockquote><p><strong>层叠</strong>是CSS的一个基本特征，它是一个定义了如何合并来自多个源的属性值的算法。它在CSS处于核心地位，CSS的全称层叠样式表正是强调了这一点。</p></blockquote><p>说到这，我们就不得不说一下优先级。优先级是决定不同选择器的相同样式规则对同一元素的生效情况，优先级高的将覆盖优先级低的样式规则。而优先级又受到样式来源和选择器特殊性的影响。</p><h3 id="特指度"><a href="#特指度" class="headerlink" title="特指度"></a>特指度</h3><p>说到优先级，我们又需要讲一下另一个概念：<strong>特指度</strong>。特指度表示一个css选择器表达式的重要程度，可以通过一个公式来计算出一个数值，数越大，越重要。这个计算叫做“I-C-E”计算公式；<br><strong>1.</strong>I——Id：100<br><strong>2.</strong>C——Class（类 | 伪类 | 属性选择）：10<br><strong>3.</strong>E——Element（标签 | 伪元素）：1<br><strong>4.</strong> 通用选择器：0</p><p>即针对一个css选择器表达式，遇到一个id就往特指度数值中加100，遇到一个class就往特指度数值中加10，遇到一个element就往特指度数值中加1。</p><p>下面举几个css表达式的特指度计算结果：</p><table><thead><tr><th>CSS选择器表达式</th><th>特指度计算结果</th></tr></thead><tbody><tr><td>p</td><td>1</td></tr><tr><td>p.large</td><td>11</td></tr><tr><td>p#large</td><td>101</td></tr><tr><td>div p#large</td><td>102</td></tr><tr><td>div p#large ul.list</td><td>113</td></tr><tr><td>div p#large ul.list li</td><td>114</td></tr></tbody></table><p>还有一个特别重要的点：<strong>!important优先级最高，高于上面一切。通配（*） 选择器最低，低于一切</strong>。</p><h4 id="错误的说法"><a href="#错误的说法" class="headerlink" title="错误的说法"></a>错误的说法</h4><p>在学习过程中，我们可能发现给选择器加权值的说法，即 ID 选择器权值为 100，类选择器权值为 10，标签选择器权值为 1，当一个选择器由多个 ID 选择器、类选择器或标签选择器组成时，则将所有权值相加，然后再比较权值。这种说法其实是有问题的。比如一个由 11 个类选择器组成的选择器和一个由 1 个 ID 选择器组成的选择器指向同一个标签，按理说 110 &gt; 100，应该应用前者的样式，然而事实是应用后者的样式。<strong>错误的原因是：选择器的权值不能进位。</strong>虽然 11 个类选择器组成的选择器的总权值为 110，但因为 11 个均为类选择器，所以其实总权值最多不能超过 100， 我们可以理解为 99.99，所以最终应用后者样式。</p><h3 id="多重样式间的优先级"><a href="#多重样式间的优先级" class="headerlink" title="多重样式间的优先级"></a>多重样式间的优先级</h3><p>w3school给出的优先级顺序从低到高是：</p><blockquote><p>浏览器缺省设置<br>外部样式表<br>内部样式表（位于 head 标签内部）<br>内联样式（在 HTML 元素内部）</p></blockquote><p>但如果外部样式表放在内部样式表后面其实是会覆盖内部样式表的，举个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123; </span></span><br><span class="line"><span class="undefined">            color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"index.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终得到的是蓝色的字体，很明显，内部样式被放在后面的外部样式覆盖了。所以我更倾向于认为外部样式表和内部样式表具有相同的优先级。</p><p>除了选择器，样式自身还可以继承和提升优先级，规则如下：<br><strong>一：</strong>从祖先元素继承来的样式优先级低于通用选择器；甚至低于浏览器的缺省设置，比如最常见的，重置链接的默认样式时必须写在链接元素上，放在祖先元素中是没有卵用滴<br><strong>二：</strong>使用大杀器!important可将样式提升到最高等级，不管这个样式在哪个样式表或选择器中；如果在同一样式中出现了多个!important，就得看上面的权重规则进行pk了。</p><p>因此多重样式间遵循：<strong>继承来的样式 &lt; 浏览器缺省设置 &lt; 外部样式表 = 内部样式表 &lt; 内联样式</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>优先级正确的排序是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">important &gt; 内联样式 &gt; ID &gt; 类 | 伪类 | 属性选择 &gt; 标签 | 伪元素 &gt; 继承 &gt; 通配符</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天团队中一个正在交接的小弟出去面试，气冲冲的回来吐槽面试官不会面试，竟然会问CSS选择器，在我苦口婆心的劝说下，小弟终于意识到CSS选择器的重要性，为了让他能够找到一个好工作，我便写了这篇文章供他学习。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; clas
      
    
    </summary>
    
      <category term="css" scheme="http://sosout.com/categories/css/"/>
    
    
      <category term="selector" scheme="http://sosout.com/tags/selector/"/>
    
  </entry>
  
</feed>
